

Microchip MPLAB XC8 Assembler V2.10 build 88905656 
                                                                                               Mon Nov 04 09:12:15 2019

Microchip MPLAB XC8 C Compiler v2.10 (Free license) build 20190730164152 Og1 
     1                           	processor	18F8722
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     6                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     8                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    20                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    21                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1
    24                           	psect	text12,global,reloc=2,class=CODE,delta=1
    25                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1
    27                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    28                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    29  0000                     
    30                           ; Version 2.10
    31                           ; Generated 31/07/2019 GMT
    32                           ; 
    33                           ; Copyright Â© 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
    34                           ; All rights reserved.
    35                           ; 
    36                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    37                           ; 
    38                           ; Redistribution and use in source and binary forms, with or without modification, are
    39                           ; permitted provided that the following conditions are met:
    40                           ; 
    41                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    42                           ;        conditions and the following disclaimer.
    43                           ; 
    44                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    45                           ;        of conditions and the following disclaimer in the documentation and/or other
    46                           ;        materials provided with the distribution.
    47                           ; 
    48                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    49                           ;        software without specific prior written permission.
    50                           ; 
    51                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    52                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    53                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    54                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    55                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    56                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    57                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    58                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    59                           ; 
    60                           ; 
    61                           ; Code-generator required, PIC18F8722 Definitions
    62                           ; 
    63                           ; SFR Addresses
    64  0000                     _T1CONbits	set	4045
    65  0000                     _PIE1bits	set	3997
    66  0000                     _PIR1bits	set	3998
    67  0000                     _TMR1L	set	4046
    68  0000                     _TMR1H	set	4047
    69  0000                     _T1CON	set	4045
    70  0000                     _LATDbits	set	3980
    71  0000                     _TMR0H	set	4055
    72  0000                     _TMR0L	set	4054
    73  0000                     _ADCON1	set	4033
    74  0000                     _PORTD	set	3971
    75  0000                     _TRISBbits	set	3987
    76  0000                     _TRISAbits	set	3986
    77  0000                     _T0CON	set	4053
    78  0000                     _LATD	set	3980
    79  0000                     _TRISD	set	3989
    80  0000                     _OSCCON	set	4051
    81  0000                     _INTCONbits	set	4082
    82                           
    83                           ; #config settings
    84  0000                     
    85                           	psect	cinit
    86  0017AA                     __pcinit:
    87                           	opt callstack 0
    88  0017AA                     start_initialization:
    89                           	opt callstack 0
    90  0017AA                     __initialization:
    91                           	opt callstack 0
    92                           
    93                           ; Clear objects allocated to BANK1 (230 bytes)
    94  0017AA  EE01  F000         	lfsr	0,__pbssBANK1
    95  0017AE  0EE6               	movlw	230
    96  0017B0                     clear_0:
    97  0017B0  6AEE               	clrf	postinc0,c
    98  0017B2  06E8               	decf	wreg,f,c
    99  0017B4  E1FD               	bnz	clear_0
   100                           
   101                           ; Clear objects allocated to BANK0 (28 bytes)
   102  0017B6  EE00  F0A7         	lfsr	0,__pbssBANK0
   103  0017BA  0E1C               	movlw	28
   104  0017BC                     clear_1:
   105  0017BC  6AEE               	clrf	postinc0,c
   106  0017BE  06E8               	decf	wreg,f,c
   107  0017C0  E1FD               	bnz	clear_1
   108                           
   109                           ; Clear objects allocated to COMRAM (15 bytes)
   110  0017C2  EE00  F043         	lfsr	0,__pbssCOMRAM
   111  0017C6  0E0F               	movlw	15
   112  0017C8                     clear_2:
   113  0017C8  6AEE               	clrf	postinc0,c
   114  0017CA  06E8               	decf	wreg,f,c
   115  0017CC  E1FD               	bnz	clear_2
   116  0017CE                     end_of_initialization:
   117                           	opt callstack 0
   118  0017CE                     __end_of__initialization:
   119                           	opt callstack 0
   120  0017CE  9052               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   121  0017D0  9252               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   122  0017D2  0100               	movlb	0
   123  0017D4  EFEC  F00B         	goto	_main	;jump to C main() function
   124                           
   125                           	psect	bssCOMRAM
   126  000043                     __pbssCOMRAM:
   127                           	opt callstack 0
   128  000043                     _time:
   129                           	opt callstack 0
   130  000043                     	ds	8
   131  00004B                     _ledVal:
   132                           	opt callstack 0
   133  00004B                     	ds	2
   134  00004D                     _count_count:
   135                           	opt callstack 0
   136  00004D                     	ds	2
   137  00004F                     _HEAD_ARRAY:
   138                           	opt callstack 0
   139  00004F                     	ds	2
   140  000051                     _ALLOW_TIMER_REGISTER:
   141                           	opt callstack 0
   142  000051                     	ds	1
   143                           
   144                           	psect	bssBANK0
   145  0000A7                     __pbssBANK0:
   146                           	opt callstack 0
   147  0000A7                     _execution:
   148                           	opt callstack 0
   149  0000A7                     	ds	20
   150  0000BB                     _HEAD_QUEUE:
   151                           	opt callstack 0
   152  0000BB                     	ds	2
   153  0000BD                     _NUMBER_EXIST_TASKS:
   154                           	opt callstack 0
   155  0000BD                     	ds	2
   156  0000BF                     _NUMBER_EXIST:
   157                           	opt callstack 0
   158  0000BF                     	ds	2
   159  0000C1                     _remove_tasks:
   160                           	opt callstack 0
   161  0000C1                     	ds	2
   162                           
   163                           	psect	bssBANK1
   164  000100                     __pbssBANK1:
   165                           	opt callstack 0
   166  000100                     _tasks:
   167                           	opt callstack 0
   168  000100                     	ds	230
   169                           
   170                           	psect	cstackBANK0
   171  000060                     __pcstackBANK0:
   172                           	opt callstack 0
   173  000060                     ?___wmul:
   174                           	opt callstack 0
   175  000060                     start_timer@type:
   176                           	opt callstack 0
   177  000060                     ___wmul@multiplier:
   178                           	opt callstack 0
   179                           
   180                           ; 2 bytes @ 0x0
   181  000060                     	ds	2
   182  000062                     ??_start_timer:
   183  000062                     ___wmul@multiplicand:
   184                           	opt callstack 0
   185                           
   186                           ; 2 bytes @ 0x2
   187  000062                     	ds	2
   188  000064                     start_timer@time_vaddr:
   189                           	opt callstack 0
   190  000064                     ___wmul@product:
   191                           	opt callstack 0
   192                           
   193                           ; 2 bytes @ 0x4
   194  000064                     	ds	2
   195  000066                     ?_register_timer:
   196                           	opt callstack 0
   197  000066                     blink_LED_1@index:
   198                           	opt callstack 0
   199  000066                     blink_LED_2@index:
   200                           	opt callstack 0
   201  000066                     blink_LED_3@index:
   202                           	opt callstack 0
   203  000066                     register_timer@delay:
   204                           	opt callstack 0
   205                           
   206                           ; 8 bytes @ 0x6
   207  000066                     	ds	2
   208  000068                     ??_blink_LED_1:
   209  000068                     ??_blink_LED_2:
   210  000068                     ??_blink_LED_3:
   211                           
   212                           ; 1 bytes @ 0x8
   213  000068                     	ds	2
   214  00006A                     
   215                           ; 1 bytes @ 0xA
   216  00006A                     	ds	2
   217  00006C                     dispatch@i:
   218                           	opt callstack 0
   219                           
   220                           ; 2 bytes @ 0xC
   221  00006C                     	ds	2
   222  00006E                     register_timer@period:
   223                           	opt callstack 0
   224                           
   225                           ; 8 bytes @ 0xE
   226  00006E                     	ds	8
   227  000076                     register_timer@callback:
   228                           	opt callstack 0
   229                           
   230                           ; 3 bytes @ 0x16
   231  000076                     	ds	3
   232  000079                     register_timer@data:
   233                           	opt callstack 0
   234                           
   235                           ; 2 bytes @ 0x19
   236  000079                     	ds	2
   237  00007B                     ??_register_timer:
   238                           
   239                           ; 1 bytes @ 0x1B
   240  00007B                     	ds	24
   241  000093                     _register_timer$1250:
   242                           	opt callstack 0
   243                           
   244                           ; 2 bytes @ 0x33
   245  000093                     	ds	2
   246  000095                     register_timer@i:
   247                           	opt callstack 0
   248                           
   249                           ; 2 bytes @ 0x35
   250  000095                     	ds	2
   251  000097                     _register_timer$1249:
   252                           	opt callstack 0
   253                           
   254                           ; 2 bytes @ 0x37
   255  000097                     	ds	2
   256  000099                     register_timer@temp_delay:
   257                           	opt callstack 0
   258                           
   259                           ; 8 bytes @ 0x39
   260  000099                     	ds	8
   261  0000A1                     register_timer@temp_index:
   262                           	opt callstack 0
   263                           
   264                           ; 2 bytes @ 0x41
   265  0000A1                     	ds	2
   266  0000A3                     initial_register@temp:
   267                           	opt callstack 0
   268                           
   269                           ; 4 bytes @ 0x43
   270  0000A3                     	ds	4
   271  0000A7                     
   272                           ; 1 bytes @ 0x47
   273                           
   274                           	psect	cstackCOMRAM
   275  000001                     __pcstackCOMRAM:
   276                           	opt callstack 0
   277  000001                     ?i2___wmul:
   278                           	opt callstack 0
   279  000001                     i2___wmul@multiplier:
   280                           	opt callstack 0
   281                           
   282                           ; 2 bytes @ 0x0
   283  000001                     	ds	2
   284  000003                     i2___wmul@multiplicand:
   285                           	opt callstack 0
   286                           
   287                           ; 2 bytes @ 0x2
   288  000003                     	ds	2
   289  000005                     i2___wmul@product:
   290                           	opt callstack 0
   291                           
   292                           ; 2 bytes @ 0x4
   293  000005                     	ds	2
   294  000007                     add_tasks@id:
   295                           	opt callstack 0
   296                           
   297                           ; 2 bytes @ 0x6
   298  000007                     	ds	2
   299  000009                     ??_add_tasks:
   300                           
   301                           ; 1 bytes @ 0x8
   302  000009                     	ds	24
   303  000021                     _add_tasks$1262:
   304                           	opt callstack 0
   305                           
   306                           ; 2 bytes @ 0x20
   307  000021                     	ds	2
   308  000023                     _add_tasks$1261:
   309                           	opt callstack 0
   310                           
   311                           ; 2 bytes @ 0x22
   312  000023                     	ds	2
   313  000025                     add_tasks@temp_delay:
   314                           	opt callstack 0
   315                           
   316                           ; 8 bytes @ 0x24
   317  000025                     	ds	8
   318  00002D                     add_tasks@temp_next:
   319                           	opt callstack 0
   320                           
   321                           ; 2 bytes @ 0x2C
   322  00002D                     	ds	2
   323  00002F                     ?_timer_ISR:
   324                           	opt callstack 0
   325                           
   326                           ; 2 bytes @ 0x2E
   327  00002F                     	ds	2
   328  000031                     ??_timer_ISR:
   329                           
   330                           ; 1 bytes @ 0x30
   331  000031                     	ds	8
   332  000039                     timer_ISR@temp:
   333                           	opt callstack 0
   334                           
   335                           ; 2 bytes @ 0x38
   336  000039                     	ds	2
   337  00003B                     timer_ISR@i:
   338                           	opt callstack 0
   339                           
   340                           ; 2 bytes @ 0x3A
   341  00003B                     	ds	2
   342  00003D                     ??_main_interrupt:
   343                           
   344                           ; 1 bytes @ 0x3C
   345  00003D                     	ds	6
   346                           
   347 ;;
   348 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   349 ;;
   350 ;; *************** function _main *****************
   351 ;; Defined at:
   352 ;;		line 33 in file "main.c"
   353 ;; Parameters:    Size  Location     Type
   354 ;;		None
   355 ;; Auto vars:     Size  Location     Type
   356 ;;		None
   357 ;; Return value:  Size  Location     Type
   358 ;;                  1    wreg      void 
   359 ;; Registers used:
   360 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
   361 ;; Tracked objects:
   362 ;;		On entry : 0/0
   363 ;;		On exit  : 0/0
   364 ;;		Unchanged: 0/0
   365 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   366 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   367 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   368 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   369 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   370 ;;Total ram usage:        0 bytes
   371 ;; Hardware stack levels required when called:    7
   372 ;; This function calls:
   373 ;;		_dispatch
   374 ;;		_initial_register
   375 ;;		_start_timer
   376 ;; This function is called by:
   377 ;;		Startup code after reset
   378 ;; This function uses a non-reentrant model
   379 ;;
   380                           
   381                           	psect	text0
   382  0017D8                     __ptext0:
   383                           	opt callstack 0
   384  0017D8                     _main:
   385                           	opt callstack 24
   386  0017D8                     
   387                           ;main.c: 34:     OSCCON = 0b01110000;
   388  0017D8  0E70               	movlw	112
   389  0017DA  6ED3               	movwf	211,c	;volatile
   390                           
   391                           ;main.c: 35:     TRISD = 0x00;
   392  0017DC  0E00               	movlw	0
   393  0017DE  6E95               	movwf	149,c	;volatile
   394                           
   395                           ;main.c: 36:     LATD = 0x00;
   396  0017E0  0E00               	movlw	0
   397  0017E2  6E8C               	movwf	140,c	;volatile
   398  0017E4                     
   399                           ;main.c: 37:     initial_register();
   400  0017E4  EC27  F008         	call	_initial_register	;wreg free
   401  0017E8                     
   402                           ;main.c: 38:     start_timer(TIMER_TMR0);
   403  0017E8  0E00               	movlw	0
   404  0017EA  0100               	movlb	0	; () banked
   405  0017EC  6F61               	movwf	(start_timer@type+1)& (0+255),b
   406  0017EE  0E00               	movlw	0
   407  0017F0  6F60               	movwf	start_timer@type& (0+255),b
   408  0017F2  EC61  F00B         	call	_start_timer	;wreg free
   409  0017F6                     l1555:
   410                           
   411                           ;main.c: 40:         dispatch();
   412  0017F6  EC0F  F00A         	call	_dispatch	;wreg free
   413  0017FA  EFFB  F00B         	goto	l1555
   414  0017FE  EF07  F000         	goto	start
   415  001802                     __end_of_main:
   416                           	opt callstack 0
   417                           
   418 ;; *************** function _start_timer *****************
   419 ;; Defined at:
   420 ;;		line 15 in file "driver.c"
   421 ;; Parameters:    Size  Location     Type
   422 ;;  type            2    0[BANK0 ] int 
   423 ;; Auto vars:     Size  Location     Type
   424 ;;  time_vaddr      1    4[BANK0 ] enum E4615
   425 ;; Return value:  Size  Location     Type
   426 ;;                  1    wreg      void 
   427 ;; Registers used:
   428 ;;		wreg, status,2, status,0
   429 ;; Tracked objects:
   430 ;;		On entry : 0/0
   431 ;;		On exit  : 0/0
   432 ;;		Unchanged: 0/0
   433 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   434 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   435 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   436 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   437 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   438 ;;Total ram usage:        5 bytes
   439 ;; Hardware stack levels used:    1
   440 ;; Hardware stack levels required when called:    4
   441 ;; This function calls:
   442 ;;		Nothing
   443 ;; This function is called by:
   444 ;;		_main
   445 ;; This function uses a non-reentrant model
   446 ;;
   447                           
   448                           	psect	text1
   449  0016C2                     __ptext1:
   450                           	opt callstack 0
   451  0016C2                     _start_timer:
   452                           	opt callstack 26
   453  0016C2                     
   454                           ;driver.c: 17:     enum Timer_type time_vaddr = type;
   455  0016C2  C060  F064         	movff	start_timer@type,start_timer@time_vaddr
   456                           
   457                           ;driver.c: 18:     switch(time_vaddr){
   458  0016C6  EF7A  F00B         	goto	l1511
   459  0016CA                     l1491:
   460                           
   461                           ; BSR set to: 0
   462                           ;driver.c: 20:             T0CON = 0b11000101;
   463  0016CA  0EC5               	movlw	197
   464  0016CC  6ED5               	movwf	213,c	;volatile
   465  0016CE                     
   466                           ; BSR set to: 0
   467                           ;driver.c: 21:             INTCONbits.TMR0IE = 1;
   468  0016CE  8AF2               	bsf	242,5,c	;volatile
   469  0016D0                     
   470                           ; BSR set to: 0
   471                           ;driver.c: 22:             INTCONbits.TMR0IF = 0;
   472  0016D0  94F2               	bcf	242,2,c	;volatile
   473  0016D2                     
   474                           ; BSR set to: 0
   475                           ;driver.c: 23:             INTCONbits.GIE = 1;
   476  0016D2  8EF2               	bsf	242,7,c	;volatile
   477                           
   478                           ;driver.c: 24:             TMR0L = 0xFFFF - 31*1;
   479  0016D4  0EE0               	movlw	224
   480  0016D6  6ED6               	movwf	214,c	;volatile
   481  0016D8                     
   482                           ; BSR set to: 0
   483                           ;driver.c: 25:             TMR0H = (0xFFFF - 31*1)>>8;
   484  0016D8  68D7               	setf	215,c	;volatile
   485                           
   486                           ;driver.c: 26:             break;
   487  0016DA  EF9C  F00B         	goto	l1513
   488  0016DE                     l1501:
   489                           
   490                           ; BSR set to: 0
   491                           ;driver.c: 28:             T1CON = 0x0F;
   492  0016DE  0E0F               	movlw	15
   493  0016E0  6ECD               	movwf	205,c	;volatile
   494                           
   495                           ;driver.c: 29:             TMR1H = 0x80;
   496  0016E2  0E80               	movlw	128
   497  0016E4  6ECF               	movwf	207,c	;volatile
   498                           
   499                           ;driver.c: 30:             TMR1L = 0x00;
   500  0016E6  0E00               	movlw	0
   501  0016E8  6ECE               	movwf	206,c	;volatile
   502  0016EA                     
   503                           ; BSR set to: 0
   504                           ;driver.c: 31:             PIR1bits.TMR1IF = 0;
   505  0016EA  909E               	bcf	158,0,c	;volatile
   506  0016EC                     
   507                           ; BSR set to: 0
   508                           ;driver.c: 32:             PIE1bits.TMR1IE = 1;
   509  0016EC  809D               	bsf	157,0,c	;volatile
   510  0016EE                     
   511                           ; BSR set to: 0
   512                           ;driver.c: 33:             T1CONbits.TMR1ON = 1;
   513  0016EE  80CD               	bsf	205,0,c	;volatile
   514                           
   515                           ;driver.c: 34:             break;
   516  0016F0  EF9C  F00B         	goto	l1513
   517  0016F4                     l1511:
   518  0016F4  0100               	movlb	0	; () banked
   519  0016F6  5164               	movf	start_timer@time_vaddr& (0+255),w,b
   520  0016F8  6F62               	movwf	??_start_timer& (0+255),b
   521  0016FA  6B63               	clrf	(??_start_timer+1)& (0+255),b
   522                           
   523                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   524                           ; Switch size 1, requested type "simple"
   525                           ; Number of cases is 1, Range of values is 0 to 0
   526                           ; switch strategies available:
   527                           ; Name         Instructions Cycles
   528                           ; simple_byte            4     3 (average)
   529                           ;	Chosen strategy is simple_byte
   530  0016FC  5163               	movf	(??_start_timer+1)& (0+255),w,b
   531  0016FE  0A00               	xorlw	0	; case 0
   532  001700  B4D8               	btfsc	status,2,c
   533  001702  EF85  F00B         	goto	l1673
   534  001706  EF9C  F00B         	goto	l1513
   535  00170A                     l1673:
   536                           
   537                           ; BSR set to: 0
   538                           ; Switch size 1, requested type "simple"
   539                           ; Number of cases is 5, Range of values is 0 to 4
   540                           ; switch strategies available:
   541                           ; Name         Instructions Cycles
   542                           ; simple_byte           16     9 (average)
   543                           ;	Chosen strategy is simple_byte
   544  00170A  5162               	movf	??_start_timer& (0+255),w,b
   545  00170C  0A00               	xorlw	0	; case 0
   546  00170E  B4D8               	btfsc	status,2,c
   547  001710  EF65  F00B         	goto	l1491
   548  001714  0A01               	xorlw	1	; case 1
   549  001716  B4D8               	btfsc	status,2,c
   550  001718  EF6F  F00B         	goto	l1501
   551  00171C  0A03               	xorlw	3	; case 2
   552  00171E  B4D8               	btfsc	status,2,c
   553  001720  EF9C  F00B         	goto	l1513
   554  001724  0A01               	xorlw	1	; case 3
   555  001726  B4D8               	btfsc	status,2,c
   556  001728  EF9C  F00B         	goto	l1513
   557  00172C  0A07               	xorlw	7	; case 4
   558  00172E  B4D8               	btfsc	status,2,c
   559  001730  EF9C  F00B         	goto	l1513
   560  001734  EF9C  F00B         	goto	l1513
   561  001738                     l1513:
   562                           
   563                           ; BSR set to: 0
   564                           ;driver.c: 42:     ALLOW_TIMER_REGISTER = 1;
   565  001738  0E01               	movlw	1
   566  00173A  6E51               	movwf	_ALLOW_TIMER_REGISTER^0,c
   567  00173C                     
   568                           ; BSR set to: 0
   569  00173C  0012               	return		;funcret
   570  00173E                     __end_of_start_timer:
   571                           	opt callstack 0
   572                           
   573 ;; *************** function _initial_register *****************
   574 ;; Defined at:
   575 ;;		line 59 in file "register.c"
   576 ;; Parameters:    Size  Location     Type
   577 ;;		None
   578 ;; Auto vars:     Size  Location     Type
   579 ;;  temp            4   67[BANK0 ] unsigned long 
   580 ;; Return value:  Size  Location     Type
   581 ;;                  1    wreg      void 
   582 ;; Registers used:
   583 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   584 ;; Tracked objects:
   585 ;;		On entry : 0/0
   586 ;;		On exit  : 0/0
   587 ;;		Unchanged: 0/0
   588 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   589 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   590 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   591 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   592 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   593 ;;Total ram usage:        4 bytes
   594 ;; Hardware stack levels used:    1
   595 ;; Hardware stack levels required when called:    6
   596 ;; This function calls:
   597 ;;		_register_timer
   598 ;; This function is called by:
   599 ;;		_main
   600 ;; This function uses a non-reentrant model
   601 ;;
   602                           
   603                           	psect	text2
   604  00104E                     __ptext2:
   605                           	opt callstack 0
   606  00104E                     _initial_register:
   607                           	opt callstack 24
   608  00104E                     
   609                           ;register.c: 60:     uint32_t temp = register_timer(1000,1000,blink_LED_1,0);
   610  00104E  0EE8               	movlw	232
   611  001050  0100               	movlb	0	; () banked
   612  001052  6F66               	movwf	register_timer@delay& (0+255),b
   613  001054  0E03               	movlw	3
   614  001056  6F67               	movwf	(register_timer@delay+1)& (0+255),b
   615  001058  0E00               	movlw	0
   616  00105A  6F68               	movwf	(register_timer@delay+2)& (0+255),b
   617  00105C  0E00               	movlw	0
   618  00105E  6F69               	movwf	(register_timer@delay+3)& (0+255),b
   619  001060  0E00               	movlw	0
   620  001062  6F6A               	movwf	(register_timer@delay+4)& (0+255),b
   621  001064  0E00               	movlw	0
   622  001066  6F6B               	movwf	(register_timer@delay+5)& (0+255),b
   623  001068  0E00               	movlw	0
   624  00106A  6F6C               	movwf	(register_timer@delay+6)& (0+255),b
   625  00106C  0E00               	movlw	0
   626  00106E  6F6D               	movwf	(register_timer@delay+7)& (0+255),b
   627  001070  0EE8               	movlw	232
   628  001072  6F6E               	movwf	register_timer@period& (0+255),b
   629  001074  0E03               	movlw	3
   630  001076  6F6F               	movwf	(register_timer@period+1)& (0+255),b
   631  001078  0E00               	movlw	0
   632  00107A  6F70               	movwf	(register_timer@period+2)& (0+255),b
   633  00107C  0E00               	movlw	0
   634  00107E  6F71               	movwf	(register_timer@period+3)& (0+255),b
   635  001080  0E00               	movlw	0
   636  001082  6F72               	movwf	(register_timer@period+4)& (0+255),b
   637  001084  0E00               	movlw	0
   638  001086  6F73               	movwf	(register_timer@period+5)& (0+255),b
   639  001088  0E00               	movlw	0
   640  00108A  6F74               	movwf	(register_timer@period+6)& (0+255),b
   641  00108C  0E00               	movlw	0
   642  00108E  6F75               	movwf	(register_timer@period+7)& (0+255),b
   643  001090  0E44               	movlw	low _blink_LED_1
   644  001092  6F76               	movwf	register_timer@callback& (0+255),b
   645  001094  0E16               	movlw	high _blink_LED_1
   646  001096  6F77               	movwf	(register_timer@callback+1)& (0+255),b
   647  001098  0E00               	movlw	low (_blink_LED_1 shr (0+16))
   648  00109A  6F78               	movwf	(register_timer@callback+2)& (0+255),b
   649  00109C  0E00               	movlw	0
   650  00109E  6F79               	movwf	register_timer@data& (0+255),b
   651  0010A0  0E00               	movlw	0
   652  0010A2  6F7A               	movwf	(register_timer@data+1)& (0+255),b
   653  0010A4  EC09  F000         	call	_register_timer	;wreg free
   654  0010A8  C066  F0A3         	movff	?_register_timer,initial_register@temp
   655  0010AC  C067  F0A4         	movff	?_register_timer+1,initial_register@temp+1
   656  0010B0  C068  F0A5         	movff	?_register_timer+2,initial_register@temp+2
   657  0010B4  C069  F0A6         	movff	?_register_timer+3,initial_register@temp+3
   658                           
   659                           ;register.c: 61:     temp = register_timer(20,20,blink_LED_1,1);
   660  0010B8  0E14               	movlw	20
   661  0010BA  0100               	movlb	0	; () banked
   662  0010BC  6F66               	movwf	register_timer@delay& (0+255),b
   663  0010BE  0E00               	movlw	0
   664  0010C0  6F67               	movwf	(register_timer@delay+1)& (0+255),b
   665  0010C2  0E00               	movlw	0
   666  0010C4  6F68               	movwf	(register_timer@delay+2)& (0+255),b
   667  0010C6  0E00               	movlw	0
   668  0010C8  6F69               	movwf	(register_timer@delay+3)& (0+255),b
   669  0010CA  0E00               	movlw	0
   670  0010CC  6F6A               	movwf	(register_timer@delay+4)& (0+255),b
   671  0010CE  0E00               	movlw	0
   672  0010D0  6F6B               	movwf	(register_timer@delay+5)& (0+255),b
   673  0010D2  0E00               	movlw	0
   674  0010D4  6F6C               	movwf	(register_timer@delay+6)& (0+255),b
   675  0010D6  0E00               	movlw	0
   676  0010D8  6F6D               	movwf	(register_timer@delay+7)& (0+255),b
   677  0010DA  0E14               	movlw	20
   678  0010DC  6F6E               	movwf	register_timer@period& (0+255),b
   679  0010DE  0E00               	movlw	0
   680  0010E0  6F6F               	movwf	(register_timer@period+1)& (0+255),b
   681  0010E2  0E00               	movlw	0
   682  0010E4  6F70               	movwf	(register_timer@period+2)& (0+255),b
   683  0010E6  0E00               	movlw	0
   684  0010E8  6F71               	movwf	(register_timer@period+3)& (0+255),b
   685  0010EA  0E00               	movlw	0
   686  0010EC  6F72               	movwf	(register_timer@period+4)& (0+255),b
   687  0010EE  0E00               	movlw	0
   688  0010F0  6F73               	movwf	(register_timer@period+5)& (0+255),b
   689  0010F2  0E00               	movlw	0
   690  0010F4  6F74               	movwf	(register_timer@period+6)& (0+255),b
   691  0010F6  0E00               	movlw	0
   692  0010F8  6F75               	movwf	(register_timer@period+7)& (0+255),b
   693  0010FA  0E44               	movlw	low _blink_LED_1
   694  0010FC  6F76               	movwf	register_timer@callback& (0+255),b
   695  0010FE  0E16               	movlw	high _blink_LED_1
   696  001100  6F77               	movwf	(register_timer@callback+1)& (0+255),b
   697  001102  0E00               	movlw	low (_blink_LED_1 shr (0+16))
   698  001104  6F78               	movwf	(register_timer@callback+2)& (0+255),b
   699  001106  0E01               	movlw	1
   700  001108  6F79               	movwf	register_timer@data& (0+255),b
   701  00110A  0E00               	movlw	0
   702  00110C  6F7A               	movwf	(register_timer@data+1)& (0+255),b
   703  00110E  EC09  F000         	call	_register_timer	;wreg free
   704  001112  C066  F0A3         	movff	?_register_timer,initial_register@temp
   705  001116  C067  F0A4         	movff	?_register_timer+1,initial_register@temp+1
   706  00111A  C068  F0A5         	movff	?_register_timer+2,initial_register@temp+2
   707  00111E  C069  F0A6         	movff	?_register_timer+3,initial_register@temp+3
   708                           
   709                           ;register.c: 62:     temp = register_timer(120,120,blink_LED_2,2);
   710  001122  0E78               	movlw	120
   711  001124  0100               	movlb	0	; () banked
   712  001126  6F66               	movwf	register_timer@delay& (0+255),b
   713  001128  0E00               	movlw	0
   714  00112A  6F67               	movwf	(register_timer@delay+1)& (0+255),b
   715  00112C  0E00               	movlw	0
   716  00112E  6F68               	movwf	(register_timer@delay+2)& (0+255),b
   717  001130  0E00               	movlw	0
   718  001132  6F69               	movwf	(register_timer@delay+3)& (0+255),b
   719  001134  0E00               	movlw	0
   720  001136  6F6A               	movwf	(register_timer@delay+4)& (0+255),b
   721  001138  0E00               	movlw	0
   722  00113A  6F6B               	movwf	(register_timer@delay+5)& (0+255),b
   723  00113C  0E00               	movlw	0
   724  00113E  6F6C               	movwf	(register_timer@delay+6)& (0+255),b
   725  001140  0E00               	movlw	0
   726  001142  6F6D               	movwf	(register_timer@delay+7)& (0+255),b
   727  001144  0E78               	movlw	120
   728  001146  6F6E               	movwf	register_timer@period& (0+255),b
   729  001148  0E00               	movlw	0
   730  00114A  6F6F               	movwf	(register_timer@period+1)& (0+255),b
   731  00114C  0E00               	movlw	0
   732  00114E  6F70               	movwf	(register_timer@period+2)& (0+255),b
   733  001150  0E00               	movlw	0
   734  001152  6F71               	movwf	(register_timer@period+3)& (0+255),b
   735  001154  0E00               	movlw	0
   736  001156  6F72               	movwf	(register_timer@period+4)& (0+255),b
   737  001158  0E00               	movlw	0
   738  00115A  6F73               	movwf	(register_timer@period+5)& (0+255),b
   739  00115C  0E00               	movlw	0
   740  00115E  6F74               	movwf	(register_timer@period+6)& (0+255),b
   741  001160  0E00               	movlw	0
   742  001162  6F75               	movwf	(register_timer@period+7)& (0+255),b
   743  001164  0E38               	movlw	low _blink_LED_2
   744  001166  6F76               	movwf	register_timer@callback& (0+255),b
   745  001168  0E15               	movlw	high _blink_LED_2
   746  00116A  6F77               	movwf	(register_timer@callback+1)& (0+255),b
   747  00116C  0E00               	movlw	low (_blink_LED_2 shr (0+16))
   748  00116E  6F78               	movwf	(register_timer@callback+2)& (0+255),b
   749  001170  0E02               	movlw	2
   750  001172  6F79               	movwf	register_timer@data& (0+255),b
   751  001174  0E00               	movlw	0
   752  001176  6F7A               	movwf	(register_timer@data+1)& (0+255),b
   753  001178  EC09  F000         	call	_register_timer	;wreg free
   754  00117C  C066  F0A3         	movff	?_register_timer,initial_register@temp
   755  001180  C067  F0A4         	movff	?_register_timer+1,initial_register@temp+1
   756  001184  C068  F0A5         	movff	?_register_timer+2,initial_register@temp+2
   757  001188  C069  F0A6         	movff	?_register_timer+3,initial_register@temp+3
   758                           
   759                           ;register.c: 63:     temp = register_timer(120,120,blink_LED_2,3);
   760  00118C  0E78               	movlw	120
   761  00118E  0100               	movlb	0	; () banked
   762  001190  6F66               	movwf	register_timer@delay& (0+255),b
   763  001192  0E00               	movlw	0
   764  001194  6F67               	movwf	(register_timer@delay+1)& (0+255),b
   765  001196  0E00               	movlw	0
   766  001198  6F68               	movwf	(register_timer@delay+2)& (0+255),b
   767  00119A  0E00               	movlw	0
   768  00119C  6F69               	movwf	(register_timer@delay+3)& (0+255),b
   769  00119E  0E00               	movlw	0
   770  0011A0  6F6A               	movwf	(register_timer@delay+4)& (0+255),b
   771  0011A2  0E00               	movlw	0
   772  0011A4  6F6B               	movwf	(register_timer@delay+5)& (0+255),b
   773  0011A6  0E00               	movlw	0
   774  0011A8  6F6C               	movwf	(register_timer@delay+6)& (0+255),b
   775  0011AA  0E00               	movlw	0
   776  0011AC  6F6D               	movwf	(register_timer@delay+7)& (0+255),b
   777  0011AE  0E78               	movlw	120
   778  0011B0  6F6E               	movwf	register_timer@period& (0+255),b
   779  0011B2  0E00               	movlw	0
   780  0011B4  6F6F               	movwf	(register_timer@period+1)& (0+255),b
   781  0011B6  0E00               	movlw	0
   782  0011B8  6F70               	movwf	(register_timer@period+2)& (0+255),b
   783  0011BA  0E00               	movlw	0
   784  0011BC  6F71               	movwf	(register_timer@period+3)& (0+255),b
   785  0011BE  0E00               	movlw	0
   786  0011C0  6F72               	movwf	(register_timer@period+4)& (0+255),b
   787  0011C2  0E00               	movlw	0
   788  0011C4  6F73               	movwf	(register_timer@period+5)& (0+255),b
   789  0011C6  0E00               	movlw	0
   790  0011C8  6F74               	movwf	(register_timer@period+6)& (0+255),b
   791  0011CA  0E00               	movlw	0
   792  0011CC  6F75               	movwf	(register_timer@period+7)& (0+255),b
   793  0011CE  0E38               	movlw	low _blink_LED_2
   794  0011D0  6F76               	movwf	register_timer@callback& (0+255),b
   795  0011D2  0E15               	movlw	high _blink_LED_2
   796  0011D4  6F77               	movwf	(register_timer@callback+1)& (0+255),b
   797  0011D6  0E00               	movlw	low (_blink_LED_2 shr (0+16))
   798  0011D8  6F78               	movwf	(register_timer@callback+2)& (0+255),b
   799  0011DA  0E03               	movlw	3
   800  0011DC  6F79               	movwf	register_timer@data& (0+255),b
   801  0011DE  0E00               	movlw	0
   802  0011E0  6F7A               	movwf	(register_timer@data+1)& (0+255),b
   803  0011E2  EC09  F000         	call	_register_timer	;wreg free
   804  0011E6  C066  F0A3         	movff	?_register_timer,initial_register@temp
   805  0011EA  C067  F0A4         	movff	?_register_timer+1,initial_register@temp+1
   806  0011EE  C068  F0A5         	movff	?_register_timer+2,initial_register@temp+2
   807  0011F2  C069  F0A6         	movff	?_register_timer+3,initial_register@temp+3
   808                           
   809                           ;register.c: 64:     temp = register_timer(300,300,blink_LED_3,4);
   810  0011F6  0E2C               	movlw	44
   811  0011F8  0100               	movlb	0	; () banked
   812  0011FA  6F66               	movwf	register_timer@delay& (0+255),b
   813  0011FC  0E01               	movlw	1
   814  0011FE  6F67               	movwf	(register_timer@delay+1)& (0+255),b
   815  001200  0E00               	movlw	0
   816  001202  6F68               	movwf	(register_timer@delay+2)& (0+255),b
   817  001204  0E00               	movlw	0
   818  001206  6F69               	movwf	(register_timer@delay+3)& (0+255),b
   819  001208  0E00               	movlw	0
   820  00120A  6F6A               	movwf	(register_timer@delay+4)& (0+255),b
   821  00120C  0E00               	movlw	0
   822  00120E  6F6B               	movwf	(register_timer@delay+5)& (0+255),b
   823  001210  0E00               	movlw	0
   824  001212  6F6C               	movwf	(register_timer@delay+6)& (0+255),b
   825  001214  0E00               	movlw	0
   826  001216  6F6D               	movwf	(register_timer@delay+7)& (0+255),b
   827  001218  0E2C               	movlw	44
   828  00121A  6F6E               	movwf	register_timer@period& (0+255),b
   829  00121C  0E01               	movlw	1
   830  00121E  6F6F               	movwf	(register_timer@period+1)& (0+255),b
   831  001220  0E00               	movlw	0
   832  001222  6F70               	movwf	(register_timer@period+2)& (0+255),b
   833  001224  0E00               	movlw	0
   834  001226  6F71               	movwf	(register_timer@period+3)& (0+255),b
   835  001228  0E00               	movlw	0
   836  00122A  6F72               	movwf	(register_timer@period+4)& (0+255),b
   837  00122C  0E00               	movlw	0
   838  00122E  6F73               	movwf	(register_timer@period+5)& (0+255),b
   839  001230  0E00               	movlw	0
   840  001232  6F74               	movwf	(register_timer@period+6)& (0+255),b
   841  001234  0E00               	movlw	0
   842  001236  6F75               	movwf	(register_timer@period+7)& (0+255),b
   843  001238  0EBE               	movlw	low _blink_LED_3
   844  00123A  6F76               	movwf	register_timer@callback& (0+255),b
   845  00123C  0E15               	movlw	high _blink_LED_3
   846  00123E  6F77               	movwf	(register_timer@callback+1)& (0+255),b
   847  001240  0E00               	movlw	low (_blink_LED_3 shr (0+16))
   848  001242  6F78               	movwf	(register_timer@callback+2)& (0+255),b
   849  001244  0E04               	movlw	4
   850  001246  6F79               	movwf	register_timer@data& (0+255),b
   851  001248  0E00               	movlw	0
   852  00124A  6F7A               	movwf	(register_timer@data+1)& (0+255),b
   853  00124C  EC09  F000         	call	_register_timer	;wreg free
   854  001250  C066  F0A3         	movff	?_register_timer,initial_register@temp
   855  001254  C067  F0A4         	movff	?_register_timer+1,initial_register@temp+1
   856  001258  C068  F0A5         	movff	?_register_timer+2,initial_register@temp+2
   857  00125C  C069  F0A6         	movff	?_register_timer+3,initial_register@temp+3
   858                           
   859                           ;register.c: 65:     temp = register_timer(300,300,blink_LED_3,5);
   860  001260  0E2C               	movlw	44
   861  001262  0100               	movlb	0	; () banked
   862  001264  6F66               	movwf	register_timer@delay& (0+255),b
   863  001266  0E01               	movlw	1
   864  001268  6F67               	movwf	(register_timer@delay+1)& (0+255),b
   865  00126A  0E00               	movlw	0
   866  00126C  6F68               	movwf	(register_timer@delay+2)& (0+255),b
   867  00126E  0E00               	movlw	0
   868  001270  6F69               	movwf	(register_timer@delay+3)& (0+255),b
   869  001272  0E00               	movlw	0
   870  001274  6F6A               	movwf	(register_timer@delay+4)& (0+255),b
   871  001276  0E00               	movlw	0
   872  001278  6F6B               	movwf	(register_timer@delay+5)& (0+255),b
   873  00127A  0E00               	movlw	0
   874  00127C  6F6C               	movwf	(register_timer@delay+6)& (0+255),b
   875  00127E  0E00               	movlw	0
   876  001280  6F6D               	movwf	(register_timer@delay+7)& (0+255),b
   877  001282  0E2C               	movlw	44
   878  001284  6F6E               	movwf	register_timer@period& (0+255),b
   879  001286  0E01               	movlw	1
   880  001288  6F6F               	movwf	(register_timer@period+1)& (0+255),b
   881  00128A  0E00               	movlw	0
   882  00128C  6F70               	movwf	(register_timer@period+2)& (0+255),b
   883  00128E  0E00               	movlw	0
   884  001290  6F71               	movwf	(register_timer@period+3)& (0+255),b
   885  001292  0E00               	movlw	0
   886  001294  6F72               	movwf	(register_timer@period+4)& (0+255),b
   887  001296  0E00               	movlw	0
   888  001298  6F73               	movwf	(register_timer@period+5)& (0+255),b
   889  00129A  0E00               	movlw	0
   890  00129C  6F74               	movwf	(register_timer@period+6)& (0+255),b
   891  00129E  0E00               	movlw	0
   892  0012A0  6F75               	movwf	(register_timer@period+7)& (0+255),b
   893  0012A2  0EBE               	movlw	low _blink_LED_3
   894  0012A4  6F76               	movwf	register_timer@callback& (0+255),b
   895  0012A6  0E15               	movlw	high _blink_LED_3
   896  0012A8  6F77               	movwf	(register_timer@callback+1)& (0+255),b
   897  0012AA  0E00               	movlw	low (_blink_LED_3 shr (0+16))
   898  0012AC  6F78               	movwf	(register_timer@callback+2)& (0+255),b
   899  0012AE  0E05               	movlw	5
   900  0012B0  6F79               	movwf	register_timer@data& (0+255),b
   901  0012B2  0E00               	movlw	0
   902  0012B4  6F7A               	movwf	(register_timer@data+1)& (0+255),b
   903  0012B6  EC09  F000         	call	_register_timer	;wreg free
   904  0012BA  C066  F0A3         	movff	?_register_timer,initial_register@temp
   905  0012BE  C067  F0A4         	movff	?_register_timer+1,initial_register@temp+1
   906  0012C2  C068  F0A5         	movff	?_register_timer+2,initial_register@temp+2
   907  0012C6  C069  F0A6         	movff	?_register_timer+3,initial_register@temp+3
   908  0012CA  0012               	return		;funcret
   909  0012CC                     __end_of_initial_register:
   910                           	opt callstack 0
   911                           
   912 ;; *************** function _register_timer *****************
   913 ;; Defined at:
   914 ;;		line 50 in file "driver.c"
   915 ;; Parameters:    Size  Location     Type
   916 ;;  delay           8    6[BANK0 ] unsigned long long 
   917 ;;  period          8   14[BANK0 ] unsigned long long 
   918 ;;  callback        3   22[BANK0 ] PTR FTN()void 
   919 ;;		 -> blink_LED_3(1), blink_LED_2(1), blink_LED_1(1), 
   920 ;;  data            2   25[BANK0 ] PTR void 
   921 ;;		 -> RAM(3935), NULL(0), 
   922 ;; Auto vars:     Size  Location     Type
   923 ;;  temp_delay      8   57[BANK0 ] unsigned long long 
   924 ;;  temp_index      2   65[BANK0 ] int 
   925 ;;  i               2   53[BANK0 ] int 
   926 ;;  temp            2    0        unsigned int 
   927 ;; Return value:  Size  Location     Type
   928 ;;                  4    6[BANK0 ] unsigned long 
   929 ;; Registers used:
   930 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   931 ;; Tracked objects:
   932 ;;		On entry : 0/0
   933 ;;		On exit  : 0/0
   934 ;;		Unchanged: 0/0
   935 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   936 ;;      Params:         0      21       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   937 ;;      Locals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   938 ;;      Temps:          0      24       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   939 ;;      Totals:         0      61       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   940 ;;Total ram usage:       61 bytes
   941 ;; Hardware stack levels used:    1
   942 ;; Hardware stack levels required when called:    5
   943 ;; This function calls:
   944 ;;		___wmul
   945 ;; This function is called by:
   946 ;;		_initial_register
   947 ;; This function uses a non-reentrant model
   948 ;;
   949                           
   950                           	psect	text3
   951  000012                     __ptext3:
   952                           	opt callstack 0
   953  000012                     _register_timer:
   954                           	opt callstack 24
   955  000012                     
   956                           ;driver.c: 51:     if (NUMBER_EXIST_TASKS >= 10 ) return 0;
   957  000012  0100               	movlb	0	; () banked
   958  000014  BFBE               	btfsc	(_NUMBER_EXIST_TASKS+1)& (0+255),7,b
   959  000016  EF16  F000         	goto	u401
   960  00001A  51BE               	movf	(_NUMBER_EXIST_TASKS+1)& (0+255),w,b
   961  00001C  E109               	bnz	u400
   962  00001E  0E0A               	movlw	10
   963  000020  5DBD               	subwf	_NUMBER_EXIST_TASKS& (0+255),w,b
   964  000022  A0D8               	btfss	status,0,c
   965  000024  EF16  F000         	goto	u401
   966  000028  EF18  F000         	goto	u400
   967  00002C                     u401:
   968  00002C  EF22  F000         	goto	l1367
   969  000030                     u400:
   970  000030                     
   971                           ; BSR set to: 0
   972  000030  0E00               	movlw	0
   973  000032  6F66               	movwf	?_register_timer& (0+255),b
   974  000034  0E00               	movlw	0
   975  000036  6F67               	movwf	(?_register_timer+1)& (0+255),b
   976  000038  0E00               	movlw	0
   977  00003A  6F68               	movwf	(?_register_timer+2)& (0+255),b
   978  00003C  0E00               	movlw	0
   979  00003E  6F69               	movwf	(?_register_timer+3)& (0+255),b
   980  000040  EF45  F004         	goto	l196
   981  000044                     l1367:
   982                           
   983                           ; BSR set to: 0
   984                           ;driver.c: 52:     NUMBER_EXIST_TASKS ++;
   985  000044  4BBD               	infsnz	_NUMBER_EXIST_TASKS& (0+255),f,b
   986  000046  2BBE               	incf	(_NUMBER_EXIST_TASKS+1)& (0+255),f,b
   987  000048                     
   988                           ; BSR set to: 0
   989                           ;driver.c: 53:     int i =0;
   990  000048  0E00               	movlw	0
   991  00004A  6F96               	movwf	(register_timer@i+1)& (0+255),b
   992  00004C  0E00               	movlw	0
   993  00004E  6F95               	movwf	register_timer@i& (0+255),b
   994  000050                     l1371:
   995                           
   996                           ; BSR set to: 0
   997                           ;driver.c: 55:         if (tasks[i].period == 0) {
   998  000050  C095  F060         	movff	register_timer@i,___wmul@multiplier
   999  000054  C096  F061         	movff	register_timer@i+1,___wmul@multiplier+1
  1000  000058  0E00               	movlw	0
  1001  00005A  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  1002  00005C  0E17               	movlw	23
  1003  00005E  6F62               	movwf	___wmul@multiplicand& (0+255),b
  1004  000060  EC01  F00C         	call	___wmul	;wreg free
  1005  000064  0E0B               	movlw	low (_tasks+11)
  1006  000066  0100               	movlb	0	; () banked
  1007  000068  2560               	addwf	?___wmul& (0+255),w,b
  1008  00006A  6ED9               	movwf	fsr2l,c
  1009  00006C  0E01               	movlw	high (_tasks+11)
  1010  00006E  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  1011  000070  6EDA               	movwf	fsr2h,c
  1012  000072  50DE               	movf	postinc2,w,c
  1013  000074  10DE               	iorwf	postinc2,w,c
  1014  000076  10DE               	iorwf	postinc2,w,c
  1015  000078  10DE               	iorwf	postinc2,w,c
  1016  00007A  10DE               	iorwf	postinc2,w,c
  1017  00007C  10DE               	iorwf	postinc2,w,c
  1018  00007E  10DE               	iorwf	postinc2,w,c
  1019  000080  10DE               	iorwf	postinc2,w,c
  1020  000082  A4D8               	btfss	status,2,c
  1021  000084  EF46  F000         	goto	u411
  1022  000088  EF48  F000         	goto	u410
  1023  00008C                     u411:
  1024  00008C  EF4E  F000         	goto	l1375
  1025  000090                     u410:
  1026  000090                     
  1027                           ; BSR set to: 0
  1028                           ;driver.c: 56:             NUMBER_EXIST = i;
  1029  000090  C095  F0BF         	movff	register_timer@i,_NUMBER_EXIST
  1030  000094  C096  F0C0         	movff	register_timer@i+1,_NUMBER_EXIST+1
  1031                           
  1032                           ;driver.c: 57:             break;
  1033  000098  EF52  F000         	goto	l1377
  1034  00009C                     l1375:
  1035                           
  1036                           ; BSR set to: 0
  1037                           ;driver.c: 59:         i++;
  1038  00009C  4B95               	infsnz	register_timer@i& (0+255),f,b
  1039  00009E  2B96               	incf	(register_timer@i+1)& (0+255),f,b
  1040  0000A0  EF28  F000         	goto	l1371
  1041  0000A4                     l1377:
  1042                           
  1043                           ; BSR set to: 0
  1044                           ;driver.c: 61:     tasks[NUMBER_EXIST].callback = callback;
  1045  0000A4  C0BF  F060         	movff	_NUMBER_EXIST,___wmul@multiplier
  1046  0000A8  C0C0  F061         	movff	_NUMBER_EXIST+1,___wmul@multiplier+1
  1047  0000AC  0E00               	movlw	0
  1048  0000AE  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  1049  0000B0  0E17               	movlw	23
  1050  0000B2  6F62               	movwf	___wmul@multiplicand& (0+255),b
  1051  0000B4  EC01  F00C         	call	___wmul	;wreg free
  1052  0000B8  0E00               	movlw	low _tasks
  1053  0000BA  0100               	movlb	0	; () banked
  1054  0000BC  2560               	addwf	?___wmul& (0+255),w,b
  1055  0000BE  6ED9               	movwf	fsr2l,c
  1056  0000C0  0E01               	movlw	high _tasks
  1057  0000C2  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  1058  0000C4  6EDA               	movwf	fsr2h,c
  1059  0000C6  C076  FFDE         	movff	register_timer@callback,postinc2
  1060  0000CA  C077  FFDE         	movff	register_timer@callback+1,postinc2
  1061  0000CE  C078  FFDE         	movff	register_timer@callback+2,postinc2
  1062                           
  1063                           ;driver.c: 62:     tasks[NUMBER_EXIST].data = data;
  1064  0000D2  C0BF  F060         	movff	_NUMBER_EXIST,___wmul@multiplier
  1065  0000D6  C0C0  F061         	movff	_NUMBER_EXIST+1,___wmul@multiplier+1
  1066  0000DA  0E00               	movlw	0
  1067  0000DC  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  1068  0000DE  0E17               	movlw	23
  1069  0000E0  6F62               	movwf	___wmul@multiplicand& (0+255),b
  1070  0000E2  EC01  F00C         	call	___wmul	;wreg free
  1071  0000E6  0E13               	movlw	low (_tasks+19)
  1072  0000E8  0100               	movlb	0	; () banked
  1073  0000EA  2560               	addwf	?___wmul& (0+255),w,b
  1074  0000EC  6ED9               	movwf	fsr2l,c
  1075  0000EE  0E01               	movlw	high (_tasks+19)
  1076  0000F0  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  1077  0000F2  6EDA               	movwf	fsr2h,c
  1078  0000F4  C079  FFDE         	movff	register_timer@data,postinc2
  1079  0000F8  C07A  FFDD         	movff	register_timer@data+1,postdec2
  1080                           
  1081                           ;driver.c: 63:     tasks[NUMBER_EXIST].period = period;
  1082  0000FC  C0BF  F060         	movff	_NUMBER_EXIST,___wmul@multiplier
  1083  000100  C0C0  F061         	movff	_NUMBER_EXIST+1,___wmul@multiplier+1
  1084  000104  0E00               	movlw	0
  1085  000106  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  1086  000108  0E17               	movlw	23
  1087  00010A  6F62               	movwf	___wmul@multiplicand& (0+255),b
  1088  00010C  EC01  F00C         	call	___wmul	;wreg free
  1089  000110  0E0B               	movlw	low (_tasks+11)
  1090  000112  0100               	movlb	0	; () banked
  1091  000114  2560               	addwf	?___wmul& (0+255),w,b
  1092  000116  6ED9               	movwf	fsr2l,c
  1093  000118  0E01               	movlw	high (_tasks+11)
  1094  00011A  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  1095  00011C  6EDA               	movwf	fsr2h,c
  1096  00011E  C06E  FFDE         	movff	register_timer@period,postinc2
  1097  000122  C06F  FFDE         	movff	register_timer@period+1,postinc2
  1098  000126  C070  FFDE         	movff	register_timer@period+2,postinc2
  1099  00012A  C071  FFDE         	movff	register_timer@period+3,postinc2
  1100  00012E  C072  FFDE         	movff	register_timer@period+4,postinc2
  1101  000132  C073  FFDE         	movff	register_timer@period+5,postinc2
  1102  000136  C074  FFDE         	movff	register_timer@period+6,postinc2
  1103  00013A  C075  FFDE         	movff	register_timer@period+7,postinc2
  1104  00013E                     
  1105                           ; BSR set to: 0
  1106                           ;driver.c: 64:     if (NUMBER_EXIST == 0){
  1107  00013E  51BF               	movf	_NUMBER_EXIST& (0+255),w,b
  1108  000140  11C0               	iorwf	(_NUMBER_EXIST+1)& (0+255),w,b
  1109  000142  A4D8               	btfss	status,2,c
  1110  000144  EFA6  F000         	goto	u421
  1111  000148  EFA8  F000         	goto	u420
  1112  00014C                     u421:
  1113  00014C  EFED  F000         	goto	l1391
  1114  000150                     u420:
  1115  000150                     
  1116                           ; BSR set to: 0
  1117                           ;driver.c: 65:         tasks[NUMBER_EXIST].next = -1;
  1118  000150  C0BF  F060         	movff	_NUMBER_EXIST,___wmul@multiplier
  1119  000154  C0C0  F061         	movff	_NUMBER_EXIST+1,___wmul@multiplier+1
  1120  000158  0E00               	movlw	0
  1121  00015A  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  1122  00015C  0E17               	movlw	23
  1123  00015E  6F62               	movwf	___wmul@multiplicand& (0+255),b
  1124  000160  EC01  F00C         	call	___wmul	;wreg free
  1125  000164  0E15               	movlw	low (_tasks+21)
  1126  000166  0100               	movlb	0	; () banked
  1127  000168  2560               	addwf	?___wmul& (0+255),w,b
  1128  00016A  6ED9               	movwf	fsr2l,c
  1129  00016C  0E01               	movlw	high (_tasks+21)
  1130  00016E  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  1131  000170  6EDA               	movwf	fsr2h,c
  1132  000172  0EFF               	movlw	255
  1133  000174  6EDE               	movwf	postinc2,c
  1134  000176  0EFF               	movlw	255
  1135  000178  6EDD               	movwf	postdec2,c
  1136  00017A                     
  1137                           ; BSR set to: 0
  1138                           ;driver.c: 66:         HEAD_QUEUE = 0;
  1139  00017A  0E00               	movlw	0
  1140  00017C  6FBC               	movwf	(_HEAD_QUEUE+1)& (0+255),b
  1141  00017E  0E00               	movlw	0
  1142  000180  6FBB               	movwf	_HEAD_QUEUE& (0+255),b
  1143  000182                     
  1144                           ; BSR set to: 0
  1145                           ;driver.c: 67:         tasks[NUMBER_EXIST].delay = delay;
  1146  000182  C0BF  F060         	movff	_NUMBER_EXIST,___wmul@multiplier
  1147  000186  C0C0  F061         	movff	_NUMBER_EXIST+1,___wmul@multiplier+1
  1148  00018A  0E00               	movlw	0
  1149  00018C  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  1150  00018E  0E17               	movlw	23
  1151  000190  6F62               	movwf	___wmul@multiplicand& (0+255),b
  1152  000192  EC01  F00C         	call	___wmul	;wreg free
  1153  000196  0E03               	movlw	low (_tasks+3)
  1154  000198  0100               	movlb	0	; () banked
  1155  00019A  2560               	addwf	?___wmul& (0+255),w,b
  1156  00019C  6ED9               	movwf	fsr2l,c
  1157  00019E  0E01               	movlw	high (_tasks+3)
  1158  0001A0  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  1159  0001A2  6EDA               	movwf	fsr2h,c
  1160  0001A4  C066  FFDE         	movff	register_timer@delay,postinc2
  1161  0001A8  C067  FFDE         	movff	register_timer@delay+1,postinc2
  1162  0001AC  C068  FFDE         	movff	register_timer@delay+2,postinc2
  1163  0001B0  C069  FFDE         	movff	register_timer@delay+3,postinc2
  1164  0001B4  C06A  FFDE         	movff	register_timer@delay+4,postinc2
  1165  0001B8  C06B  FFDE         	movff	register_timer@delay+5,postinc2
  1166  0001BC  C06C  FFDE         	movff	register_timer@delay+6,postinc2
  1167  0001C0  C06D  FFDE         	movff	register_timer@delay+7,postinc2
  1168  0001C4                     l1387:
  1169                           
  1170                           ; BSR set to: 0
  1171                           ;driver.c: 68:         return NUMBER_EXIST;
  1172  0001C4  C0BF  F066         	movff	_NUMBER_EXIST,?_register_timer
  1173  0001C8  C0C0  F067         	movff	_NUMBER_EXIST+1,?_register_timer+1
  1174  0001CC  0E00               	movlw	0
  1175  0001CE  BF67               	btfsc	(?_register_timer+1)& (0+255),7,b
  1176  0001D0  0EFF               	movlw	-1
  1177  0001D2  6F68               	movwf	(?_register_timer+2)& (0+255),b
  1178  0001D4  6F69               	movwf	(?_register_timer+3)& (0+255),b
  1179  0001D6  EF45  F004         	goto	l196
  1180  0001DA                     l1391:
  1181                           
  1182                           ; BSR set to: 0
  1183                           ;driver.c: 70:     unsigned int temp;;driver.c: 71:     if (tasks[HEAD_QUEUE].delay >= d
      +                          elay){
  1184  0001DA  C0BB  F060         	movff	_HEAD_QUEUE,___wmul@multiplier
  1185  0001DE  C0BC  F061         	movff	_HEAD_QUEUE+1,___wmul@multiplier+1
  1186  0001E2  0E00               	movlw	0
  1187  0001E4  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  1188  0001E6  0E17               	movlw	23
  1189  0001E8  6F62               	movwf	___wmul@multiplicand& (0+255),b
  1190  0001EA  EC01  F00C         	call	___wmul	;wreg free
  1191  0001EE  0E03               	movlw	low (_tasks+3)
  1192  0001F0  0100               	movlb	0	; () banked
  1193  0001F2  2560               	addwf	?___wmul& (0+255),w,b
  1194  0001F4  6ED9               	movwf	fsr2l,c
  1195  0001F6  0E01               	movlw	high (_tasks+3)
  1196  0001F8  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  1197  0001FA  6EDA               	movwf	fsr2h,c
  1198  0001FC  5166               	movf	register_timer@delay& (0+255),w,b
  1199  0001FE  5CDE               	subwf	postinc2,w,c
  1200  000200  5167               	movf	(register_timer@delay+1)& (0+255),w,b
  1201  000202  58DE               	subwfb	postinc2,w,c
  1202  000204  5168               	movf	(register_timer@delay+2)& (0+255),w,b
  1203  000206  58DE               	subwfb	postinc2,w,c
  1204  000208  5169               	movf	(register_timer@delay+3)& (0+255),w,b
  1205  00020A  58DE               	subwfb	postinc2,w,c
  1206  00020C  516A               	movf	(register_timer@delay+4)& (0+255),w,b
  1207  00020E  58DE               	subwfb	postinc2,w,c
  1208  000210  516B               	movf	(register_timer@delay+5)& (0+255),w,b
  1209  000212  58DE               	subwfb	postinc2,w,c
  1210  000214  516C               	movf	(register_timer@delay+6)& (0+255),w,b
  1211  000216  58DE               	subwfb	postinc2,w,c
  1212  000218  516D               	movf	(register_timer@delay+7)& (0+255),w,b
  1213  00021A  58DE               	subwfb	postinc2,w,c
  1214  00021C  A0D8               	btfss	status,0,c
  1215  00021E  EF13  F001         	goto	u431
  1216  000222  EF15  F001         	goto	u430
  1217  000226                     u431:
  1218  000226  EFAB  F001         	goto	l202
  1219  00022A                     u430:
  1220  00022A                     
  1221                           ; BSR set to: 0
  1222                           ;driver.c: 72:         tasks[NUMBER_EXIST].next = HEAD_QUEUE;
  1223  00022A  C0BF  F060         	movff	_NUMBER_EXIST,___wmul@multiplier
  1224  00022E  C0C0  F061         	movff	_NUMBER_EXIST+1,___wmul@multiplier+1
  1225  000232  0E00               	movlw	0
  1226  000234  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  1227  000236  0E17               	movlw	23
  1228  000238  6F62               	movwf	___wmul@multiplicand& (0+255),b
  1229  00023A  EC01  F00C         	call	___wmul	;wreg free
  1230  00023E  0E15               	movlw	low (_tasks+21)
  1231  000240  0100               	movlb	0	; () banked
  1232  000242  2560               	addwf	?___wmul& (0+255),w,b
  1233  000244  6ED9               	movwf	fsr2l,c
  1234  000246  0E01               	movlw	high (_tasks+21)
  1235  000248  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  1236  00024A  6EDA               	movwf	fsr2h,c
  1237  00024C  C0BB  FFDE         	movff	_HEAD_QUEUE,postinc2
  1238  000250  C0BC  FFDD         	movff	_HEAD_QUEUE+1,postdec2
  1239                           
  1240                           ;driver.c: 73:         tasks[HEAD_QUEUE].delay = tasks[HEAD_QUEUE].delay - delay;
  1241  000254  C0BB  F060         	movff	_HEAD_QUEUE,___wmul@multiplier
  1242  000258  C0BC  F061         	movff	_HEAD_QUEUE+1,___wmul@multiplier+1
  1243  00025C  0E00               	movlw	0
  1244  00025E  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  1245  000260  0E17               	movlw	23
  1246  000262  6F62               	movwf	___wmul@multiplicand& (0+255),b
  1247  000264  EC01  F00C         	call	___wmul	;wreg free
  1248  000268  0E03               	movlw	low (_tasks+3)
  1249  00026A  0100               	movlb	0	; () banked
  1250  00026C  2560               	addwf	?___wmul& (0+255),w,b
  1251  00026E  6ED9               	movwf	fsr2l,c
  1252  000270  0E01               	movlw	high (_tasks+3)
  1253  000272  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  1254  000274  6EDA               	movwf	fsr2h,c
  1255  000276  CFDE F07B          	movff	postinc2,??_register_timer
  1256  00027A  CFDE F07C          	movff	postinc2,??_register_timer+1
  1257  00027E  CFDE F07D          	movff	postinc2,??_register_timer+2
  1258  000282  CFDE F07E          	movff	postinc2,??_register_timer+3
  1259  000286  CFDE F07F          	movff	postinc2,??_register_timer+4
  1260  00028A  CFDE F080          	movff	postinc2,??_register_timer+5
  1261  00028E  CFDE F081          	movff	postinc2,??_register_timer+6
  1262  000292  CFDE F082          	movff	postinc2,??_register_timer+7
  1263  000296  5166               	movf	register_timer@delay& (0+255),w,b
  1264  000298  5D7B               	subwf	??_register_timer& (0+255),w,b
  1265  00029A  6F83               	movwf	(??_register_timer+8)& (0+255),b
  1266  00029C  5167               	movf	(register_timer@delay+1)& (0+255),w,b
  1267  00029E  597C               	subwfb	(??_register_timer+1)& (0+255),w,b
  1268  0002A0  6F84               	movwf	(??_register_timer+9)& (0+255),b
  1269  0002A2  5168               	movf	(register_timer@delay+2)& (0+255),w,b
  1270  0002A4  597D               	subwfb	(??_register_timer+2)& (0+255),w,b
  1271  0002A6  6F85               	movwf	(??_register_timer+10)& (0+255),b
  1272  0002A8  5169               	movf	(register_timer@delay+3)& (0+255),w,b
  1273  0002AA  597E               	subwfb	(??_register_timer+3)& (0+255),w,b
  1274  0002AC  6F86               	movwf	(??_register_timer+11)& (0+255),b
  1275  0002AE  516A               	movf	(register_timer@delay+4)& (0+255),w,b
  1276  0002B0  597F               	subwfb	(??_register_timer+4)& (0+255),w,b
  1277  0002B2  6F87               	movwf	(??_register_timer+12)& (0+255),b
  1278  0002B4  516B               	movf	(register_timer@delay+5)& (0+255),w,b
  1279  0002B6  5980               	subwfb	(??_register_timer+5)& (0+255),w,b
  1280  0002B8  6F88               	movwf	(??_register_timer+13)& (0+255),b
  1281  0002BA  516C               	movf	(register_timer@delay+6)& (0+255),w,b
  1282  0002BC  5981               	subwfb	(??_register_timer+6)& (0+255),w,b
  1283  0002BE  6F89               	movwf	(??_register_timer+14)& (0+255),b
  1284  0002C0  516D               	movf	(register_timer@delay+7)& (0+255),w,b
  1285  0002C2  5982               	subwfb	(??_register_timer+7)& (0+255),w,b
  1286  0002C4  6F8A               	movwf	(??_register_timer+15)& (0+255),b
  1287  0002C6  C0BB  F060         	movff	_HEAD_QUEUE,___wmul@multiplier
  1288  0002CA  C0BC  F061         	movff	_HEAD_QUEUE+1,___wmul@multiplier+1
  1289  0002CE  0E00               	movlw	0
  1290  0002D0  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  1291  0002D2  0E17               	movlw	23
  1292  0002D4  6F62               	movwf	___wmul@multiplicand& (0+255),b
  1293  0002D6  EC01  F00C         	call	___wmul	;wreg free
  1294  0002DA  0E03               	movlw	low (_tasks+3)
  1295  0002DC  0100               	movlb	0	; () banked
  1296  0002DE  2560               	addwf	?___wmul& (0+255),w,b
  1297  0002E0  6ED9               	movwf	fsr2l,c
  1298  0002E2  0E01               	movlw	high (_tasks+3)
  1299  0002E4  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  1300  0002E6  6EDA               	movwf	fsr2h,c
  1301  0002E8  C083  FFDE         	movff	??_register_timer+8,postinc2
  1302  0002EC  C084  FFDE         	movff	??_register_timer+9,postinc2
  1303  0002F0  C085  FFDE         	movff	??_register_timer+10,postinc2
  1304  0002F4  C086  FFDE         	movff	??_register_timer+11,postinc2
  1305  0002F8  C087  FFDE         	movff	??_register_timer+12,postinc2
  1306  0002FC  C088  FFDE         	movff	??_register_timer+13,postinc2
  1307  000300  C089  FFDE         	movff	??_register_timer+14,postinc2
  1308  000304  C08A  FFDE         	movff	??_register_timer+15,postinc2
  1309                           
  1310                           ;driver.c: 74:         tasks[NUMBER_EXIST].delay = delay;
  1311  000308  C0BF  F060         	movff	_NUMBER_EXIST,___wmul@multiplier
  1312  00030C  C0C0  F061         	movff	_NUMBER_EXIST+1,___wmul@multiplier+1
  1313  000310  0E00               	movlw	0
  1314  000312  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  1315  000314  0E17               	movlw	23
  1316  000316  6F62               	movwf	___wmul@multiplicand& (0+255),b
  1317  000318  EC01  F00C         	call	___wmul	;wreg free
  1318  00031C  0E03               	movlw	low (_tasks+3)
  1319  00031E  0100               	movlb	0	; () banked
  1320  000320  2560               	addwf	?___wmul& (0+255),w,b
  1321  000322  6ED9               	movwf	fsr2l,c
  1322  000324  0E01               	movlw	high (_tasks+3)
  1323  000326  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  1324  000328  6EDA               	movwf	fsr2h,c
  1325  00032A  C066  FFDE         	movff	register_timer@delay,postinc2
  1326  00032E  C067  FFDE         	movff	register_timer@delay+1,postinc2
  1327  000332  C068  FFDE         	movff	register_timer@delay+2,postinc2
  1328  000336  C069  FFDE         	movff	register_timer@delay+3,postinc2
  1329  00033A  C06A  FFDE         	movff	register_timer@delay+4,postinc2
  1330  00033E  C06B  FFDE         	movff	register_timer@delay+5,postinc2
  1331  000342  C06C  FFDE         	movff	register_timer@delay+6,postinc2
  1332  000346  C06D  FFDE         	movff	register_timer@delay+7,postinc2
  1333  00034A                     
  1334                           ; BSR set to: 0
  1335                           ;driver.c: 75:         HEAD_QUEUE = NUMBER_EXIST;
  1336  00034A  C0BF  F0BB         	movff	_NUMBER_EXIST,_HEAD_QUEUE
  1337  00034E  C0C0  F0BC         	movff	_NUMBER_EXIST+1,_HEAD_QUEUE+1
  1338  000352  EFE2  F000         	goto	l1387
  1339  000356                     l202:
  1340                           
  1341                           ; BSR set to: 0
  1342                           ;driver.c: 79:     int temp_index = HEAD_QUEUE;
  1343  000356  C0BB  F0A1         	movff	_HEAD_QUEUE,register_timer@temp_index
  1344  00035A  C0BC  F0A2         	movff	_HEAD_QUEUE+1,register_timer@temp_index+1
  1345  00035E                     
  1346                           ; BSR set to: 0
  1347                           ;driver.c: 80:     unsigned long long int temp_delay = tasks[HEAD_QUEUE].delay;
  1348  00035E  C0BB  F060         	movff	_HEAD_QUEUE,___wmul@multiplier
  1349  000362  C0BC  F061         	movff	_HEAD_QUEUE+1,___wmul@multiplier+1
  1350  000366  0E00               	movlw	0
  1351  000368  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  1352  00036A  0E17               	movlw	23
  1353  00036C  6F62               	movwf	___wmul@multiplicand& (0+255),b
  1354  00036E  EC01  F00C         	call	___wmul	;wreg free
  1355  000372  0E03               	movlw	low (_tasks+3)
  1356  000374  0100               	movlb	0	; () banked
  1357  000376  2560               	addwf	?___wmul& (0+255),w,b
  1358  000378  6ED9               	movwf	fsr2l,c
  1359  00037A  0E01               	movlw	high (_tasks+3)
  1360  00037C  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  1361  00037E  6EDA               	movwf	fsr2h,c
  1362  000380  CFDE F07B          	movff	postinc2,??_register_timer
  1363  000384  CFDE F07C          	movff	postinc2,??_register_timer+1
  1364  000388  CFDE F07D          	movff	postinc2,??_register_timer+2
  1365  00038C  CFDE F07E          	movff	postinc2,??_register_timer+3
  1366  000390  CFDE F07F          	movff	postinc2,??_register_timer+4
  1367  000394  CFDE F080          	movff	postinc2,??_register_timer+5
  1368  000398  CFDE F081          	movff	postinc2,??_register_timer+6
  1369  00039C  CFDE F082          	movff	postinc2,??_register_timer+7
  1370  0003A0  C07B  F099         	movff	??_register_timer,register_timer@temp_delay
  1371  0003A4  C07C  F09A         	movff	??_register_timer+1,register_timer@temp_delay+1
  1372  0003A8  C07D  F09B         	movff	??_register_timer+2,register_timer@temp_delay+2
  1373  0003AC  C07E  F09C         	movff	??_register_timer+3,register_timer@temp_delay+3
  1374  0003B0  C07F  F09D         	movff	??_register_timer+4,register_timer@temp_delay+4
  1375  0003B4  C080  F09E         	movff	??_register_timer+5,register_timer@temp_delay+5
  1376  0003B8  C081  F09F         	movff	??_register_timer+6,register_timer@temp_delay+6
  1377  0003BC  C082  F0A0         	movff	??_register_timer+7,register_timer@temp_delay+7
  1378  0003C0                     l203:
  1379                           
  1380                           ; BSR set to: 0
  1381                           ;driver.c: 82:         if (tasks[temp_index].next == -1){
  1382  0003C0  C0A1  F060         	movff	register_timer@temp_index,___wmul@multiplier
  1383  0003C4  C0A2  F061         	movff	register_timer@temp_index+1,___wmul@multiplier+1
  1384  0003C8  0E00               	movlw	0
  1385  0003CA  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  1386  0003CC  0E17               	movlw	23
  1387  0003CE  6F62               	movwf	___wmul@multiplicand& (0+255),b
  1388  0003D0  EC01  F00C         	call	___wmul	;wreg free
  1389  0003D4  0E15               	movlw	low (_tasks+21)
  1390  0003D6  0100               	movlb	0	; () banked
  1391  0003D8  2560               	addwf	?___wmul& (0+255),w,b
  1392  0003DA  6ED9               	movwf	fsr2l,c
  1393  0003DC  0E01               	movlw	high (_tasks+21)
  1394  0003DE  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  1395  0003E0  6EDA               	movwf	fsr2h,c
  1396  0003E2  28DE               	incf	postinc2,w,c
  1397  0003E4  E106               	bnz	u441
  1398  0003E6  28DE               	incf	postinc2,w,c
  1399  0003E8  A4D8               	btfss	status,2,c
  1400  0003EA  EFF9  F001         	goto	u441
  1401  0003EE  EFFB  F001         	goto	u440
  1402  0003F2                     u441:
  1403  0003F2  EF60  F002         	goto	l1409
  1404  0003F6                     u440:
  1405  0003F6                     
  1406                           ; BSR set to: 0
  1407                           ;driver.c: 83:             tasks[temp_index].next = NUMBER_EXIST;
  1408  0003F6  C0A1  F060         	movff	register_timer@temp_index,___wmul@multiplier
  1409  0003FA  C0A2  F061         	movff	register_timer@temp_index+1,___wmul@multiplier+1
  1410  0003FE  0E00               	movlw	0
  1411  000400  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  1412  000402  0E17               	movlw	23
  1413  000404  6F62               	movwf	___wmul@multiplicand& (0+255),b
  1414  000406  EC01  F00C         	call	___wmul	;wreg free
  1415  00040A  0E15               	movlw	low (_tasks+21)
  1416  00040C  0100               	movlb	0	; () banked
  1417  00040E  2560               	addwf	?___wmul& (0+255),w,b
  1418  000410  6ED9               	movwf	fsr2l,c
  1419  000412  0E01               	movlw	high (_tasks+21)
  1420  000414  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  1421  000416  6EDA               	movwf	fsr2h,c
  1422  000418  C0BF  FFDE         	movff	_NUMBER_EXIST,postinc2
  1423  00041C  C0C0  FFDD         	movff	_NUMBER_EXIST+1,postdec2
  1424                           
  1425                           ;driver.c: 84:             tasks[NUMBER_EXIST].next = -1;
  1426  000420  C0BF  F060         	movff	_NUMBER_EXIST,___wmul@multiplier
  1427  000424  C0C0  F061         	movff	_NUMBER_EXIST+1,___wmul@multiplier+1
  1428  000428  0E00               	movlw	0
  1429  00042A  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  1430  00042C  0E17               	movlw	23
  1431  00042E  6F62               	movwf	___wmul@multiplicand& (0+255),b
  1432  000430  EC01  F00C         	call	___wmul	;wreg free
  1433  000434  0E15               	movlw	low (_tasks+21)
  1434  000436  0100               	movlb	0	; () banked
  1435  000438  2560               	addwf	?___wmul& (0+255),w,b
  1436  00043A  6ED9               	movwf	fsr2l,c
  1437  00043C  0E01               	movlw	high (_tasks+21)
  1438  00043E  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  1439  000440  6EDA               	movwf	fsr2h,c
  1440  000442  0EFF               	movlw	255
  1441  000444  6EDE               	movwf	postinc2,c
  1442  000446  0EFF               	movlw	255
  1443  000448  6EDD               	movwf	postdec2,c
  1444                           
  1445                           ;driver.c: 85:             tasks[NUMBER_EXIST].delay = delay - temp_delay;
  1446  00044A  5199               	movf	register_timer@temp_delay& (0+255),w,b
  1447  00044C  5D66               	subwf	register_timer@delay& (0+255),w,b
  1448  00044E  6F7B               	movwf	??_register_timer& (0+255),b
  1449  000450  519A               	movf	(register_timer@temp_delay+1)& (0+255),w,b
  1450  000452  5967               	subwfb	(register_timer@delay+1)& (0+255),w,b
  1451  000454  6F7C               	movwf	(??_register_timer+1)& (0+255),b
  1452  000456  519B               	movf	(register_timer@temp_delay+2)& (0+255),w,b
  1453  000458  5968               	subwfb	(register_timer@delay+2)& (0+255),w,b
  1454  00045A  6F7D               	movwf	(??_register_timer+2)& (0+255),b
  1455  00045C  519C               	movf	(register_timer@temp_delay+3)& (0+255),w,b
  1456  00045E  5969               	subwfb	(register_timer@delay+3)& (0+255),w,b
  1457  000460  6F7E               	movwf	(??_register_timer+3)& (0+255),b
  1458  000462  519D               	movf	(register_timer@temp_delay+4)& (0+255),w,b
  1459  000464  596A               	subwfb	(register_timer@delay+4)& (0+255),w,b
  1460  000466  6F7F               	movwf	(??_register_timer+4)& (0+255),b
  1461  000468  519E               	movf	(register_timer@temp_delay+5)& (0+255),w,b
  1462  00046A  596B               	subwfb	(register_timer@delay+5)& (0+255),w,b
  1463  00046C  6F80               	movwf	(??_register_timer+5)& (0+255),b
  1464  00046E  519F               	movf	(register_timer@temp_delay+6)& (0+255),w,b
  1465  000470  596C               	subwfb	(register_timer@delay+6)& (0+255),w,b
  1466  000472  6F81               	movwf	(??_register_timer+6)& (0+255),b
  1467  000474  51A0               	movf	(register_timer@temp_delay+7)& (0+255),w,b
  1468  000476  596D               	subwfb	(register_timer@delay+7)& (0+255),w,b
  1469  000478  6F82               	movwf	(??_register_timer+7)& (0+255),b
  1470  00047A  C0BF  F060         	movff	_NUMBER_EXIST,___wmul@multiplier
  1471  00047E  C0C0  F061         	movff	_NUMBER_EXIST+1,___wmul@multiplier+1
  1472  000482  0E00               	movlw	0
  1473  000484  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  1474  000486  0E17               	movlw	23
  1475  000488  6F62               	movwf	___wmul@multiplicand& (0+255),b
  1476  00048A  EC01  F00C         	call	___wmul	;wreg free
  1477  00048E  0E03               	movlw	low (_tasks+3)
  1478  000490  0100               	movlb	0	; () banked
  1479  000492  2560               	addwf	?___wmul& (0+255),w,b
  1480  000494  6ED9               	movwf	fsr2l,c
  1481  000496  0E01               	movlw	high (_tasks+3)
  1482  000498  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  1483  00049A  6EDA               	movwf	fsr2h,c
  1484  00049C  C07B  FFDE         	movff	??_register_timer,postinc2
  1485  0004A0  C07C  FFDE         	movff	??_register_timer+1,postinc2
  1486  0004A4  C07D  FFDE         	movff	??_register_timer+2,postinc2
  1487  0004A8  C07E  FFDE         	movff	??_register_timer+3,postinc2
  1488  0004AC  C07F  FFDE         	movff	??_register_timer+4,postinc2
  1489  0004B0  C080  FFDE         	movff	??_register_timer+5,postinc2
  1490  0004B4  C081  FFDE         	movff	??_register_timer+6,postinc2
  1491  0004B8  C082  FFDE         	movff	??_register_timer+7,postinc2
  1492  0004BC  EFE2  F000         	goto	l1387
  1493  0004C0                     l1409:
  1494                           
  1495                           ; BSR set to: 0
  1496                           ;driver.c: 88:         temp_delay = temp_delay + tasks[tasks[temp_index].next].delay;
  1497  0004C0  C0A1  F060         	movff	register_timer@temp_index,___wmul@multiplier
  1498  0004C4  C0A2  F061         	movff	register_timer@temp_index+1,___wmul@multiplier+1
  1499  0004C8  0E00               	movlw	0
  1500  0004CA  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  1501  0004CC  0E17               	movlw	23
  1502  0004CE  6F62               	movwf	___wmul@multiplicand& (0+255),b
  1503  0004D0  EC01  F00C         	call	___wmul	;wreg free
  1504  0004D4  0E15               	movlw	low (_tasks+21)
  1505  0004D6  0100               	movlb	0	; () banked
  1506  0004D8  2560               	addwf	?___wmul& (0+255),w,b
  1507  0004DA  6ED9               	movwf	fsr2l,c
  1508  0004DC  0E01               	movlw	high (_tasks+21)
  1509  0004DE  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  1510  0004E0  6EDA               	movwf	fsr2h,c
  1511  0004E2  CFDE F097          	movff	postinc2,_register_timer$1249
  1512  0004E6  CFDD F098          	movff	postdec2,_register_timer$1249+1
  1513                           
  1514                           ;driver.c: 88:         temp_delay = temp_delay + tasks[tasks[temp_index].next].delay;
  1515  0004EA  C097  F060         	movff	_register_timer$1249,___wmul@multiplier
  1516  0004EE  C098  F061         	movff	_register_timer$1249+1,___wmul@multiplier+1
  1517  0004F2  0E00               	movlw	0
  1518  0004F4  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  1519  0004F6  0E17               	movlw	23
  1520  0004F8  6F62               	movwf	___wmul@multiplicand& (0+255),b
  1521  0004FA  EC01  F00C         	call	___wmul	;wreg free
  1522  0004FE  0E03               	movlw	low (_tasks+3)
  1523  000500  0100               	movlb	0	; () banked
  1524  000502  2560               	addwf	?___wmul& (0+255),w,b
  1525  000504  6ED9               	movwf	fsr2l,c
  1526  000506  0E01               	movlw	high (_tasks+3)
  1527  000508  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  1528  00050A  6EDA               	movwf	fsr2h,c
  1529  00050C  CFDE F07B          	movff	postinc2,??_register_timer
  1530  000510  CFDE F07C          	movff	postinc2,??_register_timer+1
  1531  000514  CFDE F07D          	movff	postinc2,??_register_timer+2
  1532  000518  CFDE F07E          	movff	postinc2,??_register_timer+3
  1533  00051C  CFDE F07F          	movff	postinc2,??_register_timer+4
  1534  000520  CFDE F080          	movff	postinc2,??_register_timer+5
  1535  000524  CFDE F081          	movff	postinc2,??_register_timer+6
  1536  000528  CFDE F082          	movff	postinc2,??_register_timer+7
  1537  00052C  5199               	movf	register_timer@temp_delay& (0+255),w,b
  1538  00052E  257B               	addwf	??_register_timer& (0+255),w,b
  1539  000530  6F99               	movwf	register_timer@temp_delay& (0+255),b
  1540  000532  519A               	movf	(register_timer@temp_delay+1)& (0+255),w,b
  1541  000534  217C               	addwfc	(??_register_timer+1)& (0+255),w,b
  1542  000536  6F9A               	movwf	(register_timer@temp_delay+1)& (0+255),b
  1543  000538  519B               	movf	(register_timer@temp_delay+2)& (0+255),w,b
  1544  00053A  217D               	addwfc	(??_register_timer+2)& (0+255),w,b
  1545  00053C  6F9B               	movwf	(register_timer@temp_delay+2)& (0+255),b
  1546  00053E  519C               	movf	(register_timer@temp_delay+3)& (0+255),w,b
  1547  000540  217E               	addwfc	(??_register_timer+3)& (0+255),w,b
  1548  000542  6F9C               	movwf	(register_timer@temp_delay+3)& (0+255),b
  1549  000544  519D               	movf	(register_timer@temp_delay+4)& (0+255),w,b
  1550  000546  217F               	addwfc	(??_register_timer+4)& (0+255),w,b
  1551  000548  6F9D               	movwf	(register_timer@temp_delay+4)& (0+255),b
  1552  00054A  519E               	movf	(register_timer@temp_delay+5)& (0+255),w,b
  1553  00054C  2180               	addwfc	(??_register_timer+5)& (0+255),w,b
  1554  00054E  6F9E               	movwf	(register_timer@temp_delay+5)& (0+255),b
  1555  000550  519F               	movf	(register_timer@temp_delay+6)& (0+255),w,b
  1556  000552  2181               	addwfc	(??_register_timer+6)& (0+255),w,b
  1557  000554  6F9F               	movwf	(register_timer@temp_delay+6)& (0+255),b
  1558  000556  51A0               	movf	(register_timer@temp_delay+7)& (0+255),w,b
  1559  000558  2182               	addwfc	(??_register_timer+7)& (0+255),w,b
  1560  00055A  6FA0               	movwf	(register_timer@temp_delay+7)& (0+255),b
  1561  00055C                     
  1562                           ; BSR set to: 0
  1563                           ;driver.c: 89:         if (temp_delay >= delay){
  1564  00055C  5166               	movf	register_timer@delay& (0+255),w,b
  1565  00055E  5D99               	subwf	register_timer@temp_delay& (0+255),w,b
  1566  000560  5167               	movf	(register_timer@delay+1)& (0+255),w,b
  1567  000562  599A               	subwfb	(register_timer@temp_delay+1)& (0+255),w,b
  1568  000564  5168               	movf	(register_timer@delay+2)& (0+255),w,b
  1569  000566  599B               	subwfb	(register_timer@temp_delay+2)& (0+255),w,b
  1570  000568  5169               	movf	(register_timer@delay+3)& (0+255),w,b
  1571  00056A  599C               	subwfb	(register_timer@temp_delay+3)& (0+255),w,b
  1572  00056C  516A               	movf	(register_timer@delay+4)& (0+255),w,b
  1573  00056E  599D               	subwfb	(register_timer@temp_delay+4)& (0+255),w,b
  1574  000570  516B               	movf	(register_timer@delay+5)& (0+255),w,b
  1575  000572  599E               	subwfb	(register_timer@temp_delay+5)& (0+255),w,b
  1576  000574  516C               	movf	(register_timer@delay+6)& (0+255),w,b
  1577  000576  599F               	subwfb	(register_timer@temp_delay+6)& (0+255),w,b
  1578  000578  516D               	movf	(register_timer@delay+7)& (0+255),w,b
  1579  00057A  59A0               	subwfb	(register_timer@temp_delay+7)& (0+255),w,b
  1580  00057C  A0D8               	btfss	status,0,c
  1581  00057E  EFC3  F002         	goto	u451
  1582  000582  EFC5  F002         	goto	u450
  1583  000586                     u451:
  1584  000586  EF2E  F004         	goto	l1429
  1585  00058A                     u450:
  1586  00058A                     
  1587                           ; BSR set to: 0
  1588                           ;driver.c: 90:             temp_delay = temp_delay - tasks[tasks[temp_index].next].delay
      +                          ;
  1589  00058A  C0A1  F060         	movff	register_timer@temp_index,___wmul@multiplier
  1590  00058E  C0A2  F061         	movff	register_timer@temp_index+1,___wmul@multiplier+1
  1591  000592  0E00               	movlw	0
  1592  000594  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  1593  000596  0E17               	movlw	23
  1594  000598  6F62               	movwf	___wmul@multiplicand& (0+255),b
  1595  00059A  EC01  F00C         	call	___wmul	;wreg free
  1596  00059E  0E15               	movlw	low (_tasks+21)
  1597  0005A0  0100               	movlb	0	; () banked
  1598  0005A2  2560               	addwf	?___wmul& (0+255),w,b
  1599  0005A4  6ED9               	movwf	fsr2l,c
  1600  0005A6  0E01               	movlw	high (_tasks+21)
  1601  0005A8  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  1602  0005AA  6EDA               	movwf	fsr2h,c
  1603  0005AC  CFDE F097          	movff	postinc2,_register_timer$1249
  1604  0005B0  CFDD F098          	movff	postdec2,_register_timer$1249+1
  1605                           
  1606                           ;driver.c: 90:             temp_delay = temp_delay - tasks[tasks[temp_index].next].delay
      +                          ;
  1607  0005B4  C097  F060         	movff	_register_timer$1249,___wmul@multiplier
  1608  0005B8  C098  F061         	movff	_register_timer$1249+1,___wmul@multiplier+1
  1609  0005BC  0E00               	movlw	0
  1610  0005BE  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  1611  0005C0  0E17               	movlw	23
  1612  0005C2  6F62               	movwf	___wmul@multiplicand& (0+255),b
  1613  0005C4  EC01  F00C         	call	___wmul	;wreg free
  1614  0005C8  0E03               	movlw	low (_tasks+3)
  1615  0005CA  0100               	movlb	0	; () banked
  1616  0005CC  2560               	addwf	?___wmul& (0+255),w,b
  1617  0005CE  6ED9               	movwf	fsr2l,c
  1618  0005D0  0E01               	movlw	high (_tasks+3)
  1619  0005D2  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  1620  0005D4  6EDA               	movwf	fsr2h,c
  1621  0005D6  CFDE F07B          	movff	postinc2,??_register_timer
  1622  0005DA  CFDE F07C          	movff	postinc2,??_register_timer+1
  1623  0005DE  CFDE F07D          	movff	postinc2,??_register_timer+2
  1624  0005E2  CFDE F07E          	movff	postinc2,??_register_timer+3
  1625  0005E6  CFDE F07F          	movff	postinc2,??_register_timer+4
  1626  0005EA  CFDE F080          	movff	postinc2,??_register_timer+5
  1627  0005EE  CFDE F081          	movff	postinc2,??_register_timer+6
  1628  0005F2  CFDE F082          	movff	postinc2,??_register_timer+7
  1629  0005F6  517B               	movf	??_register_timer& (0+255),w,b
  1630  0005F8  5D99               	subwf	register_timer@temp_delay& (0+255),w,b
  1631  0005FA  6F99               	movwf	register_timer@temp_delay& (0+255),b
  1632  0005FC  517C               	movf	(??_register_timer+1)& (0+255),w,b
  1633  0005FE  599A               	subwfb	(register_timer@temp_delay+1)& (0+255),w,b
  1634  000600  6F9A               	movwf	(register_timer@temp_delay+1)& (0+255),b
  1635  000602  517D               	movf	(??_register_timer+2)& (0+255),w,b
  1636  000604  599B               	subwfb	(register_timer@temp_delay+2)& (0+255),w,b
  1637  000606  6F9B               	movwf	(register_timer@temp_delay+2)& (0+255),b
  1638  000608  517E               	movf	(??_register_timer+3)& (0+255),w,b
  1639  00060A  599C               	subwfb	(register_timer@temp_delay+3)& (0+255),w,b
  1640  00060C  6F9C               	movwf	(register_timer@temp_delay+3)& (0+255),b
  1641  00060E  517F               	movf	(??_register_timer+4)& (0+255),w,b
  1642  000610  599D               	subwfb	(register_timer@temp_delay+4)& (0+255),w,b
  1643  000612  6F9D               	movwf	(register_timer@temp_delay+4)& (0+255),b
  1644  000614  5180               	movf	(??_register_timer+5)& (0+255),w,b
  1645  000616  599E               	subwfb	(register_timer@temp_delay+5)& (0+255),w,b
  1646  000618  6F9E               	movwf	(register_timer@temp_delay+5)& (0+255),b
  1647  00061A  5181               	movf	(??_register_timer+6)& (0+255),w,b
  1648  00061C  599F               	subwfb	(register_timer@temp_delay+6)& (0+255),w,b
  1649  00061E  6F9F               	movwf	(register_timer@temp_delay+6)& (0+255),b
  1650  000620  5182               	movf	(??_register_timer+7)& (0+255),w,b
  1651  000622  59A0               	subwfb	(register_timer@temp_delay+7)& (0+255),w,b
  1652  000624  6FA0               	movwf	(register_timer@temp_delay+7)& (0+255),b
  1653                           
  1654                           ;driver.c: 91:             tasks[NUMBER_EXIST].delay = delay - temp_delay;
  1655  000626  5199               	movf	register_timer@temp_delay& (0+255),w,b
  1656  000628  5D66               	subwf	register_timer@delay& (0+255),w,b
  1657  00062A  6F7B               	movwf	??_register_timer& (0+255),b
  1658  00062C  519A               	movf	(register_timer@temp_delay+1)& (0+255),w,b
  1659  00062E  5967               	subwfb	(register_timer@delay+1)& (0+255),w,b
  1660  000630  6F7C               	movwf	(??_register_timer+1)& (0+255),b
  1661  000632  519B               	movf	(register_timer@temp_delay+2)& (0+255),w,b
  1662  000634  5968               	subwfb	(register_timer@delay+2)& (0+255),w,b
  1663  000636  6F7D               	movwf	(??_register_timer+2)& (0+255),b
  1664  000638  519C               	movf	(register_timer@temp_delay+3)& (0+255),w,b
  1665  00063A  5969               	subwfb	(register_timer@delay+3)& (0+255),w,b
  1666  00063C  6F7E               	movwf	(??_register_timer+3)& (0+255),b
  1667  00063E  519D               	movf	(register_timer@temp_delay+4)& (0+255),w,b
  1668  000640  596A               	subwfb	(register_timer@delay+4)& (0+255),w,b
  1669  000642  6F7F               	movwf	(??_register_timer+4)& (0+255),b
  1670  000644  519E               	movf	(register_timer@temp_delay+5)& (0+255),w,b
  1671  000646  596B               	subwfb	(register_timer@delay+5)& (0+255),w,b
  1672  000648  6F80               	movwf	(??_register_timer+5)& (0+255),b
  1673  00064A  519F               	movf	(register_timer@temp_delay+6)& (0+255),w,b
  1674  00064C  596C               	subwfb	(register_timer@delay+6)& (0+255),w,b
  1675  00064E  6F81               	movwf	(??_register_timer+6)& (0+255),b
  1676  000650  51A0               	movf	(register_timer@temp_delay+7)& (0+255),w,b
  1677  000652  596D               	subwfb	(register_timer@delay+7)& (0+255),w,b
  1678  000654  6F82               	movwf	(??_register_timer+7)& (0+255),b
  1679  000656  C0BF  F060         	movff	_NUMBER_EXIST,___wmul@multiplier
  1680  00065A  C0C0  F061         	movff	_NUMBER_EXIST+1,___wmul@multiplier+1
  1681  00065E  0E00               	movlw	0
  1682  000660  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  1683  000662  0E17               	movlw	23
  1684  000664  6F62               	movwf	___wmul@multiplicand& (0+255),b
  1685  000666  EC01  F00C         	call	___wmul	;wreg free
  1686  00066A  0E03               	movlw	low (_tasks+3)
  1687  00066C  0100               	movlb	0	; () banked
  1688  00066E  2560               	addwf	?___wmul& (0+255),w,b
  1689  000670  6ED9               	movwf	fsr2l,c
  1690  000672  0E01               	movlw	high (_tasks+3)
  1691  000674  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  1692  000676  6EDA               	movwf	fsr2h,c
  1693  000678  C07B  FFDE         	movff	??_register_timer,postinc2
  1694  00067C  C07C  FFDE         	movff	??_register_timer+1,postinc2
  1695  000680  C07D  FFDE         	movff	??_register_timer+2,postinc2
  1696  000684  C07E  FFDE         	movff	??_register_timer+3,postinc2
  1697  000688  C07F  FFDE         	movff	??_register_timer+4,postinc2
  1698  00068C  C080  FFDE         	movff	??_register_timer+5,postinc2
  1699  000690  C081  FFDE         	movff	??_register_timer+6,postinc2
  1700  000694  C082  FFDE         	movff	??_register_timer+7,postinc2
  1701  000698                     
  1702                           ; BSR set to: 0
  1703                           ;driver.c: 92:             tasks[NUMBER_EXIST].next = tasks[temp_index].next;
  1704  000698  C0A1  F060         	movff	register_timer@temp_index,___wmul@multiplier
  1705  00069C  C0A2  F061         	movff	register_timer@temp_index+1,___wmul@multiplier+1
  1706  0006A0  0E00               	movlw	0
  1707  0006A2  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  1708  0006A4  0E17               	movlw	23
  1709  0006A6  6F62               	movwf	___wmul@multiplicand& (0+255),b
  1710  0006A8  EC01  F00C         	call	___wmul	;wreg free
  1711  0006AC  0E15               	movlw	low (_tasks+21)
  1712  0006AE  0100               	movlb	0	; () banked
  1713  0006B0  2560               	addwf	?___wmul& (0+255),w,b
  1714  0006B2  6ED9               	movwf	fsr2l,c
  1715  0006B4  0E01               	movlw	high (_tasks+21)
  1716  0006B6  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  1717  0006B8  6EDA               	movwf	fsr2h,c
  1718  0006BA  C0BF  F060         	movff	_NUMBER_EXIST,___wmul@multiplier
  1719  0006BE  C0C0  F061         	movff	_NUMBER_EXIST+1,___wmul@multiplier+1
  1720  0006C2  0E00               	movlw	0
  1721  0006C4  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  1722  0006C6  0E17               	movlw	23
  1723  0006C8  6F62               	movwf	___wmul@multiplicand& (0+255),b
  1724  0006CA  EC01  F00C         	call	___wmul	;wreg free
  1725  0006CE  0E15               	movlw	low (_tasks+21)
  1726  0006D0  0100               	movlb	0	; () banked
  1727  0006D2  2560               	addwf	?___wmul& (0+255),w,b
  1728  0006D4  6EE1               	movwf	fsr1l,c
  1729  0006D6  0E01               	movlw	high (_tasks+21)
  1730  0006D8  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  1731  0006DA  6EE2               	movwf	fsr1h,c
  1732  0006DC  CFDE FFE6          	movff	postinc2,postinc1
  1733  0006E0  CFDD FFE5          	movff	postdec2,postdec1
  1734  0006E4                     
  1735                           ; BSR set to: 0
  1736                           ;driver.c: 93:             tasks[tasks[NUMBER_EXIST].next].delay = tasks[tasks[NUMBER_EX
      +                          IST].next].delay - tasks[NUMBER_EXIST].delay;
  1737  0006E4  C0BF  F060         	movff	_NUMBER_EXIST,___wmul@multiplier
  1738  0006E8  C0C0  F061         	movff	_NUMBER_EXIST+1,___wmul@multiplier+1
  1739  0006EC  0E00               	movlw	0
  1740  0006EE  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  1741  0006F0  0E17               	movlw	23
  1742  0006F2  6F62               	movwf	___wmul@multiplicand& (0+255),b
  1743  0006F4  EC01  F00C         	call	___wmul	;wreg free
  1744  0006F8  0E15               	movlw	low (_tasks+21)
  1745  0006FA  0100               	movlb	0	; () banked
  1746  0006FC  2560               	addwf	?___wmul& (0+255),w,b
  1747  0006FE  6ED9               	movwf	fsr2l,c
  1748  000700  0E01               	movlw	high (_tasks+21)
  1749  000702  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  1750  000704  6EDA               	movwf	fsr2h,c
  1751  000706  CFDE F097          	movff	postinc2,_register_timer$1249
  1752  00070A  CFDD F098          	movff	postdec2,_register_timer$1249+1
  1753  00070E                     
  1754                           ; BSR set to: 0
  1755                           ;driver.c: 93:             tasks[tasks[NUMBER_EXIST].next].delay = tasks[tasks[NUMBER_EX
      +                          IST].next].delay - tasks[NUMBER_EXIST].delay;
  1756  00070E  C0BF  F060         	movff	_NUMBER_EXIST,___wmul@multiplier
  1757  000712  C0C0  F061         	movff	_NUMBER_EXIST+1,___wmul@multiplier+1
  1758  000716  0E00               	movlw	0
  1759  000718  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  1760  00071A  0E17               	movlw	23
  1761  00071C  6F62               	movwf	___wmul@multiplicand& (0+255),b
  1762  00071E  EC01  F00C         	call	___wmul	;wreg free
  1763  000722  0E15               	movlw	low (_tasks+21)
  1764  000724  0100               	movlb	0	; () banked
  1765  000726  2560               	addwf	?___wmul& (0+255),w,b
  1766  000728  6ED9               	movwf	fsr2l,c
  1767  00072A  0E01               	movlw	high (_tasks+21)
  1768  00072C  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  1769  00072E  6EDA               	movwf	fsr2h,c
  1770  000730  CFDE F093          	movff	postinc2,_register_timer$1250
  1771  000734  CFDD F094          	movff	postdec2,_register_timer$1250+1
  1772  000738                     
  1773                           ; BSR set to: 0
  1774                           ;driver.c: 93:             tasks[tasks[NUMBER_EXIST].next].delay = tasks[tasks[NUMBER_EX
      +                          IST].next].delay - tasks[NUMBER_EXIST].delay;
  1775  000738  C0BF  F060         	movff	_NUMBER_EXIST,___wmul@multiplier
  1776  00073C  C0C0  F061         	movff	_NUMBER_EXIST+1,___wmul@multiplier+1
  1777  000740  0E00               	movlw	0
  1778  000742  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  1779  000744  0E17               	movlw	23
  1780  000746  6F62               	movwf	___wmul@multiplicand& (0+255),b
  1781  000748  EC01  F00C         	call	___wmul	;wreg free
  1782  00074C  0E03               	movlw	low (_tasks+3)
  1783  00074E  0100               	movlb	0	; () banked
  1784  000750  2560               	addwf	?___wmul& (0+255),w,b
  1785  000752  6ED9               	movwf	fsr2l,c
  1786  000754  0E01               	movlw	high (_tasks+3)
  1787  000756  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  1788  000758  6EDA               	movwf	fsr2h,c
  1789  00075A  CFDE F07B          	movff	postinc2,??_register_timer
  1790  00075E  CFDE F07C          	movff	postinc2,??_register_timer+1
  1791  000762  CFDE F07D          	movff	postinc2,??_register_timer+2
  1792  000766  CFDE F07E          	movff	postinc2,??_register_timer+3
  1793  00076A  CFDE F07F          	movff	postinc2,??_register_timer+4
  1794  00076E  CFDE F080          	movff	postinc2,??_register_timer+5
  1795  000772  CFDE F081          	movff	postinc2,??_register_timer+6
  1796  000776  CFDE F082          	movff	postinc2,??_register_timer+7
  1797  00077A  C097  F060         	movff	_register_timer$1249,___wmul@multiplier
  1798  00077E  C098  F061         	movff	_register_timer$1249+1,___wmul@multiplier+1
  1799  000782  0E00               	movlw	0
  1800  000784  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  1801  000786  0E17               	movlw	23
  1802  000788  6F62               	movwf	___wmul@multiplicand& (0+255),b
  1803  00078A  EC01  F00C         	call	___wmul	;wreg free
  1804  00078E  0E03               	movlw	low (_tasks+3)
  1805  000790  0100               	movlb	0	; () banked
  1806  000792  2560               	addwf	?___wmul& (0+255),w,b
  1807  000794  6ED9               	movwf	fsr2l,c
  1808  000796  0E01               	movlw	high (_tasks+3)
  1809  000798  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  1810  00079A  6EDA               	movwf	fsr2h,c
  1811  00079C  CFDE F083          	movff	postinc2,??_register_timer+8
  1812  0007A0  CFDE F084          	movff	postinc2,??_register_timer+9
  1813  0007A4  CFDE F085          	movff	postinc2,??_register_timer+10
  1814  0007A8  CFDE F086          	movff	postinc2,??_register_timer+11
  1815  0007AC  CFDE F087          	movff	postinc2,??_register_timer+12
  1816  0007B0  CFDE F088          	movff	postinc2,??_register_timer+13
  1817  0007B4  CFDE F089          	movff	postinc2,??_register_timer+14
  1818  0007B8  CFDE F08A          	movff	postinc2,??_register_timer+15
  1819  0007BC  517B               	movf	??_register_timer& (0+255),w,b
  1820  0007BE  5D83               	subwf	(??_register_timer+8)& (0+255),w,b
  1821  0007C0  6F8B               	movwf	(??_register_timer+16)& (0+255),b
  1822  0007C2  517C               	movf	(??_register_timer+1)& (0+255),w,b
  1823  0007C4  5984               	subwfb	(??_register_timer+9)& (0+255),w,b
  1824  0007C6  6F8C               	movwf	(??_register_timer+17)& (0+255),b
  1825  0007C8  517D               	movf	(??_register_timer+2)& (0+255),w,b
  1826  0007CA  5985               	subwfb	(??_register_timer+10)& (0+255),w,b
  1827  0007CC  6F8D               	movwf	(??_register_timer+18)& (0+255),b
  1828  0007CE  517E               	movf	(??_register_timer+3)& (0+255),w,b
  1829  0007D0  5986               	subwfb	(??_register_timer+11)& (0+255),w,b
  1830  0007D2  6F8E               	movwf	(??_register_timer+19)& (0+255),b
  1831  0007D4  517F               	movf	(??_register_timer+4)& (0+255),w,b
  1832  0007D6  5987               	subwfb	(??_register_timer+12)& (0+255),w,b
  1833  0007D8  6F8F               	movwf	(??_register_timer+20)& (0+255),b
  1834  0007DA  5180               	movf	(??_register_timer+5)& (0+255),w,b
  1835  0007DC  5988               	subwfb	(??_register_timer+13)& (0+255),w,b
  1836  0007DE  6F90               	movwf	(??_register_timer+21)& (0+255),b
  1837  0007E0  5181               	movf	(??_register_timer+6)& (0+255),w,b
  1838  0007E2  5989               	subwfb	(??_register_timer+14)& (0+255),w,b
  1839  0007E4  6F91               	movwf	(??_register_timer+22)& (0+255),b
  1840  0007E6  5182               	movf	(??_register_timer+7)& (0+255),w,b
  1841  0007E8  598A               	subwfb	(??_register_timer+15)& (0+255),w,b
  1842  0007EA  6F92               	movwf	(??_register_timer+23)& (0+255),b
  1843  0007EC  C093  F060         	movff	_register_timer$1250,___wmul@multiplier
  1844  0007F0  C094  F061         	movff	_register_timer$1250+1,___wmul@multiplier+1
  1845  0007F4  0E00               	movlw	0
  1846  0007F6  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  1847  0007F8  0E17               	movlw	23
  1848  0007FA  6F62               	movwf	___wmul@multiplicand& (0+255),b
  1849  0007FC  EC01  F00C         	call	___wmul	;wreg free
  1850  000800  0E03               	movlw	low (_tasks+3)
  1851  000802  0100               	movlb	0	; () banked
  1852  000804  2560               	addwf	?___wmul& (0+255),w,b
  1853  000806  6ED9               	movwf	fsr2l,c
  1854  000808  0E01               	movlw	high (_tasks+3)
  1855  00080A  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  1856  00080C  6EDA               	movwf	fsr2h,c
  1857  00080E  C08B  FFDE         	movff	??_register_timer+16,postinc2
  1858  000812  C08C  FFDE         	movff	??_register_timer+17,postinc2
  1859  000816  C08D  FFDE         	movff	??_register_timer+18,postinc2
  1860  00081A  C08E  FFDE         	movff	??_register_timer+19,postinc2
  1861  00081E  C08F  FFDE         	movff	??_register_timer+20,postinc2
  1862  000822  C090  FFDE         	movff	??_register_timer+21,postinc2
  1863  000826  C091  FFDE         	movff	??_register_timer+22,postinc2
  1864  00082A  C092  FFDE         	movff	??_register_timer+23,postinc2
  1865  00082E                     
  1866                           ; BSR set to: 0
  1867                           ;driver.c: 94:             tasks[temp_index].next = NUMBER_EXIST;
  1868  00082E  C0A1  F060         	movff	register_timer@temp_index,___wmul@multiplier
  1869  000832  C0A2  F061         	movff	register_timer@temp_index+1,___wmul@multiplier+1
  1870  000836  0E00               	movlw	0
  1871  000838  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  1872  00083A  0E17               	movlw	23
  1873  00083C  6F62               	movwf	___wmul@multiplicand& (0+255),b
  1874  00083E  EC01  F00C         	call	___wmul	;wreg free
  1875  000842  0E15               	movlw	low (_tasks+21)
  1876  000844  0100               	movlb	0	; () banked
  1877  000846  2560               	addwf	?___wmul& (0+255),w,b
  1878  000848  6ED9               	movwf	fsr2l,c
  1879  00084A  0E01               	movlw	high (_tasks+21)
  1880  00084C  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  1881  00084E  6EDA               	movwf	fsr2h,c
  1882  000850  C0BF  FFDE         	movff	_NUMBER_EXIST,postinc2
  1883  000854  C0C0  FFDD         	movff	_NUMBER_EXIST+1,postdec2
  1884  000858  EFE2  F000         	goto	l1387
  1885  00085C                     l1429:
  1886                           
  1887                           ; BSR set to: 0
  1888                           ;driver.c: 97:         temp_index = tasks[temp_index].next;
  1889  00085C  C0A1  F060         	movff	register_timer@temp_index,___wmul@multiplier
  1890  000860  C0A2  F061         	movff	register_timer@temp_index+1,___wmul@multiplier+1
  1891  000864  0E00               	movlw	0
  1892  000866  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  1893  000868  0E17               	movlw	23
  1894  00086A  6F62               	movwf	___wmul@multiplicand& (0+255),b
  1895  00086C  EC01  F00C         	call	___wmul	;wreg free
  1896  000870  0E15               	movlw	low (_tasks+21)
  1897  000872  0100               	movlb	0	; () banked
  1898  000874  2560               	addwf	?___wmul& (0+255),w,b
  1899  000876  6ED9               	movwf	fsr2l,c
  1900  000878  0E01               	movlw	high (_tasks+21)
  1901  00087A  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  1902  00087C  6EDA               	movwf	fsr2h,c
  1903  00087E  CFDE F0A1          	movff	postinc2,register_timer@temp_index
  1904  000882  CFDD F0A2          	movff	postdec2,register_timer@temp_index+1
  1905  000886  EFE0  F001         	goto	l203
  1906  00088A                     l196:
  1907                           
  1908                           ; BSR set to: 0
  1909  00088A  0012               	return		;funcret
  1910  00088C                     __end_of_register_timer:
  1911                           	opt callstack 0
  1912                           
  1913 ;; *************** function _dispatch *****************
  1914 ;; Defined at:
  1915 ;;		line 149 in file "driver.c"
  1916 ;; Parameters:    Size  Location     Type
  1917 ;;		None
  1918 ;; Auto vars:     Size  Location     Type
  1919 ;;  i               2   12[BANK0 ] int 
  1920 ;; Return value:  Size  Location     Type
  1921 ;;                  1    wreg      void 
  1922 ;; Registers used:
  1923 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  1924 ;; Tracked objects:
  1925 ;;		On entry : 0/0
  1926 ;;		On exit  : 0/0
  1927 ;;		Unchanged: 0/0
  1928 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1929 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1930 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1931 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1932 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1933 ;;Total ram usage:        4 bytes
  1934 ;; Hardware stack levels used:    1
  1935 ;; Hardware stack levels required when called:    5
  1936 ;; This function calls:
  1937 ;;		___wmul
  1938 ;;		_blink_LED_1
  1939 ;;		_blink_LED_2
  1940 ;;		_blink_LED_3
  1941 ;; This function is called by:
  1942 ;;		_main
  1943 ;; This function uses a non-reentrant model
  1944 ;;
  1945                           
  1946                           	psect	text4
  1947  00141E                     __ptext4:
  1948                           	opt callstack 0
  1949  00141E                     _dispatch:
  1950                           	opt callstack 25
  1951  00141E                     
  1952                           ;driver.c: 150:     int i = 0;
  1953  00141E  0E00               	movlw	0
  1954  001420  0100               	movlb	0	; () banked
  1955  001422  6F6D               	movwf	(dispatch@i+1)& (0+255),b
  1956  001424  0E00               	movlw	0
  1957  001426  6F6C               	movwf	dispatch@i& (0+255),b
  1958                           
  1959                           ;driver.c: 151:     while(execution[i] > 0){
  1960  001428  EF83  F00A         	goto	l1535
  1961  00142C                     l1525:
  1962                           
  1963                           ; BSR set to: 0
  1964                           ;driver.c: 152:         (tasks[execution[i]-1].callback)(tasks[execution[i]-1].data);
  1965  00142C  90D8               	bcf	status,0,c
  1966  00142E  356C               	rlcf	dispatch@i& (0+255),w,b
  1967  001430  6ED9               	movwf	fsr2l,c
  1968  001432  356D               	rlcf	(dispatch@i+1)& (0+255),w,b
  1969  001434  6EDA               	movwf	fsr2h,c
  1970  001436  0EA7               	movlw	low _execution
  1971  001438  26D9               	addwf	fsr2l,f,c
  1972  00143A  0E00               	movlw	high _execution
  1973  00143C  22DA               	addwfc	fsr2h,f,c
  1974  00143E  CFDE F060          	movff	postinc2,___wmul@multiplier
  1975  001442  CFDD F061          	movff	postdec2,___wmul@multiplier+1
  1976  001446  0E00               	movlw	0
  1977  001448  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  1978  00144A  0E17               	movlw	23
  1979  00144C  6F62               	movwf	___wmul@multiplicand& (0+255),b
  1980  00144E  EC01  F00C         	call	___wmul	;wreg free
  1981  001452  0EFC               	movlw	low (_tasks+65532)
  1982  001454  0100               	movlb	0	; () banked
  1983  001456  2560               	addwf	?___wmul& (0+255),w,b
  1984  001458  6ED9               	movwf	fsr2l,c
  1985  00145A  0E00               	movlw	high (_tasks+65532)
  1986  00145C  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  1987  00145E  6EDA               	movwf	fsr2h,c
  1988  001460  CFDE F066          	movff	postinc2,blink_LED_3@index
  1989  001464  CFDD F067          	movff	postdec2,blink_LED_3@index+1
  1990  001468  90D8               	bcf	status,0,c
  1991  00146A  356C               	rlcf	dispatch@i& (0+255),w,b
  1992  00146C  6ED9               	movwf	fsr2l,c
  1993  00146E  356D               	rlcf	(dispatch@i+1)& (0+255),w,b
  1994  001470  6EDA               	movwf	fsr2h,c
  1995  001472  0EA7               	movlw	low _execution
  1996  001474  26D9               	addwf	fsr2l,f,c
  1997  001476  0E00               	movlw	high _execution
  1998  001478  22DA               	addwfc	fsr2h,f,c
  1999  00147A  CFDE F060          	movff	postinc2,___wmul@multiplier
  2000  00147E  CFDD F061          	movff	postdec2,___wmul@multiplier+1
  2001  001482  0E00               	movlw	0
  2002  001484  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  2003  001486  0E17               	movlw	23
  2004  001488  6F62               	movwf	___wmul@multiplicand& (0+255),b
  2005  00148A  EC01  F00C         	call	___wmul	;wreg free
  2006  00148E  0EE9               	movlw	low (_tasks+65513)
  2007  001490  0100               	movlb	0	; () banked
  2008  001492  2560               	addwf	?___wmul& (0+255),w,b
  2009  001494  6ED9               	movwf	fsr2l,c
  2010  001496  0E00               	movlw	high (_tasks+65513)
  2011  001498  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  2012  00149A  6EDA               	movwf	fsr2h,c
  2013  00149C  D802               	call	u508
  2014  00149E  EF5B  F00A         	goto	u509
  2015  0014A2                     u508:
  2016  0014A2  0005               	push	
  2017  0014A4  6EFA               	movwf	pclath,c
  2018  0014A6  50DE               	movf	postinc2,w,c
  2019  0014A8  6EFD               	movwf	tosl,c
  2020  0014AA  50DE               	movf	postinc2,w,c
  2021  0014AC  6EFE               	movwf	tosh,c
  2022  0014AE  50DE               	movf	postinc2,w,c
  2023  0014B0  6EFF               	movwf	tosu,c
  2024  0014B2  50FA               	movf	pclath,w,c
  2025  0014B4  0012               	return		;indir
  2026  0014B6                     u509:
  2027  0014B6                     
  2028                           ;driver.c: 153:         if (execution[i] == 1) remove_tasks ++;
  2029  0014B6  90D8               	bcf	status,0,c
  2030  0014B8  0100               	movlb	0	; () banked
  2031  0014BA  356C               	rlcf	dispatch@i& (0+255),w,b
  2032  0014BC  6ED9               	movwf	fsr2l,c
  2033  0014BE  356D               	rlcf	(dispatch@i+1)& (0+255),w,b
  2034  0014C0  6EDA               	movwf	fsr2h,c
  2035  0014C2  0EA7               	movlw	low _execution
  2036  0014C4  26D9               	addwf	fsr2l,f,c
  2037  0014C6  0E00               	movlw	high _execution
  2038  0014C8  22DA               	addwfc	fsr2h,f,c
  2039  0014CA  04DE               	decf	postinc2,w,c
  2040  0014CC  10DE               	iorwf	postinc2,w,c
  2041  0014CE  A4D8               	btfss	status,2,c
  2042  0014D0  EF6C  F00A         	goto	u511
  2043  0014D4  EF6E  F00A         	goto	u510
  2044  0014D8                     u511:
  2045  0014D8  EF70  F00A         	goto	l1531
  2046  0014DC                     u510:
  2047  0014DC                     
  2048                           ; BSR set to: 0
  2049  0014DC  4BC1               	infsnz	_remove_tasks& (0+255),f,b
  2050  0014DE  2BC2               	incf	(_remove_tasks+1)& (0+255),f,b
  2051  0014E0                     l1531:
  2052                           
  2053                           ; BSR set to: 0
  2054                           ;driver.c: 154:         execution[i] = 0;
  2055  0014E0  90D8               	bcf	status,0,c
  2056  0014E2  356C               	rlcf	dispatch@i& (0+255),w,b
  2057  0014E4  6ED9               	movwf	fsr2l,c
  2058  0014E6  356D               	rlcf	(dispatch@i+1)& (0+255),w,b
  2059  0014E8  6EDA               	movwf	fsr2h,c
  2060  0014EA  0EA7               	movlw	low _execution
  2061  0014EC  26D9               	addwf	fsr2l,f,c
  2062  0014EE  0E00               	movlw	high _execution
  2063  0014F0  22DA               	addwfc	fsr2h,f,c
  2064  0014F2  0E00               	movlw	0
  2065  0014F4  6EDE               	movwf	postinc2,c
  2066  0014F6  0E00               	movlw	0
  2067  0014F8  6EDD               	movwf	postdec2,c
  2068  0014FA                     
  2069                           ; BSR set to: 0
  2070                           ;driver.c: 155:         i = i + 1;
  2071  0014FA  0E01               	movlw	1
  2072  0014FC  256C               	addwf	dispatch@i& (0+255),w,b
  2073  0014FE  6F6C               	movwf	dispatch@i& (0+255),b
  2074  001500  0E00               	movlw	0
  2075  001502  216D               	addwfc	(dispatch@i+1)& (0+255),w,b
  2076  001504  6F6D               	movwf	(dispatch@i+1)& (0+255),b
  2077  001506                     l1535:
  2078                           
  2079                           ; BSR set to: 0
  2080                           ;driver.c: 151:     while(execution[i] > 0){
  2081  001506  90D8               	bcf	status,0,c
  2082  001508  356C               	rlcf	dispatch@i& (0+255),w,b
  2083  00150A  6ED9               	movwf	fsr2l,c
  2084  00150C  356D               	rlcf	(dispatch@i+1)& (0+255),w,b
  2085  00150E  6EDA               	movwf	fsr2h,c
  2086  001510  0EA7               	movlw	low _execution
  2087  001512  26D9               	addwf	fsr2l,f,c
  2088  001514  0E00               	movlw	high _execution
  2089  001516  22DA               	addwfc	fsr2h,f,c
  2090  001518  0E01               	movlw	1
  2091  00151A  BEDB               	btfsc	plusw2,7,c
  2092  00151C  EF9B  F00A         	goto	u520
  2093  001520  0E01               	movlw	1
  2094  001522  50DB               	movf	plusw2,w,c
  2095  001524  E106               	bnz	u521
  2096  001526  04DE               	decf	postinc2,w,c
  2097  001528  B0D8               	btfsc	status,0,c
  2098  00152A  EF99  F00A         	goto	u521
  2099  00152E  EF9B  F00A         	goto	u520
  2100  001532                     u521:
  2101  001532  EF16  F00A         	goto	l1525
  2102  001536                     u520:
  2103  001536                     
  2104                           ; BSR set to: 0
  2105  001536  0012               	return		;funcret
  2106  001538                     __end_of_dispatch:
  2107                           	opt callstack 0
  2108                           
  2109 ;; *************** function _blink_LED_2 *****************
  2110 ;; Defined at:
  2111 ;;		line 37 in file "register.c"
  2112 ;; Parameters:    Size  Location     Type
  2113 ;;  index           2    6[BANK0 ] int 
  2114 ;; Auto vars:     Size  Location     Type
  2115 ;;		None
  2116 ;; Return value:  Size  Location     Type
  2117 ;;                  1    wreg      void 
  2118 ;; Registers used:
  2119 ;;		wreg, status,2, status,0
  2120 ;; Tracked objects:
  2121 ;;		On entry : 0/0
  2122 ;;		On exit  : 0/0
  2123 ;;		Unchanged: 0/0
  2124 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2125 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2126 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2127 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2128 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2129 ;;Total ram usage:        4 bytes
  2130 ;; Hardware stack levels used:    1
  2131 ;; Hardware stack levels required when called:    4
  2132 ;; This function calls:
  2133 ;;		Nothing
  2134 ;; This function is called by:
  2135 ;;		_initial_register
  2136 ;;		_dispatch
  2137 ;; This function uses a non-reentrant model
  2138 ;;
  2139                           
  2140                           	psect	text5
  2141  001538                     __ptext5:
  2142                           	opt callstack 0
  2143  001538                     _blink_LED_2:
  2144                           	opt callstack 25
  2145  001538                     
  2146                           ;register.c: 38:     switch(index){
  2147  001538  EFC7  F00A         	goto	l1341
  2148  00153C                     l1335:
  2149                           
  2150                           ; BSR set to: 0
  2151                           ;register.c: 40:             LATDbits.LATD2 = ~LATDbits.LATD2;
  2152  00153C  B48C               	btfsc	140,2,c	;volatile
  2153  00153E  EFA3  F00A         	goto	u361
  2154  001542  EFA6  F00A         	goto	u360
  2155  001546                     u361:
  2156  001546  0E01               	movlw	1
  2157  001548  EFA7  F00A         	goto	u366
  2158  00154C                     u360:
  2159  00154C  0E00               	movlw	0
  2160  00154E                     u366:
  2161  00154E  0AFF               	xorlw	255
  2162  001550  6F68               	movwf	??_blink_LED_2& (0+255),b
  2163  001552  4768               	rlncf	??_blink_LED_2& (0+255),f,b
  2164  001554  4768               	rlncf	??_blink_LED_2& (0+255),f,b
  2165  001556  508C               	movf	140,w,c	;volatile
  2166  001558  1968               	xorwf	??_blink_LED_2& (0+255),w,b
  2167  00155A  0BFB               	andlw	-5
  2168  00155C  1968               	xorwf	??_blink_LED_2& (0+255),w,b
  2169  00155E  6E8C               	movwf	140,c	;volatile
  2170                           
  2171                           ;register.c: 41:             break;
  2172  001560  EFDE  F00A         	goto	l125
  2173  001564                     l1337:
  2174                           
  2175                           ; BSR set to: 0
  2176                           ;register.c: 43:             LATDbits.LATD3 = ~LATDbits.LATD3;
  2177  001564  B68C               	btfsc	140,3,c	;volatile
  2178  001566  EFB7  F00A         	goto	u371
  2179  00156A  EFBA  F00A         	goto	u370
  2180  00156E                     u371:
  2181  00156E  0E01               	movlw	1
  2182  001570  EFBB  F00A         	goto	u376
  2183  001574                     u370:
  2184  001574  0E00               	movlw	0
  2185  001576                     u376:
  2186  001576  0AFF               	xorlw	255
  2187  001578  6F68               	movwf	??_blink_LED_2& (0+255),b
  2188  00157A  4768               	rlncf	??_blink_LED_2& (0+255),f,b
  2189  00157C  4768               	rlncf	??_blink_LED_2& (0+255),f,b
  2190  00157E  4768               	rlncf	??_blink_LED_2& (0+255),f,b
  2191  001580  508C               	movf	140,w,c	;volatile
  2192  001582  1968               	xorwf	??_blink_LED_2& (0+255),w,b
  2193  001584  0BF7               	andlw	-9
  2194  001586  1968               	xorwf	??_blink_LED_2& (0+255),w,b
  2195  001588  6E8C               	movwf	140,c	;volatile
  2196                           
  2197                           ;register.c: 44:             break;
  2198  00158A  EFDE  F00A         	goto	l125
  2199  00158E                     l1341:
  2200  00158E  C066  F068         	movff	blink_LED_2@index,??_blink_LED_2
  2201  001592  C067  F069         	movff	blink_LED_2@index+1,??_blink_LED_2+1
  2202                           
  2203                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2204                           ; Switch size 1, requested type "simple"
  2205                           ; Number of cases is 1, Range of values is 0 to 0
  2206                           ; switch strategies available:
  2207                           ; Name         Instructions Cycles
  2208                           ; simple_byte            4     3 (average)
  2209                           ;	Chosen strategy is simple_byte
  2210  001596  0100               	movlb	0	; () banked
  2211  001598  5169               	movf	(??_blink_LED_2+1)& (0+255),w,b
  2212  00159A  0A00               	xorlw	0	; case 0
  2213  00159C  B4D8               	btfsc	status,2,c
  2214  00159E  EFD3  F00A         	goto	l1675
  2215  0015A2  EFDE  F00A         	goto	l125
  2216  0015A6                     l1675:
  2217                           
  2218                           ; BSR set to: 0
  2219                           ; Switch size 1, requested type "simple"
  2220                           ; Number of cases is 2, Range of values is 2 to 3
  2221                           ; switch strategies available:
  2222                           ; Name         Instructions Cycles
  2223                           ; simple_byte            7     4 (average)
  2224                           ;	Chosen strategy is simple_byte
  2225  0015A6  5168               	movf	??_blink_LED_2& (0+255),w,b
  2226  0015A8  0A02               	xorlw	2	; case 2
  2227  0015AA  B4D8               	btfsc	status,2,c
  2228  0015AC  EF9E  F00A         	goto	l1335
  2229  0015B0  0A01               	xorlw	1	; case 3
  2230  0015B2  B4D8               	btfsc	status,2,c
  2231  0015B4  EFB2  F00A         	goto	l1337
  2232  0015B8  EFDE  F00A         	goto	l125
  2233  0015BC                     l125:
  2234                           
  2235                           ; BSR set to: 0
  2236  0015BC  0012               	return		;funcret
  2237  0015BE                     __end_of_blink_LED_2:
  2238                           	opt callstack 0
  2239                           
  2240 ;; *************** function _blink_LED_1 *****************
  2241 ;; Defined at:
  2242 ;;		line 26 in file "register.c"
  2243 ;; Parameters:    Size  Location     Type
  2244 ;;  index           2    6[BANK0 ] int 
  2245 ;; Auto vars:     Size  Location     Type
  2246 ;;		None
  2247 ;; Return value:  Size  Location     Type
  2248 ;;                  1    wreg      void 
  2249 ;; Registers used:
  2250 ;;		wreg, status,2, status,0
  2251 ;; Tracked objects:
  2252 ;;		On entry : 0/0
  2253 ;;		On exit  : 0/0
  2254 ;;		Unchanged: 0/0
  2255 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2256 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2257 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2258 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2259 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2260 ;;Total ram usage:        4 bytes
  2261 ;; Hardware stack levels used:    1
  2262 ;; Hardware stack levels required when called:    4
  2263 ;; This function calls:
  2264 ;;		Nothing
  2265 ;; This function is called by:
  2266 ;;		_initial_register
  2267 ;;		_dispatch
  2268 ;; This function uses a non-reentrant model
  2269 ;;
  2270                           
  2271                           	psect	text6
  2272  001644                     __ptext6:
  2273                           	opt callstack 0
  2274  001644                     _blink_LED_1:
  2275                           	opt callstack 25
  2276  001644                     
  2277                           ;register.c: 27:     switch(index){
  2278  001644  EF49  F00B         	goto	l1327
  2279  001648                     l1321:
  2280                           
  2281                           ; BSR set to: 0
  2282                           ;register.c: 29:             LATDbits.LATD0 = ~LATDbits.LATD0;
  2283  001648  B08C               	btfsc	140,0,c	;volatile
  2284  00164A  EF29  F00B         	goto	u341
  2285  00164E  EF2C  F00B         	goto	u340
  2286  001652                     u341:
  2287  001652  0E01               	movlw	1
  2288  001654  EF2D  F00B         	goto	u346
  2289  001658                     u340:
  2290  001658  0E00               	movlw	0
  2291  00165A                     u346:
  2292  00165A  0AFF               	xorlw	255
  2293  00165C  6F68               	movwf	??_blink_LED_1& (0+255),b
  2294  00165E  508C               	movf	140,w,c	;volatile
  2295  001660  1968               	xorwf	??_blink_LED_1& (0+255),w,b
  2296  001662  0BFE               	andlw	-2
  2297  001664  1968               	xorwf	??_blink_LED_1& (0+255),w,b
  2298  001666  6E8C               	movwf	140,c	;volatile
  2299                           
  2300                           ;register.c: 30:             break;
  2301  001668  EF60  F00B         	goto	l118
  2302  00166C                     l1323:
  2303                           
  2304                           ; BSR set to: 0
  2305                           ;register.c: 32:             LATDbits.LATD1 = ~LATDbits.LATD1;
  2306  00166C  B28C               	btfsc	140,1,c	;volatile
  2307  00166E  EF3B  F00B         	goto	u351
  2308  001672  EF3E  F00B         	goto	u350
  2309  001676                     u351:
  2310  001676  0E01               	movlw	1
  2311  001678  EF3F  F00B         	goto	u356
  2312  00167C                     u350:
  2313  00167C  0E00               	movlw	0
  2314  00167E                     u356:
  2315  00167E  0AFF               	xorlw	255
  2316  001680  6F68               	movwf	??_blink_LED_1& (0+255),b
  2317  001682  4768               	rlncf	??_blink_LED_1& (0+255),f,b
  2318  001684  508C               	movf	140,w,c	;volatile
  2319  001686  1968               	xorwf	??_blink_LED_1& (0+255),w,b
  2320  001688  0BFD               	andlw	-3
  2321  00168A  1968               	xorwf	??_blink_LED_1& (0+255),w,b
  2322  00168C  6E8C               	movwf	140,c	;volatile
  2323                           
  2324                           ;register.c: 33:             break;
  2325  00168E  EF60  F00B         	goto	l118
  2326  001692                     l1327:
  2327  001692  C066  F068         	movff	blink_LED_1@index,??_blink_LED_1
  2328  001696  C067  F069         	movff	blink_LED_1@index+1,??_blink_LED_1+1
  2329                           
  2330                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2331                           ; Switch size 1, requested type "simple"
  2332                           ; Number of cases is 1, Range of values is 0 to 0
  2333                           ; switch strategies available:
  2334                           ; Name         Instructions Cycles
  2335                           ; simple_byte            4     3 (average)
  2336                           ;	Chosen strategy is simple_byte
  2337  00169A  0100               	movlb	0	; () banked
  2338  00169C  5169               	movf	(??_blink_LED_1+1)& (0+255),w,b
  2339  00169E  0A00               	xorlw	0	; case 0
  2340  0016A0  B4D8               	btfsc	status,2,c
  2341  0016A2  EF55  F00B         	goto	l1677
  2342  0016A6  EF60  F00B         	goto	l118
  2343  0016AA                     l1677:
  2344                           
  2345                           ; BSR set to: 0
  2346                           ; Switch size 1, requested type "simple"
  2347                           ; Number of cases is 2, Range of values is 0 to 1
  2348                           ; switch strategies available:
  2349                           ; Name         Instructions Cycles
  2350                           ; simple_byte            7     4 (average)
  2351                           ;	Chosen strategy is simple_byte
  2352  0016AA  5168               	movf	??_blink_LED_1& (0+255),w,b
  2353  0016AC  0A00               	xorlw	0	; case 0
  2354  0016AE  B4D8               	btfsc	status,2,c
  2355  0016B0  EF24  F00B         	goto	l1321
  2356  0016B4  0A01               	xorlw	1	; case 1
  2357  0016B6  B4D8               	btfsc	status,2,c
  2358  0016B8  EF36  F00B         	goto	l1323
  2359  0016BC  EF60  F00B         	goto	l118
  2360  0016C0                     l118:
  2361                           
  2362                           ; BSR set to: 0
  2363  0016C0  0012               	return		;funcret
  2364  0016C2                     __end_of_blink_LED_1:
  2365                           	opt callstack 0
  2366                           
  2367 ;; *************** function _blink_LED_3 *****************
  2368 ;; Defined at:
  2369 ;;		line 48 in file "register.c"
  2370 ;; Parameters:    Size  Location     Type
  2371 ;;  index           2    6[BANK0 ] int 
  2372 ;; Auto vars:     Size  Location     Type
  2373 ;;		None
  2374 ;; Return value:  Size  Location     Type
  2375 ;;                  1    wreg      void 
  2376 ;; Registers used:
  2377 ;;		wreg, status,2, status,0
  2378 ;; Tracked objects:
  2379 ;;		On entry : 0/0
  2380 ;;		On exit  : 0/0
  2381 ;;		Unchanged: 0/0
  2382 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2383 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2384 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2385 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2386 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2387 ;;Total ram usage:        4 bytes
  2388 ;; Hardware stack levels used:    1
  2389 ;; Hardware stack levels required when called:    4
  2390 ;; This function calls:
  2391 ;;		Nothing
  2392 ;; This function is called by:
  2393 ;;		_initial_register
  2394 ;;		_dispatch
  2395 ;; This function uses a non-reentrant model
  2396 ;;
  2397                           
  2398                           	psect	text7
  2399  0015BE                     __ptext7:
  2400                           	opt callstack 0
  2401  0015BE                     _blink_LED_3:
  2402                           	opt callstack 25
  2403  0015BE                     
  2404                           ;register.c: 49:     switch(index){
  2405  0015BE  EF0A  F00B         	goto	l1355
  2406  0015C2                     l1349:
  2407                           
  2408                           ; BSR set to: 0
  2409                           ;register.c: 51:             LATDbits.LATD6 = ~LATDbits.LATD6;
  2410  0015C2  BC8C               	btfsc	140,6,c	;volatile
  2411  0015C4  EFE6  F00A         	goto	u381
  2412  0015C8  EFE9  F00A         	goto	u380
  2413  0015CC                     u381:
  2414  0015CC  0E01               	movlw	1
  2415  0015CE  EFEA  F00A         	goto	u386
  2416  0015D2                     u380:
  2417  0015D2  0E00               	movlw	0
  2418  0015D4                     u386:
  2419  0015D4  0AFF               	xorlw	255
  2420  0015D6  6F68               	movwf	??_blink_LED_3& (0+255),b
  2421  0015D8  3B68               	swapf	??_blink_LED_3& (0+255),f,b
  2422  0015DA  4768               	rlncf	??_blink_LED_3& (0+255),f,b
  2423  0015DC  4768               	rlncf	??_blink_LED_3& (0+255),f,b
  2424  0015DE  508C               	movf	140,w,c	;volatile
  2425  0015E0  1968               	xorwf	??_blink_LED_3& (0+255),w,b
  2426  0015E2  0BBF               	andlw	-65
  2427  0015E4  1968               	xorwf	??_blink_LED_3& (0+255),w,b
  2428  0015E6  6E8C               	movwf	140,c	;volatile
  2429                           
  2430                           ;register.c: 52:             break;
  2431  0015E8  EF21  F00B         	goto	l132
  2432  0015EC                     l1351:
  2433                           
  2434                           ; BSR set to: 0
  2435                           ;register.c: 54:             LATDbits.LATD7 = ~LATDbits.LATD7;
  2436  0015EC  BE8C               	btfsc	140,7,c	;volatile
  2437  0015EE  EFFB  F00A         	goto	u391
  2438  0015F2  EFFE  F00A         	goto	u390
  2439  0015F6                     u391:
  2440  0015F6  0E01               	movlw	1
  2441  0015F8  EFFF  F00A         	goto	u396
  2442  0015FC                     u390:
  2443  0015FC  0E00               	movlw	0
  2444  0015FE                     u396:
  2445  0015FE  0AFF               	xorlw	255
  2446  001600  6F68               	movwf	??_blink_LED_3& (0+255),b
  2447  001602  3368               	rrcf	??_blink_LED_3& (0+255),f,b
  2448  001604  3368               	rrcf	??_blink_LED_3& (0+255),f,b
  2449  001606  508C               	movf	140,w,c	;volatile
  2450  001608  1968               	xorwf	??_blink_LED_3& (0+255),w,b
  2451  00160A  0B7F               	andlw	-129
  2452  00160C  1968               	xorwf	??_blink_LED_3& (0+255),w,b
  2453  00160E  6E8C               	movwf	140,c	;volatile
  2454                           
  2455                           ;register.c: 55:             break;
  2456  001610  EF21  F00B         	goto	l132
  2457  001614                     l1355:
  2458  001614  C066  F068         	movff	blink_LED_3@index,??_blink_LED_3
  2459  001618  C067  F069         	movff	blink_LED_3@index+1,??_blink_LED_3+1
  2460                           
  2461                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2462                           ; Switch size 1, requested type "simple"
  2463                           ; Number of cases is 1, Range of values is 0 to 0
  2464                           ; switch strategies available:
  2465                           ; Name         Instructions Cycles
  2466                           ; simple_byte            4     3 (average)
  2467                           ;	Chosen strategy is simple_byte
  2468  00161C  0100               	movlb	0	; () banked
  2469  00161E  5169               	movf	(??_blink_LED_3+1)& (0+255),w,b
  2470  001620  0A00               	xorlw	0	; case 0
  2471  001622  B4D8               	btfsc	status,2,c
  2472  001624  EF16  F00B         	goto	l1679
  2473  001628  EF21  F00B         	goto	l132
  2474  00162C                     l1679:
  2475                           
  2476                           ; BSR set to: 0
  2477                           ; Switch size 1, requested type "simple"
  2478                           ; Number of cases is 2, Range of values is 4 to 5
  2479                           ; switch strategies available:
  2480                           ; Name         Instructions Cycles
  2481                           ; simple_byte            7     4 (average)
  2482                           ;	Chosen strategy is simple_byte
  2483  00162C  5168               	movf	??_blink_LED_3& (0+255),w,b
  2484  00162E  0A04               	xorlw	4	; case 4
  2485  001630  B4D8               	btfsc	status,2,c
  2486  001632  EFE1  F00A         	goto	l1349
  2487  001636  0A01               	xorlw	1	; case 5
  2488  001638  B4D8               	btfsc	status,2,c
  2489  00163A  EFF6  F00A         	goto	l1351
  2490  00163E  EF21  F00B         	goto	l132
  2491  001642                     l132:
  2492                           
  2493                           ; BSR set to: 0
  2494  001642  0012               	return		;funcret
  2495  001644                     __end_of_blink_LED_3:
  2496                           	opt callstack 0
  2497                           
  2498 ;; *************** function ___wmul *****************
  2499 ;; Defined at:
  2500 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\Umul16.c"
  2501 ;; Parameters:    Size  Location     Type
  2502 ;;  multiplier      2    0[BANK0 ] unsigned int 
  2503 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  2504 ;; Auto vars:     Size  Location     Type
  2505 ;;  product         2    4[BANK0 ] unsigned int 
  2506 ;; Return value:  Size  Location     Type
  2507 ;;                  2    0[BANK0 ] unsigned int 
  2508 ;; Registers used:
  2509 ;;		wreg, status,2, status,0, prodl, prodh
  2510 ;; Tracked objects:
  2511 ;;		On entry : 0/0
  2512 ;;		On exit  : 0/0
  2513 ;;		Unchanged: 0/0
  2514 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2515 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2516 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2517 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2518 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2519 ;;Total ram usage:        6 bytes
  2520 ;; Hardware stack levels used:    1
  2521 ;; Hardware stack levels required when called:    4
  2522 ;; This function calls:
  2523 ;;		Nothing
  2524 ;; This function is called by:
  2525 ;;		_register_timer
  2526 ;;		_dispatch
  2527 ;;		_remove_timer
  2528 ;; This function uses a non-reentrant model
  2529 ;;
  2530                           
  2531                           	psect	text8
  2532  001802                     __ptext8:
  2533                           	opt callstack 0
  2534  001802                     ___wmul:
  2535                           	opt callstack 24
  2536  001802  0100               	movlb	0	; () banked
  2537  001804  5160               	movf	___wmul@multiplier& (0+255),w,b
  2538  001806  0362               	mulwf	___wmul@multiplicand& (0+255),b
  2539  001808  CFF3 F064          	movff	prodl,___wmul@product
  2540  00180C  CFF4 F065          	movff	prodh,___wmul@product+1
  2541  001810  5160               	movf	___wmul@multiplier& (0+255),w,b
  2542  001812  0363               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  2543  001814  50F3               	movf	243,w,c
  2544  001816  2765               	addwf	(___wmul@product+1)& (0+255),f,b
  2545  001818  5161               	movf	(___wmul@multiplier+1)& (0+255),w,b
  2546  00181A  0362               	mulwf	___wmul@multiplicand& (0+255),b
  2547  00181C  50F3               	movf	243,w,c
  2548  00181E  2765               	addwf	(___wmul@product+1)& (0+255),f,b
  2549  001820                     
  2550                           ; BSR set to: 0
  2551  001820  C064  F060         	movff	___wmul@product,?___wmul
  2552  001824  C065  F061         	movff	___wmul@product+1,?___wmul+1
  2553  001828                     
  2554                           ; BSR set to: 0
  2555  001828  0012               	return		;funcret
  2556  00182A                     __end_of___wmul:
  2557                           	opt callstack 0
  2558                           
  2559 ;; *************** function _main_interrupt *****************
  2560 ;; Defined at:
  2561 ;;		line 15 in file "main.c"
  2562 ;; Parameters:    Size  Location     Type
  2563 ;;		None
  2564 ;; Auto vars:     Size  Location     Type
  2565 ;;  temp            2    0        int 
  2566 ;; Return value:  Size  Location     Type
  2567 ;;                  1    wreg      void 
  2568 ;; Registers used:
  2569 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2570 ;; Tracked objects:
  2571 ;;		On entry : 0/0
  2572 ;;		On exit  : 0/0
  2573 ;;		Unchanged: 0/0
  2574 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2575 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2576 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2577 ;;      Temps:          6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2578 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2579 ;;Total ram usage:        8 bytes
  2580 ;; Hardware stack levels used:    1
  2581 ;; Hardware stack levels required when called:    3
  2582 ;; This function calls:
  2583 ;;		_timer_ISR
  2584 ;; This function is called by:
  2585 ;;		Interrupt level 2
  2586 ;; This function uses a non-reentrant model
  2587 ;;
  2588                           
  2589                           	psect	intcode
  2590  000008                     __pintcode:
  2591                           	opt callstack 0
  2592  000008                     _main_interrupt:
  2593                           	opt callstack 24
  2594                           
  2595                           ; BSR set to: 0
  2596                           ;incstack = 0
  2597  000008  8252               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  2598  00000A  ED9F  F00B         	call	int_func,f	;refresh shadow registers
  2599                           
  2600                           	psect	intcode_body
  2601  00173E                     __pintcode_body:
  2602                           	opt callstack 24
  2603  00173E                     int_func:
  2604                           	opt callstack 24
  2605  00173E  0006               	pop		; remove dummy address from shadow register refresh
  2606  001740  CFE1 F03D          	movff	fsr1l,??_main_interrupt
  2607  001744  CFE2 F03E          	movff	fsr1h,??_main_interrupt+1
  2608  001748  CFD9 F03F          	movff	fsr2l,??_main_interrupt+2
  2609  00174C  CFDA F040          	movff	fsr2h,??_main_interrupt+3
  2610  001750  CFF3 F041          	movff	prodl,??_main_interrupt+4
  2611  001754  CFF4 F042          	movff	prodh,??_main_interrupt+5
  2612  001758                     
  2613                           ;main.c: 16:     if (INTCONbits.TMR0IE && INTCONbits.TMR0IF){
  2614  001758  AAF2               	btfss	242,5,c	;volatile
  2615  00175A  EFB1  F00B         	goto	i2u53_41
  2616  00175E  EFB3  F00B         	goto	i2u53_40
  2617  001762                     i2u53_41:
  2618  001762  EFC7  F00B         	goto	i2l45
  2619  001766                     i2u53_40:
  2620  001766  A4F2               	btfss	242,2,c	;volatile
  2621  001768  EFB8  F00B         	goto	i2u54_41
  2622  00176C  EFBA  F00B         	goto	i2u54_40
  2623  001770                     i2u54_41:
  2624  001770  EFC7  F00B         	goto	i2l45
  2625  001774                     i2u54_40:
  2626  001774                     
  2627                           ;main.c: 18:         count_count ++;
  2628  001774  4A4D               	infsnz	_count_count^0,f,c
  2629  001776  2A4E               	incf	(_count_count+1)^0,f,c
  2630  001778                     
  2631                           ;main.c: 19:         if (ALLOW_TIMER_REGISTER == 1){
  2632  001778  0451               	decf	_ALLOW_TIMER_REGISTER^0,w,c
  2633  00177A  A4D8               	btfss	status,2,c
  2634  00177C  EFC2  F00B         	goto	i2u55_41
  2635  001780  EFC4  F00B         	goto	i2u55_40
  2636  001784                     i2u55_41:
  2637  001784  EFC6  F00B         	goto	i2l1547
  2638  001788                     i2u55_40:
  2639  001788  EC66  F009         	call	_timer_ISR	;wreg free
  2640  00178C                     i2l1547:
  2641                           
  2642                           ;main.c: 22:         INTCONbits.TMR0IF = 0;
  2643  00178C  94F2               	bcf	242,2,c	;volatile
  2644  00178E                     i2l45:
  2645  00178E  C042  FFF4         	movff	??_main_interrupt+5,prodh
  2646  001792  C041  FFF3         	movff	??_main_interrupt+4,prodl
  2647  001796  C040  FFDA         	movff	??_main_interrupt+3,fsr2h
  2648  00179A  C03F  FFD9         	movff	??_main_interrupt+2,fsr2l
  2649  00179E  C03E  FFE2         	movff	??_main_interrupt+1,fsr1h
  2650  0017A2  C03D  FFE1         	movff	??_main_interrupt,fsr1l
  2651  0017A6  9252               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  2652  0017A8  0011               	retfie		f
  2653  0017AA                     __end_of_main_interrupt:
  2654                           	opt callstack 0
  2655                           
  2656 ;; *************** function _timer_ISR *****************
  2657 ;; Defined at:
  2658 ;;		line 137 in file "driver.c"
  2659 ;; Parameters:    Size  Location     Type
  2660 ;;		None
  2661 ;; Auto vars:     Size  Location     Type
  2662 ;;  temp            2   56[COMRAM] int 
  2663 ;;  i               2   58[COMRAM] int 
  2664 ;; Return value:  Size  Location     Type
  2665 ;;                  2   46[COMRAM] int 
  2666 ;; Registers used:
  2667 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2668 ;; Tracked objects:
  2669 ;;		On entry : 0/0
  2670 ;;		On exit  : 0/0
  2671 ;;		Unchanged: 0/0
  2672 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2673 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2674 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2675 ;;      Temps:          8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2676 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2677 ;;Total ram usage:       14 bytes
  2678 ;; Hardware stack levels used:    1
  2679 ;; Hardware stack levels required when called:    2
  2680 ;; This function calls:
  2681 ;;		_add_tasks
  2682 ;;		i2___wmul
  2683 ;; This function is called by:
  2684 ;;		_main_interrupt
  2685 ;; This function uses a non-reentrant model
  2686 ;;
  2687                           
  2688                           	psect	text10
  2689  0012CC                     __ptext10:
  2690                           	opt callstack 0
  2691  0012CC                     _timer_ISR:
  2692                           	opt callstack 24
  2693  0012CC                     
  2694                           ;driver.c: 138:     tasks[HEAD_QUEUE].delay = tasks[HEAD_QUEUE].delay - 10;
  2695  0012CC  C0BB  F001         	movff	_HEAD_QUEUE,i2___wmul@multiplier
  2696  0012D0  C0BC  F002         	movff	_HEAD_QUEUE+1,i2___wmul@multiplier+1
  2697  0012D4  0E00               	movlw	0
  2698  0012D6  6E04               	movwf	(i2___wmul@multiplicand+1)^0,c
  2699  0012D8  0E17               	movlw	23
  2700  0012DA  6E03               	movwf	i2___wmul@multiplicand^0,c
  2701  0012DC  EC15  F00C         	call	i2___wmul	;wreg free
  2702  0012E0  0E03               	movlw	low (_tasks+3)
  2703  0012E2  2401               	addwf	?i2___wmul^0,w,c
  2704  0012E4  6ED9               	movwf	fsr2l,c
  2705  0012E6  0E01               	movlw	high (_tasks+3)
  2706  0012E8  2002               	addwfc	(?i2___wmul+1)^0,w,c
  2707  0012EA  6EDA               	movwf	fsr2h,c
  2708  0012EC  0EF6               	movlw	246
  2709  0012EE  24DE               	addwf	postinc2,w,c
  2710  0012F0  6E31               	movwf	??_timer_ISR^0,c
  2711  0012F2  0EFF               	movlw	255
  2712  0012F4  20DE               	addwfc	postinc2,w,c
  2713  0012F6  6E32               	movwf	(??_timer_ISR+1)^0,c
  2714  0012F8  0EFF               	movlw	255
  2715  0012FA  20DE               	addwfc	postinc2,w,c
  2716  0012FC  6E33               	movwf	(??_timer_ISR+2)^0,c
  2717  0012FE  0EFF               	movlw	255
  2718  001300  20DE               	addwfc	postinc2,w,c
  2719  001302  6E34               	movwf	(??_timer_ISR+3)^0,c
  2720  001304  0EFF               	movlw	255
  2721  001306  20DE               	addwfc	postinc2,w,c
  2722  001308  6E35               	movwf	(??_timer_ISR+4)^0,c
  2723  00130A  0EFF               	movlw	255
  2724  00130C  20DE               	addwfc	postinc2,w,c
  2725  00130E  6E36               	movwf	(??_timer_ISR+5)^0,c
  2726  001310  0EFF               	movlw	255
  2727  001312  20DE               	addwfc	postinc2,w,c
  2728  001314  6E37               	movwf	(??_timer_ISR+6)^0,c
  2729  001316  0EFF               	movlw	255
  2730  001318  20DE               	addwfc	postinc2,w,c
  2731  00131A  6E38               	movwf	(??_timer_ISR+7)^0,c
  2732  00131C  C0BB  F001         	movff	_HEAD_QUEUE,i2___wmul@multiplier
  2733  001320  C0BC  F002         	movff	_HEAD_QUEUE+1,i2___wmul@multiplier+1
  2734  001324  0E00               	movlw	0
  2735  001326  6E04               	movwf	(i2___wmul@multiplicand+1)^0,c
  2736  001328  0E17               	movlw	23
  2737  00132A  6E03               	movwf	i2___wmul@multiplicand^0,c
  2738  00132C  EC15  F00C         	call	i2___wmul	;wreg free
  2739  001330  0E03               	movlw	low (_tasks+3)
  2740  001332  2401               	addwf	?i2___wmul^0,w,c
  2741  001334  6ED9               	movwf	fsr2l,c
  2742  001336  0E01               	movlw	high (_tasks+3)
  2743  001338  2002               	addwfc	(?i2___wmul+1)^0,w,c
  2744  00133A  6EDA               	movwf	fsr2h,c
  2745  00133C  C031  FFDE         	movff	??_timer_ISR,postinc2
  2746  001340  C032  FFDE         	movff	??_timer_ISR+1,postinc2
  2747  001344  C033  FFDE         	movff	??_timer_ISR+2,postinc2
  2748  001348  C034  FFDE         	movff	??_timer_ISR+3,postinc2
  2749  00134C  C035  FFDE         	movff	??_timer_ISR+4,postinc2
  2750  001350  C036  FFDE         	movff	??_timer_ISR+5,postinc2
  2751  001354  C037  FFDE         	movff	??_timer_ISR+6,postinc2
  2752  001358  C038  FFDE         	movff	??_timer_ISR+7,postinc2
  2753  00135C                     
  2754                           ;driver.c: 139:     int i = 0;
  2755  00135C  0E00               	movlw	0
  2756  00135E  6E3C               	movwf	(timer_ISR@i+1)^0,c
  2757  001360  0E00               	movlw	0
  2758  001362  6E3B               	movwf	timer_ISR@i^0,c
  2759                           
  2760                           ;driver.c: 140:     while (tasks[HEAD_QUEUE].delay == 0) {
  2761  001364  EFEB  F009         	goto	i2l1481
  2762  001368                     i2l223:
  2763                           
  2764                           ;driver.c: 141:         int temp = HEAD_QUEUE;
  2765  001368  C0BB  F039         	movff	_HEAD_QUEUE,timer_ISR@temp
  2766  00136C  C0BC  F03A         	movff	_HEAD_QUEUE+1,timer_ISR@temp+1
  2767  001370                     
  2768                           ;driver.c: 142:         HEAD_QUEUE = tasks[HEAD_QUEUE].next;
  2769  001370  C0BB  F001         	movff	_HEAD_QUEUE,i2___wmul@multiplier
  2770  001374  C0BC  F002         	movff	_HEAD_QUEUE+1,i2___wmul@multiplier+1
  2771  001378  0E00               	movlw	0
  2772  00137A  6E04               	movwf	(i2___wmul@multiplicand+1)^0,c
  2773  00137C  0E17               	movlw	23
  2774  00137E  6E03               	movwf	i2___wmul@multiplicand^0,c
  2775  001380  EC15  F00C         	call	i2___wmul	;wreg free
  2776  001384  0E15               	movlw	low (_tasks+21)
  2777  001386  2401               	addwf	?i2___wmul^0,w,c
  2778  001388  6ED9               	movwf	fsr2l,c
  2779  00138A  0E01               	movlw	high (_tasks+21)
  2780  00138C  2002               	addwfc	(?i2___wmul+1)^0,w,c
  2781  00138E  6EDA               	movwf	fsr2h,c
  2782  001390  CFDE F0BB          	movff	postinc2,_HEAD_QUEUE
  2783  001394  CFDD F0BC          	movff	postdec2,_HEAD_QUEUE+1
  2784  001398                     
  2785                           ;driver.c: 143:         execution[i] = temp+1;
  2786  001398  0E01               	movlw	1
  2787  00139A  2439               	addwf	timer_ISR@temp^0,w,c
  2788  00139C  6E31               	movwf	??_timer_ISR^0,c
  2789  00139E  0E00               	movlw	0
  2790  0013A0  203A               	addwfc	(timer_ISR@temp+1)^0,w,c
  2791  0013A2  6E32               	movwf	(??_timer_ISR+1)^0,c
  2792  0013A4  90D8               	bcf	status,0,c
  2793  0013A6  343B               	rlcf	timer_ISR@i^0,w,c
  2794  0013A8  6ED9               	movwf	fsr2l,c
  2795  0013AA  343C               	rlcf	(timer_ISR@i+1)^0,w,c
  2796  0013AC  6EDA               	movwf	fsr2h,c
  2797  0013AE  0EA7               	movlw	low _execution
  2798  0013B0  26D9               	addwf	fsr2l,f,c
  2799  0013B2  0E00               	movlw	high _execution
  2800  0013B4  22DA               	addwfc	fsr2h,f,c
  2801  0013B6  C031  FFDE         	movff	??_timer_ISR,postinc2
  2802  0013BA  C032  FFDD         	movff	??_timer_ISR+1,postdec2
  2803  0013BE                     
  2804                           ;driver.c: 144:         add_tasks(temp);
  2805  0013BE  C039  F007         	movff	timer_ISR@temp,add_tasks@id
  2806  0013C2  C03A  F008         	movff	timer_ISR@temp+1,add_tasks@id+1
  2807  0013C6  EC46  F004         	call	_add_tasks	;wreg free
  2808  0013CA                     
  2809                           ;driver.c: 145:         i = i + 1;
  2810  0013CA  0E01               	movlw	1
  2811  0013CC  243B               	addwf	timer_ISR@i^0,w,c
  2812  0013CE  6E3B               	movwf	timer_ISR@i^0,c
  2813  0013D0  0E00               	movlw	0
  2814  0013D2  203C               	addwfc	(timer_ISR@i+1)^0,w,c
  2815  0013D4  6E3C               	movwf	(timer_ISR@i+1)^0,c
  2816  0013D6                     i2l1481:
  2817                           
  2818                           ;driver.c: 140:     while (tasks[HEAD_QUEUE].delay == 0) {
  2819  0013D6  C0BB  F001         	movff	_HEAD_QUEUE,i2___wmul@multiplier
  2820  0013DA  C0BC  F002         	movff	_HEAD_QUEUE+1,i2___wmul@multiplier+1
  2821  0013DE  0E00               	movlw	0
  2822  0013E0  6E04               	movwf	(i2___wmul@multiplicand+1)^0,c
  2823  0013E2  0E17               	movlw	23
  2824  0013E4  6E03               	movwf	i2___wmul@multiplicand^0,c
  2825  0013E6  EC15  F00C         	call	i2___wmul	;wreg free
  2826  0013EA  0E03               	movlw	low (_tasks+3)
  2827  0013EC  2401               	addwf	?i2___wmul^0,w,c
  2828  0013EE  6ED9               	movwf	fsr2l,c
  2829  0013F0  0E01               	movlw	high (_tasks+3)
  2830  0013F2  2002               	addwfc	(?i2___wmul+1)^0,w,c
  2831  0013F4  6EDA               	movwf	fsr2h,c
  2832  0013F6  50DE               	movf	postinc2,w,c
  2833  0013F8  10DE               	iorwf	postinc2,w,c
  2834  0013FA  10DE               	iorwf	postinc2,w,c
  2835  0013FC  10DE               	iorwf	postinc2,w,c
  2836  0013FE  10DE               	iorwf	postinc2,w,c
  2837  001400  10DE               	iorwf	postinc2,w,c
  2838  001402  10DE               	iorwf	postinc2,w,c
  2839  001404  10DE               	iorwf	postinc2,w,c
  2840  001406  B4D8               	btfsc	status,2,c
  2841  001408  EF08  F00A         	goto	i2u49_41
  2842  00140C  EF0A  F00A         	goto	i2u49_40
  2843  001410                     i2u49_41:
  2844  001410  EFB4  F009         	goto	i2l223
  2845  001414                     i2u49_40:
  2846  001414                     
  2847                           ;driver.c: 147:     return 1;
  2848  001414  0E00               	movlw	0
  2849  001416  6E30               	movwf	(?_timer_ISR+1)^0,c
  2850  001418  0E01               	movlw	1
  2851  00141A  6E2F               	movwf	?_timer_ISR^0,c
  2852  00141C  0012               	return		;funcret
  2853  00141E                     __end_of_timer_ISR:
  2854                           	opt callstack 0
  2855                           
  2856 ;; *************** function _add_tasks *****************
  2857 ;; Defined at:
  2858 ;;		line 159 in file "driver.c"
  2859 ;; Parameters:    Size  Location     Type
  2860 ;;  id              2    6[COMRAM] int 
  2861 ;; Auto vars:     Size  Location     Type
  2862 ;;  temp_delay      8   36[COMRAM] unsigned long long 
  2863 ;;  temp_next       2   44[COMRAM] int 
  2864 ;; Return value:  Size  Location     Type
  2865 ;;                  1    wreg      void 
  2866 ;; Registers used:
  2867 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2868 ;; Tracked objects:
  2869 ;;		On entry : 0/0
  2870 ;;		On exit  : 0/0
  2871 ;;		Unchanged: 0/0
  2872 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2873 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2874 ;;      Locals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2875 ;;      Temps:         24       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2876 ;;      Totals:        40       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2877 ;;Total ram usage:       40 bytes
  2878 ;; Hardware stack levels used:    1
  2879 ;; Hardware stack levels required when called:    1
  2880 ;; This function calls:
  2881 ;;		i2___wmul
  2882 ;; This function is called by:
  2883 ;;		_timer_ISR
  2884 ;; This function uses a non-reentrant model
  2885 ;;
  2886                           
  2887                           	psect	text11
  2888  00088C                     __ptext11:
  2889                           	opt callstack 0
  2890  00088C                     _add_tasks:
  2891                           	opt callstack 24
  2892  00088C                     
  2893                           ;driver.c: 160:     int temp_next = HEAD_QUEUE;
  2894  00088C  C0BB  F02D         	movff	_HEAD_QUEUE,add_tasks@temp_next
  2895  000890  C0BC  F02E         	movff	_HEAD_QUEUE+1,add_tasks@temp_next+1
  2896  000894                     
  2897                           ;driver.c: 161:     if (tasks[temp_next].delay >= tasks[id].period){
  2898  000894  C007  F001         	movff	add_tasks@id,i2___wmul@multiplier
  2899  000898  C008  F002         	movff	add_tasks@id+1,i2___wmul@multiplier+1
  2900  00089C  0E00               	movlw	0
  2901  00089E  6E04               	movwf	(i2___wmul@multiplicand+1)^0,c
  2902  0008A0  0E17               	movlw	23
  2903  0008A2  6E03               	movwf	i2___wmul@multiplicand^0,c
  2904  0008A4  EC15  F00C         	call	i2___wmul	;wreg free
  2905  0008A8  0E0B               	movlw	low (_tasks+11)
  2906  0008AA  2401               	addwf	?i2___wmul^0,w,c
  2907  0008AC  6ED9               	movwf	fsr2l,c
  2908  0008AE  0E01               	movlw	high (_tasks+11)
  2909  0008B0  2002               	addwfc	(?i2___wmul+1)^0,w,c
  2910  0008B2  6EDA               	movwf	fsr2h,c
  2911  0008B4  C02D  F001         	movff	add_tasks@temp_next,i2___wmul@multiplier
  2912  0008B8  C02E  F002         	movff	add_tasks@temp_next+1,i2___wmul@multiplier+1
  2913  0008BC  0E00               	movlw	0
  2914  0008BE  6E04               	movwf	(i2___wmul@multiplicand+1)^0,c
  2915  0008C0  0E17               	movlw	23
  2916  0008C2  6E03               	movwf	i2___wmul@multiplicand^0,c
  2917  0008C4  EC15  F00C         	call	i2___wmul	;wreg free
  2918  0008C8  0E03               	movlw	low (_tasks+3)
  2919  0008CA  2401               	addwf	?i2___wmul^0,w,c
  2920  0008CC  6EE1               	movwf	fsr1l,c
  2921  0008CE  0E01               	movlw	high (_tasks+3)
  2922  0008D0  2002               	addwfc	(?i2___wmul+1)^0,w,c
  2923  0008D2  6EE2               	movwf	fsr1h,c
  2924  0008D4  50DE               	movf	postinc2,w,c
  2925  0008D6  5CE6               	subwf	postinc1,w,c
  2926  0008D8  50DE               	movf	postinc2,w,c
  2927  0008DA  58E6               	subwfb	postinc1,w,c
  2928  0008DC  50DE               	movf	postinc2,w,c
  2929  0008DE  58E6               	subwfb	postinc1,w,c
  2930  0008E0  50DE               	movf	postinc2,w,c
  2931  0008E2  58E6               	subwfb	postinc1,w,c
  2932  0008E4  50DE               	movf	postinc2,w,c
  2933  0008E6  58E6               	subwfb	postinc1,w,c
  2934  0008E8  50DE               	movf	postinc2,w,c
  2935  0008EA  58E6               	subwfb	postinc1,w,c
  2936  0008EC  50DE               	movf	postinc2,w,c
  2937  0008EE  58E6               	subwfb	postinc1,w,c
  2938  0008F0  50DE               	movf	postinc2,w,c
  2939  0008F2  58E6               	subwfb	postinc1,w,c
  2940  0008F4  A0D8               	btfss	status,0,c
  2941  0008F6  EF7F  F004         	goto	i2u46_41
  2942  0008FA  EF81  F004         	goto	i2u46_40
  2943  0008FE                     i2u46_41:
  2944  0008FE  EF53  F005         	goto	i2l1445
  2945  000902                     i2u46_40:
  2946  000902                     
  2947                           ;driver.c: 162:         tasks[id].next = temp_next;
  2948  000902  C007  F001         	movff	add_tasks@id,i2___wmul@multiplier
  2949  000906  C008  F002         	movff	add_tasks@id+1,i2___wmul@multiplier+1
  2950  00090A  0E00               	movlw	0
  2951  00090C  6E04               	movwf	(i2___wmul@multiplicand+1)^0,c
  2952  00090E  0E17               	movlw	23
  2953  000910  6E03               	movwf	i2___wmul@multiplicand^0,c
  2954  000912  EC15  F00C         	call	i2___wmul	;wreg free
  2955  000916  0E15               	movlw	low (_tasks+21)
  2956  000918  2401               	addwf	?i2___wmul^0,w,c
  2957  00091A  6ED9               	movwf	fsr2l,c
  2958  00091C  0E01               	movlw	high (_tasks+21)
  2959  00091E  2002               	addwfc	(?i2___wmul+1)^0,w,c
  2960  000920  6EDA               	movwf	fsr2h,c
  2961  000922  C02D  FFDE         	movff	add_tasks@temp_next,postinc2
  2962  000926  C02E  FFDD         	movff	add_tasks@temp_next+1,postdec2
  2963                           
  2964                           ;driver.c: 163:         tasks[id].delay = tasks[id].period;
  2965  00092A  C007  F001         	movff	add_tasks@id,i2___wmul@multiplier
  2966  00092E  C008  F002         	movff	add_tasks@id+1,i2___wmul@multiplier+1
  2967  000932  0E00               	movlw	0
  2968  000934  6E04               	movwf	(i2___wmul@multiplicand+1)^0,c
  2969  000936  0E17               	movlw	23
  2970  000938  6E03               	movwf	i2___wmul@multiplicand^0,c
  2971  00093A  EC15  F00C         	call	i2___wmul	;wreg free
  2972  00093E  0E0B               	movlw	low (_tasks+11)
  2973  000940  2401               	addwf	?i2___wmul^0,w,c
  2974  000942  6ED9               	movwf	fsr2l,c
  2975  000944  0E01               	movlw	high (_tasks+11)
  2976  000946  2002               	addwfc	(?i2___wmul+1)^0,w,c
  2977  000948  6EDA               	movwf	fsr2h,c
  2978  00094A  CFDE F009          	movff	postinc2,??_add_tasks
  2979  00094E  CFDE F00A          	movff	postinc2,??_add_tasks+1
  2980  000952  CFDE F00B          	movff	postinc2,??_add_tasks+2
  2981  000956  CFDE F00C          	movff	postinc2,??_add_tasks+3
  2982  00095A  CFDE F00D          	movff	postinc2,??_add_tasks+4
  2983  00095E  CFDE F00E          	movff	postinc2,??_add_tasks+5
  2984  000962  CFDE F00F          	movff	postinc2,??_add_tasks+6
  2985  000966  CFDE F010          	movff	postinc2,??_add_tasks+7
  2986  00096A  C007  F001         	movff	add_tasks@id,i2___wmul@multiplier
  2987  00096E  C008  F002         	movff	add_tasks@id+1,i2___wmul@multiplier+1
  2988  000972  0E00               	movlw	0
  2989  000974  6E04               	movwf	(i2___wmul@multiplicand+1)^0,c
  2990  000976  0E17               	movlw	23
  2991  000978  6E03               	movwf	i2___wmul@multiplicand^0,c
  2992  00097A  EC15  F00C         	call	i2___wmul	;wreg free
  2993  00097E  0E03               	movlw	low (_tasks+3)
  2994  000980  2401               	addwf	?i2___wmul^0,w,c
  2995  000982  6ED9               	movwf	fsr2l,c
  2996  000984  0E01               	movlw	high (_tasks+3)
  2997  000986  2002               	addwfc	(?i2___wmul+1)^0,w,c
  2998  000988  6EDA               	movwf	fsr2h,c
  2999  00098A  C009  FFDE         	movff	??_add_tasks,postinc2
  3000  00098E  C00A  FFDE         	movff	??_add_tasks+1,postinc2
  3001  000992  C00B  FFDE         	movff	??_add_tasks+2,postinc2
  3002  000996  C00C  FFDE         	movff	??_add_tasks+3,postinc2
  3003  00099A  C00D  FFDE         	movff	??_add_tasks+4,postinc2
  3004  00099E  C00E  FFDE         	movff	??_add_tasks+5,postinc2
  3005  0009A2  C00F  FFDE         	movff	??_add_tasks+6,postinc2
  3006  0009A6  C010  FFDE         	movff	??_add_tasks+7,postinc2
  3007                           
  3008                           ;driver.c: 164:         tasks[temp_next].delay =tasks[temp_next].delay - tasks[id].delay
      +                          ;
  3009  0009AA  C007  F001         	movff	add_tasks@id,i2___wmul@multiplier
  3010  0009AE  C008  F002         	movff	add_tasks@id+1,i2___wmul@multiplier+1
  3011  0009B2  0E00               	movlw	0
  3012  0009B4  6E04               	movwf	(i2___wmul@multiplicand+1)^0,c
  3013  0009B6  0E17               	movlw	23
  3014  0009B8  6E03               	movwf	i2___wmul@multiplicand^0,c
  3015  0009BA  EC15  F00C         	call	i2___wmul	;wreg free
  3016  0009BE  0E03               	movlw	low (_tasks+3)
  3017  0009C0  2401               	addwf	?i2___wmul^0,w,c
  3018  0009C2  6ED9               	movwf	fsr2l,c
  3019  0009C4  0E01               	movlw	high (_tasks+3)
  3020  0009C6  2002               	addwfc	(?i2___wmul+1)^0,w,c
  3021  0009C8  6EDA               	movwf	fsr2h,c
  3022  0009CA  CFDE F009          	movff	postinc2,??_add_tasks
  3023  0009CE  CFDE F00A          	movff	postinc2,??_add_tasks+1
  3024  0009D2  CFDE F00B          	movff	postinc2,??_add_tasks+2
  3025  0009D6  CFDE F00C          	movff	postinc2,??_add_tasks+3
  3026  0009DA  CFDE F00D          	movff	postinc2,??_add_tasks+4
  3027  0009DE  CFDE F00E          	movff	postinc2,??_add_tasks+5
  3028  0009E2  CFDE F00F          	movff	postinc2,??_add_tasks+6
  3029  0009E6  CFDE F010          	movff	postinc2,??_add_tasks+7
  3030  0009EA  C02D  F001         	movff	add_tasks@temp_next,i2___wmul@multiplier
  3031  0009EE  C02E  F002         	movff	add_tasks@temp_next+1,i2___wmul@multiplier+1
  3032  0009F2  0E00               	movlw	0
  3033  0009F4  6E04               	movwf	(i2___wmul@multiplicand+1)^0,c
  3034  0009F6  0E17               	movlw	23
  3035  0009F8  6E03               	movwf	i2___wmul@multiplicand^0,c
  3036  0009FA  EC15  F00C         	call	i2___wmul	;wreg free
  3037  0009FE  0E03               	movlw	low (_tasks+3)
  3038  000A00  2401               	addwf	?i2___wmul^0,w,c
  3039  000A02  6ED9               	movwf	fsr2l,c
  3040  000A04  0E01               	movlw	high (_tasks+3)
  3041  000A06  2002               	addwfc	(?i2___wmul+1)^0,w,c
  3042  000A08  6EDA               	movwf	fsr2h,c
  3043  000A0A  CFDE F011          	movff	postinc2,??_add_tasks+8
  3044  000A0E  CFDE F012          	movff	postinc2,??_add_tasks+9
  3045  000A12  CFDE F013          	movff	postinc2,??_add_tasks+10
  3046  000A16  CFDE F014          	movff	postinc2,??_add_tasks+11
  3047  000A1A  CFDE F015          	movff	postinc2,??_add_tasks+12
  3048  000A1E  CFDE F016          	movff	postinc2,??_add_tasks+13
  3049  000A22  CFDE F017          	movff	postinc2,??_add_tasks+14
  3050  000A26  CFDE F018          	movff	postinc2,??_add_tasks+15
  3051  000A2A  5009               	movf	??_add_tasks^0,w,c
  3052  000A2C  5C11               	subwf	(??_add_tasks+8)^0,w,c
  3053  000A2E  6E19               	movwf	(??_add_tasks+16)^0,c
  3054  000A30  500A               	movf	(??_add_tasks+1)^0,w,c
  3055  000A32  5812               	subwfb	(??_add_tasks+9)^0,w,c
  3056  000A34  6E1A               	movwf	(??_add_tasks+17)^0,c
  3057  000A36  500B               	movf	(??_add_tasks+2)^0,w,c
  3058  000A38  5813               	subwfb	(??_add_tasks+10)^0,w,c
  3059  000A3A  6E1B               	movwf	(??_add_tasks+18)^0,c
  3060  000A3C  500C               	movf	(??_add_tasks+3)^0,w,c
  3061  000A3E  5814               	subwfb	(??_add_tasks+11)^0,w,c
  3062  000A40  6E1C               	movwf	(??_add_tasks+19)^0,c
  3063  000A42  500D               	movf	(??_add_tasks+4)^0,w,c
  3064  000A44  5815               	subwfb	(??_add_tasks+12)^0,w,c
  3065  000A46  6E1D               	movwf	(??_add_tasks+20)^0,c
  3066  000A48  500E               	movf	(??_add_tasks+5)^0,w,c
  3067  000A4A  5816               	subwfb	(??_add_tasks+13)^0,w,c
  3068  000A4C  6E1E               	movwf	(??_add_tasks+21)^0,c
  3069  000A4E  500F               	movf	(??_add_tasks+6)^0,w,c
  3070  000A50  5817               	subwfb	(??_add_tasks+14)^0,w,c
  3071  000A52  6E1F               	movwf	(??_add_tasks+22)^0,c
  3072  000A54  5010               	movf	(??_add_tasks+7)^0,w,c
  3073  000A56  5818               	subwfb	(??_add_tasks+15)^0,w,c
  3074  000A58  6E20               	movwf	(??_add_tasks+23)^0,c
  3075  000A5A  C02D  F001         	movff	add_tasks@temp_next,i2___wmul@multiplier
  3076  000A5E  C02E  F002         	movff	add_tasks@temp_next+1,i2___wmul@multiplier+1
  3077  000A62  0E00               	movlw	0
  3078  000A64  6E04               	movwf	(i2___wmul@multiplicand+1)^0,c
  3079  000A66  0E17               	movlw	23
  3080  000A68  6E03               	movwf	i2___wmul@multiplicand^0,c
  3081  000A6A  EC15  F00C         	call	i2___wmul	;wreg free
  3082  000A6E  0E03               	movlw	low (_tasks+3)
  3083  000A70  2401               	addwf	?i2___wmul^0,w,c
  3084  000A72  6ED9               	movwf	fsr2l,c
  3085  000A74  0E01               	movlw	high (_tasks+3)
  3086  000A76  2002               	addwfc	(?i2___wmul+1)^0,w,c
  3087  000A78  6EDA               	movwf	fsr2h,c
  3088  000A7A  C019  FFDE         	movff	??_add_tasks+16,postinc2
  3089  000A7E  C01A  FFDE         	movff	??_add_tasks+17,postinc2
  3090  000A82  C01B  FFDE         	movff	??_add_tasks+18,postinc2
  3091  000A86  C01C  FFDE         	movff	??_add_tasks+19,postinc2
  3092  000A8A  C01D  FFDE         	movff	??_add_tasks+20,postinc2
  3093  000A8E  C01E  FFDE         	movff	??_add_tasks+21,postinc2
  3094  000A92  C01F  FFDE         	movff	??_add_tasks+22,postinc2
  3095  000A96  C020  FFDE         	movff	??_add_tasks+23,postinc2
  3096  000A9A                     
  3097                           ;driver.c: 165:         HEAD_QUEUE = id;
  3098  000A9A  C007  F0BB         	movff	add_tasks@id,_HEAD_QUEUE
  3099  000A9E  C008  F0BC         	movff	add_tasks@id+1,_HEAD_QUEUE+1
  3100  000AA2  EF26  F008         	goto	i2l236
  3101  000AA6                     i2l1445:
  3102                           
  3103                           ;driver.c: 168:     unsigned long long int temp_delay = tasks[HEAD_QUEUE].delay;
  3104  000AA6  C0BB  F001         	movff	_HEAD_QUEUE,i2___wmul@multiplier
  3105  000AAA  C0BC  F002         	movff	_HEAD_QUEUE+1,i2___wmul@multiplier+1
  3106  000AAE  0E00               	movlw	0
  3107  000AB0  6E04               	movwf	(i2___wmul@multiplicand+1)^0,c
  3108  000AB2  0E17               	movlw	23
  3109  000AB4  6E03               	movwf	i2___wmul@multiplicand^0,c
  3110  000AB6  EC15  F00C         	call	i2___wmul	;wreg free
  3111  000ABA  0E03               	movlw	low (_tasks+3)
  3112  000ABC  2401               	addwf	?i2___wmul^0,w,c
  3113  000ABE  6ED9               	movwf	fsr2l,c
  3114  000AC0  0E01               	movlw	high (_tasks+3)
  3115  000AC2  2002               	addwfc	(?i2___wmul+1)^0,w,c
  3116  000AC4  6EDA               	movwf	fsr2h,c
  3117  000AC6  CFDE F009          	movff	postinc2,??_add_tasks
  3118  000ACA  CFDE F00A          	movff	postinc2,??_add_tasks+1
  3119  000ACE  CFDE F00B          	movff	postinc2,??_add_tasks+2
  3120  000AD2  CFDE F00C          	movff	postinc2,??_add_tasks+3
  3121  000AD6  CFDE F00D          	movff	postinc2,??_add_tasks+4
  3122  000ADA  CFDE F00E          	movff	postinc2,??_add_tasks+5
  3123  000ADE  CFDE F00F          	movff	postinc2,??_add_tasks+6
  3124  000AE2  CFDE F010          	movff	postinc2,??_add_tasks+7
  3125  000AE6  C009  F025         	movff	??_add_tasks,add_tasks@temp_delay
  3126  000AEA  C00A  F026         	movff	??_add_tasks+1,add_tasks@temp_delay+1
  3127  000AEE  C00B  F027         	movff	??_add_tasks+2,add_tasks@temp_delay+2
  3128  000AF2  C00C  F028         	movff	??_add_tasks+3,add_tasks@temp_delay+3
  3129  000AF6  C00D  F029         	movff	??_add_tasks+4,add_tasks@temp_delay+4
  3130  000AFA  C00E  F02A         	movff	??_add_tasks+5,add_tasks@temp_delay+5
  3131  000AFE  C00F  F02B         	movff	??_add_tasks+6,add_tasks@temp_delay+6
  3132  000B02  C010  F02C         	movff	??_add_tasks+7,add_tasks@temp_delay+7
  3133  000B06                     i2l237:
  3134                           
  3135                           ;driver.c: 170:         if (tasks[temp_next].next == -1){
  3136  000B06  C02D  F001         	movff	add_tasks@temp_next,i2___wmul@multiplier
  3137  000B0A  C02E  F002         	movff	add_tasks@temp_next+1,i2___wmul@multiplier+1
  3138  000B0E  0E00               	movlw	0
  3139  000B10  6E04               	movwf	(i2___wmul@multiplicand+1)^0,c
  3140  000B12  0E17               	movlw	23
  3141  000B14  6E03               	movwf	i2___wmul@multiplicand^0,c
  3142  000B16  EC15  F00C         	call	i2___wmul	;wreg free
  3143  000B1A  0E15               	movlw	low (_tasks+21)
  3144  000B1C  2401               	addwf	?i2___wmul^0,w,c
  3145  000B1E  6ED9               	movwf	fsr2l,c
  3146  000B20  0E01               	movlw	high (_tasks+21)
  3147  000B22  2002               	addwfc	(?i2___wmul+1)^0,w,c
  3148  000B24  6EDA               	movwf	fsr2h,c
  3149  000B26  28DE               	incf	postinc2,w,c
  3150  000B28  E106               	bnz	i2u47_41
  3151  000B2A  28DE               	incf	postinc2,w,c
  3152  000B2C  A4D8               	btfss	status,2,c
  3153  000B2E  EF9B  F005         	goto	i2u47_41
  3154  000B32  EF9D  F005         	goto	i2u47_40
  3155  000B36                     i2u47_41:
  3156  000B36  EF1F  F006         	goto	i2l1451
  3157  000B3A                     i2u47_40:
  3158  000B3A                     
  3159                           ;driver.c: 171:             tasks[temp_next].next = id;
  3160  000B3A  C02D  F001         	movff	add_tasks@temp_next,i2___wmul@multiplier
  3161  000B3E  C02E  F002         	movff	add_tasks@temp_next+1,i2___wmul@multiplier+1
  3162  000B42  0E00               	movlw	0
  3163  000B44  6E04               	movwf	(i2___wmul@multiplicand+1)^0,c
  3164  000B46  0E17               	movlw	23
  3165  000B48  6E03               	movwf	i2___wmul@multiplicand^0,c
  3166  000B4A  EC15  F00C         	call	i2___wmul	;wreg free
  3167  000B4E  0E15               	movlw	low (_tasks+21)
  3168  000B50  2401               	addwf	?i2___wmul^0,w,c
  3169  000B52  6ED9               	movwf	fsr2l,c
  3170  000B54  0E01               	movlw	high (_tasks+21)
  3171  000B56  2002               	addwfc	(?i2___wmul+1)^0,w,c
  3172  000B58  6EDA               	movwf	fsr2h,c
  3173  000B5A  C007  FFDE         	movff	add_tasks@id,postinc2
  3174  000B5E  C008  FFDD         	movff	add_tasks@id+1,postdec2
  3175                           
  3176                           ;driver.c: 172:             tasks[id].next = -1;
  3177  000B62  C007  F001         	movff	add_tasks@id,i2___wmul@multiplier
  3178  000B66  C008  F002         	movff	add_tasks@id+1,i2___wmul@multiplier+1
  3179  000B6A  0E00               	movlw	0
  3180  000B6C  6E04               	movwf	(i2___wmul@multiplicand+1)^0,c
  3181  000B6E  0E17               	movlw	23
  3182  000B70  6E03               	movwf	i2___wmul@multiplicand^0,c
  3183  000B72  EC15  F00C         	call	i2___wmul	;wreg free
  3184  000B76  0E15               	movlw	low (_tasks+21)
  3185  000B78  2401               	addwf	?i2___wmul^0,w,c
  3186  000B7A  6ED9               	movwf	fsr2l,c
  3187  000B7C  0E01               	movlw	high (_tasks+21)
  3188  000B7E  2002               	addwfc	(?i2___wmul+1)^0,w,c
  3189  000B80  6EDA               	movwf	fsr2h,c
  3190  000B82  0EFF               	movlw	255
  3191  000B84  6EDE               	movwf	postinc2,c
  3192  000B86  0EFF               	movlw	255
  3193  000B88  6EDD               	movwf	postdec2,c
  3194                           
  3195                           ;driver.c: 173:             tasks[id].delay = tasks[id].period - temp_delay;
  3196  000B8A  C007  F001         	movff	add_tasks@id,i2___wmul@multiplier
  3197  000B8E  C008  F002         	movff	add_tasks@id+1,i2___wmul@multiplier+1
  3198  000B92  0E00               	movlw	0
  3199  000B94  6E04               	movwf	(i2___wmul@multiplicand+1)^0,c
  3200  000B96  0E17               	movlw	23
  3201  000B98  6E03               	movwf	i2___wmul@multiplicand^0,c
  3202  000B9A  EC15  F00C         	call	i2___wmul	;wreg free
  3203  000B9E  0E0B               	movlw	low (_tasks+11)
  3204  000BA0  2401               	addwf	?i2___wmul^0,w,c
  3205  000BA2  6ED9               	movwf	fsr2l,c
  3206  000BA4  0E01               	movlw	high (_tasks+11)
  3207  000BA6  2002               	addwfc	(?i2___wmul+1)^0,w,c
  3208  000BA8  6EDA               	movwf	fsr2h,c
  3209  000BAA  CFDE F009          	movff	postinc2,??_add_tasks
  3210  000BAE  CFDE F00A          	movff	postinc2,??_add_tasks+1
  3211  000BB2  CFDE F00B          	movff	postinc2,??_add_tasks+2
  3212  000BB6  CFDE F00C          	movff	postinc2,??_add_tasks+3
  3213  000BBA  CFDE F00D          	movff	postinc2,??_add_tasks+4
  3214  000BBE  CFDE F00E          	movff	postinc2,??_add_tasks+5
  3215  000BC2  CFDE F00F          	movff	postinc2,??_add_tasks+6
  3216  000BC6  CFDE F010          	movff	postinc2,??_add_tasks+7
  3217  000BCA  5025               	movf	add_tasks@temp_delay^0,w,c
  3218  000BCC  5C09               	subwf	??_add_tasks^0,w,c
  3219  000BCE  6E11               	movwf	(??_add_tasks+8)^0,c
  3220  000BD0  5026               	movf	(add_tasks@temp_delay+1)^0,w,c
  3221  000BD2  580A               	subwfb	(??_add_tasks+1)^0,w,c
  3222  000BD4  6E12               	movwf	(??_add_tasks+9)^0,c
  3223  000BD6  5027               	movf	(add_tasks@temp_delay+2)^0,w,c
  3224  000BD8  580B               	subwfb	(??_add_tasks+2)^0,w,c
  3225  000BDA  6E13               	movwf	(??_add_tasks+10)^0,c
  3226  000BDC  5028               	movf	(add_tasks@temp_delay+3)^0,w,c
  3227  000BDE  580C               	subwfb	(??_add_tasks+3)^0,w,c
  3228  000BE0  6E14               	movwf	(??_add_tasks+11)^0,c
  3229  000BE2  5029               	movf	(add_tasks@temp_delay+4)^0,w,c
  3230  000BE4  580D               	subwfb	(??_add_tasks+4)^0,w,c
  3231  000BE6  6E15               	movwf	(??_add_tasks+12)^0,c
  3232  000BE8  502A               	movf	(add_tasks@temp_delay+5)^0,w,c
  3233  000BEA  580E               	subwfb	(??_add_tasks+5)^0,w,c
  3234  000BEC  6E16               	movwf	(??_add_tasks+13)^0,c
  3235  000BEE  502B               	movf	(add_tasks@temp_delay+6)^0,w,c
  3236  000BF0  580F               	subwfb	(??_add_tasks+6)^0,w,c
  3237  000BF2  6E17               	movwf	(??_add_tasks+14)^0,c
  3238  000BF4  502C               	movf	(add_tasks@temp_delay+7)^0,w,c
  3239  000BF6  5810               	subwfb	(??_add_tasks+7)^0,w,c
  3240  000BF8  6E18               	movwf	(??_add_tasks+15)^0,c
  3241  000BFA  C007  F001         	movff	add_tasks@id,i2___wmul@multiplier
  3242  000BFE  C008  F002         	movff	add_tasks@id+1,i2___wmul@multiplier+1
  3243  000C02  0E00               	movlw	0
  3244  000C04  6E04               	movwf	(i2___wmul@multiplicand+1)^0,c
  3245  000C06  0E17               	movlw	23
  3246  000C08  6E03               	movwf	i2___wmul@multiplicand^0,c
  3247  000C0A  EC15  F00C         	call	i2___wmul	;wreg free
  3248  000C0E  0E03               	movlw	low (_tasks+3)
  3249  000C10  2401               	addwf	?i2___wmul^0,w,c
  3250  000C12  6ED9               	movwf	fsr2l,c
  3251  000C14  0E01               	movlw	high (_tasks+3)
  3252  000C16  2002               	addwfc	(?i2___wmul+1)^0,w,c
  3253  000C18  6EDA               	movwf	fsr2h,c
  3254  000C1A  C011  FFDE         	movff	??_add_tasks+8,postinc2
  3255  000C1E  C012  FFDE         	movff	??_add_tasks+9,postinc2
  3256  000C22  C013  FFDE         	movff	??_add_tasks+10,postinc2
  3257  000C26  C014  FFDE         	movff	??_add_tasks+11,postinc2
  3258  000C2A  C015  FFDE         	movff	??_add_tasks+12,postinc2
  3259  000C2E  C016  FFDE         	movff	??_add_tasks+13,postinc2
  3260  000C32  C017  FFDE         	movff	??_add_tasks+14,postinc2
  3261  000C36  C018  FFDE         	movff	??_add_tasks+15,postinc2
  3262  000C3A  EF26  F008         	goto	i2l236
  3263  000C3E                     i2l1451:
  3264                           
  3265                           ;driver.c: 176:         temp_delay = temp_delay + tasks[tasks[temp_next].next].delay;
  3266  000C3E  C02D  F001         	movff	add_tasks@temp_next,i2___wmul@multiplier
  3267  000C42  C02E  F002         	movff	add_tasks@temp_next+1,i2___wmul@multiplier+1
  3268  000C46  0E00               	movlw	0
  3269  000C48  6E04               	movwf	(i2___wmul@multiplicand+1)^0,c
  3270  000C4A  0E17               	movlw	23
  3271  000C4C  6E03               	movwf	i2___wmul@multiplicand^0,c
  3272  000C4E  EC15  F00C         	call	i2___wmul	;wreg free
  3273  000C52  0E15               	movlw	low (_tasks+21)
  3274  000C54  2401               	addwf	?i2___wmul^0,w,c
  3275  000C56  6ED9               	movwf	fsr2l,c
  3276  000C58  0E01               	movlw	high (_tasks+21)
  3277  000C5A  2002               	addwfc	(?i2___wmul+1)^0,w,c
  3278  000C5C  6EDA               	movwf	fsr2h,c
  3279  000C5E  CFDE F023          	movff	postinc2,_add_tasks$1261
  3280  000C62  CFDD F024          	movff	postdec2,_add_tasks$1261+1
  3281                           
  3282                           ;driver.c: 176:         temp_delay = temp_delay + tasks[tasks[temp_next].next].delay;
  3283  000C66  C023  F001         	movff	_add_tasks$1261,i2___wmul@multiplier
  3284  000C6A  C024  F002         	movff	_add_tasks$1261+1,i2___wmul@multiplier+1
  3285  000C6E  0E00               	movlw	0
  3286  000C70  6E04               	movwf	(i2___wmul@multiplicand+1)^0,c
  3287  000C72  0E17               	movlw	23
  3288  000C74  6E03               	movwf	i2___wmul@multiplicand^0,c
  3289  000C76  EC15  F00C         	call	i2___wmul	;wreg free
  3290  000C7A  0E03               	movlw	low (_tasks+3)
  3291  000C7C  2401               	addwf	?i2___wmul^0,w,c
  3292  000C7E  6ED9               	movwf	fsr2l,c
  3293  000C80  0E01               	movlw	high (_tasks+3)
  3294  000C82  2002               	addwfc	(?i2___wmul+1)^0,w,c
  3295  000C84  6EDA               	movwf	fsr2h,c
  3296  000C86  CFDE F009          	movff	postinc2,??_add_tasks
  3297  000C8A  CFDE F00A          	movff	postinc2,??_add_tasks+1
  3298  000C8E  CFDE F00B          	movff	postinc2,??_add_tasks+2
  3299  000C92  CFDE F00C          	movff	postinc2,??_add_tasks+3
  3300  000C96  CFDE F00D          	movff	postinc2,??_add_tasks+4
  3301  000C9A  CFDE F00E          	movff	postinc2,??_add_tasks+5
  3302  000C9E  CFDE F00F          	movff	postinc2,??_add_tasks+6
  3303  000CA2  CFDE F010          	movff	postinc2,??_add_tasks+7
  3304  000CA6  5025               	movf	add_tasks@temp_delay^0,w,c
  3305  000CA8  2409               	addwf	??_add_tasks^0,w,c
  3306  000CAA  6E25               	movwf	add_tasks@temp_delay^0,c
  3307  000CAC  5026               	movf	(add_tasks@temp_delay+1)^0,w,c
  3308  000CAE  200A               	addwfc	(??_add_tasks+1)^0,w,c
  3309  000CB0  6E26               	movwf	(add_tasks@temp_delay+1)^0,c
  3310  000CB2  5027               	movf	(add_tasks@temp_delay+2)^0,w,c
  3311  000CB4  200B               	addwfc	(??_add_tasks+2)^0,w,c
  3312  000CB6  6E27               	movwf	(add_tasks@temp_delay+2)^0,c
  3313  000CB8  5028               	movf	(add_tasks@temp_delay+3)^0,w,c
  3314  000CBA  200C               	addwfc	(??_add_tasks+3)^0,w,c
  3315  000CBC  6E28               	movwf	(add_tasks@temp_delay+3)^0,c
  3316  000CBE  5029               	movf	(add_tasks@temp_delay+4)^0,w,c
  3317  000CC0  200D               	addwfc	(??_add_tasks+4)^0,w,c
  3318  000CC2  6E29               	movwf	(add_tasks@temp_delay+4)^0,c
  3319  000CC4  502A               	movf	(add_tasks@temp_delay+5)^0,w,c
  3320  000CC6  200E               	addwfc	(??_add_tasks+5)^0,w,c
  3321  000CC8  6E2A               	movwf	(add_tasks@temp_delay+5)^0,c
  3322  000CCA  502B               	movf	(add_tasks@temp_delay+6)^0,w,c
  3323  000CCC  200F               	addwfc	(??_add_tasks+6)^0,w,c
  3324  000CCE  6E2B               	movwf	(add_tasks@temp_delay+6)^0,c
  3325  000CD0  502C               	movf	(add_tasks@temp_delay+7)^0,w,c
  3326  000CD2  2010               	addwfc	(??_add_tasks+7)^0,w,c
  3327  000CD4  6E2C               	movwf	(add_tasks@temp_delay+7)^0,c
  3328                           
  3329                           ;driver.c: 177:         if (temp_delay >= tasks[id].period) {
  3330  000CD6  C007  F001         	movff	add_tasks@id,i2___wmul@multiplier
  3331  000CDA  C008  F002         	movff	add_tasks@id+1,i2___wmul@multiplier+1
  3332  000CDE  0E00               	movlw	0
  3333  000CE0  6E04               	movwf	(i2___wmul@multiplicand+1)^0,c
  3334  000CE2  0E17               	movlw	23
  3335  000CE4  6E03               	movwf	i2___wmul@multiplicand^0,c
  3336  000CE6  EC15  F00C         	call	i2___wmul	;wreg free
  3337  000CEA  0E0B               	movlw	low (_tasks+11)
  3338  000CEC  2401               	addwf	?i2___wmul^0,w,c
  3339  000CEE  6ED9               	movwf	fsr2l,c
  3340  000CF0  0E01               	movlw	high (_tasks+11)
  3341  000CF2  2002               	addwfc	(?i2___wmul+1)^0,w,c
  3342  000CF4  6EDA               	movwf	fsr2h,c
  3343  000CF6  50DE               	movf	postinc2,w,c
  3344  000CF8  5C25               	subwf	add_tasks@temp_delay^0,w,c
  3345  000CFA  50DE               	movf	postinc2,w,c
  3346  000CFC  5826               	subwfb	(add_tasks@temp_delay+1)^0,w,c
  3347  000CFE  50DE               	movf	postinc2,w,c
  3348  000D00  5827               	subwfb	(add_tasks@temp_delay+2)^0,w,c
  3349  000D02  50DE               	movf	postinc2,w,c
  3350  000D04  5828               	subwfb	(add_tasks@temp_delay+3)^0,w,c
  3351  000D06  50DE               	movf	postinc2,w,c
  3352  000D08  5829               	subwfb	(add_tasks@temp_delay+4)^0,w,c
  3353  000D0A  50DE               	movf	postinc2,w,c
  3354  000D0C  582A               	subwfb	(add_tasks@temp_delay+5)^0,w,c
  3355  000D0E  50DE               	movf	postinc2,w,c
  3356  000D10  582B               	subwfb	(add_tasks@temp_delay+6)^0,w,c
  3357  000D12  50DE               	movf	postinc2,w,c
  3358  000D14  582C               	subwfb	(add_tasks@temp_delay+7)^0,w,c
  3359  000D16  A0D8               	btfss	status,0,c
  3360  000D18  EF90  F006         	goto	i2u48_41
  3361  000D1C  EF92  F006         	goto	i2u48_40
  3362  000D20                     i2u48_41:
  3363  000D20  EF10  F008         	goto	i2l1467
  3364  000D24                     i2u48_40:
  3365  000D24                     
  3366                           ;driver.c: 178:             temp_delay = temp_delay -tasks[tasks[temp_next].next].delay;
  3367  000D24  C02D  F001         	movff	add_tasks@temp_next,i2___wmul@multiplier
  3368  000D28  C02E  F002         	movff	add_tasks@temp_next+1,i2___wmul@multiplier+1
  3369  000D2C  0E00               	movlw	0
  3370  000D2E  6E04               	movwf	(i2___wmul@multiplicand+1)^0,c
  3371  000D30  0E17               	movlw	23
  3372  000D32  6E03               	movwf	i2___wmul@multiplicand^0,c
  3373  000D34  EC15  F00C         	call	i2___wmul	;wreg free
  3374  000D38  0E15               	movlw	low (_tasks+21)
  3375  000D3A  2401               	addwf	?i2___wmul^0,w,c
  3376  000D3C  6ED9               	movwf	fsr2l,c
  3377  000D3E  0E01               	movlw	high (_tasks+21)
  3378  000D40  2002               	addwfc	(?i2___wmul+1)^0,w,c
  3379  000D42  6EDA               	movwf	fsr2h,c
  3380  000D44  CFDE F023          	movff	postinc2,_add_tasks$1261
  3381  000D48  CFDD F024          	movff	postdec2,_add_tasks$1261+1
  3382                           
  3383                           ;driver.c: 178:             temp_delay = temp_delay -tasks[tasks[temp_next].next].delay;
  3384  000D4C  C023  F001         	movff	_add_tasks$1261,i2___wmul@multiplier
  3385  000D50  C024  F002         	movff	_add_tasks$1261+1,i2___wmul@multiplier+1
  3386  000D54  0E00               	movlw	0
  3387  000D56  6E04               	movwf	(i2___wmul@multiplicand+1)^0,c
  3388  000D58  0E17               	movlw	23
  3389  000D5A  6E03               	movwf	i2___wmul@multiplicand^0,c
  3390  000D5C  EC15  F00C         	call	i2___wmul	;wreg free
  3391  000D60  0E03               	movlw	low (_tasks+3)
  3392  000D62  2401               	addwf	?i2___wmul^0,w,c
  3393  000D64  6ED9               	movwf	fsr2l,c
  3394  000D66  0E01               	movlw	high (_tasks+3)
  3395  000D68  2002               	addwfc	(?i2___wmul+1)^0,w,c
  3396  000D6A  6EDA               	movwf	fsr2h,c
  3397  000D6C  CFDE F009          	movff	postinc2,??_add_tasks
  3398  000D70  CFDE F00A          	movff	postinc2,??_add_tasks+1
  3399  000D74  CFDE F00B          	movff	postinc2,??_add_tasks+2
  3400  000D78  CFDE F00C          	movff	postinc2,??_add_tasks+3
  3401  000D7C  CFDE F00D          	movff	postinc2,??_add_tasks+4
  3402  000D80  CFDE F00E          	movff	postinc2,??_add_tasks+5
  3403  000D84  CFDE F00F          	movff	postinc2,??_add_tasks+6
  3404  000D88  CFDE F010          	movff	postinc2,??_add_tasks+7
  3405  000D8C  5009               	movf	??_add_tasks^0,w,c
  3406  000D8E  5C25               	subwf	add_tasks@temp_delay^0,w,c
  3407  000D90  6E25               	movwf	add_tasks@temp_delay^0,c
  3408  000D92  500A               	movf	(??_add_tasks+1)^0,w,c
  3409  000D94  5826               	subwfb	(add_tasks@temp_delay+1)^0,w,c
  3410  000D96  6E26               	movwf	(add_tasks@temp_delay+1)^0,c
  3411  000D98  500B               	movf	(??_add_tasks+2)^0,w,c
  3412  000D9A  5827               	subwfb	(add_tasks@temp_delay+2)^0,w,c
  3413  000D9C  6E27               	movwf	(add_tasks@temp_delay+2)^0,c
  3414  000D9E  500C               	movf	(??_add_tasks+3)^0,w,c
  3415  000DA0  5828               	subwfb	(add_tasks@temp_delay+3)^0,w,c
  3416  000DA2  6E28               	movwf	(add_tasks@temp_delay+3)^0,c
  3417  000DA4  500D               	movf	(??_add_tasks+4)^0,w,c
  3418  000DA6  5829               	subwfb	(add_tasks@temp_delay+4)^0,w,c
  3419  000DA8  6E29               	movwf	(add_tasks@temp_delay+4)^0,c
  3420  000DAA  500E               	movf	(??_add_tasks+5)^0,w,c
  3421  000DAC  582A               	subwfb	(add_tasks@temp_delay+5)^0,w,c
  3422  000DAE  6E2A               	movwf	(add_tasks@temp_delay+5)^0,c
  3423  000DB0  500F               	movf	(??_add_tasks+6)^0,w,c
  3424  000DB2  582B               	subwfb	(add_tasks@temp_delay+6)^0,w,c
  3425  000DB4  6E2B               	movwf	(add_tasks@temp_delay+6)^0,c
  3426  000DB6  5010               	movf	(??_add_tasks+7)^0,w,c
  3427  000DB8  582C               	subwfb	(add_tasks@temp_delay+7)^0,w,c
  3428  000DBA  6E2C               	movwf	(add_tasks@temp_delay+7)^0,c
  3429                           
  3430                           ;driver.c: 179:             tasks[id].delay = tasks[id].period - temp_delay;
  3431  000DBC  C007  F001         	movff	add_tasks@id,i2___wmul@multiplier
  3432  000DC0  C008  F002         	movff	add_tasks@id+1,i2___wmul@multiplier+1
  3433  000DC4  0E00               	movlw	0
  3434  000DC6  6E04               	movwf	(i2___wmul@multiplicand+1)^0,c
  3435  000DC8  0E17               	movlw	23
  3436  000DCA  6E03               	movwf	i2___wmul@multiplicand^0,c
  3437  000DCC  EC15  F00C         	call	i2___wmul	;wreg free
  3438  000DD0  0E0B               	movlw	low (_tasks+11)
  3439  000DD2  2401               	addwf	?i2___wmul^0,w,c
  3440  000DD4  6ED9               	movwf	fsr2l,c
  3441  000DD6  0E01               	movlw	high (_tasks+11)
  3442  000DD8  2002               	addwfc	(?i2___wmul+1)^0,w,c
  3443  000DDA  6EDA               	movwf	fsr2h,c
  3444  000DDC  CFDE F009          	movff	postinc2,??_add_tasks
  3445  000DE0  CFDE F00A          	movff	postinc2,??_add_tasks+1
  3446  000DE4  CFDE F00B          	movff	postinc2,??_add_tasks+2
  3447  000DE8  CFDE F00C          	movff	postinc2,??_add_tasks+3
  3448  000DEC  CFDE F00D          	movff	postinc2,??_add_tasks+4
  3449  000DF0  CFDE F00E          	movff	postinc2,??_add_tasks+5
  3450  000DF4  CFDE F00F          	movff	postinc2,??_add_tasks+6
  3451  000DF8  CFDE F010          	movff	postinc2,??_add_tasks+7
  3452  000DFC  5025               	movf	add_tasks@temp_delay^0,w,c
  3453  000DFE  5C09               	subwf	??_add_tasks^0,w,c
  3454  000E00  6E11               	movwf	(??_add_tasks+8)^0,c
  3455  000E02  5026               	movf	(add_tasks@temp_delay+1)^0,w,c
  3456  000E04  580A               	subwfb	(??_add_tasks+1)^0,w,c
  3457  000E06  6E12               	movwf	(??_add_tasks+9)^0,c
  3458  000E08  5027               	movf	(add_tasks@temp_delay+2)^0,w,c
  3459  000E0A  580B               	subwfb	(??_add_tasks+2)^0,w,c
  3460  000E0C  6E13               	movwf	(??_add_tasks+10)^0,c
  3461  000E0E  5028               	movf	(add_tasks@temp_delay+3)^0,w,c
  3462  000E10  580C               	subwfb	(??_add_tasks+3)^0,w,c
  3463  000E12  6E14               	movwf	(??_add_tasks+11)^0,c
  3464  000E14  5029               	movf	(add_tasks@temp_delay+4)^0,w,c
  3465  000E16  580D               	subwfb	(??_add_tasks+4)^0,w,c
  3466  000E18  6E15               	movwf	(??_add_tasks+12)^0,c
  3467  000E1A  502A               	movf	(add_tasks@temp_delay+5)^0,w,c
  3468  000E1C  580E               	subwfb	(??_add_tasks+5)^0,w,c
  3469  000E1E  6E16               	movwf	(??_add_tasks+13)^0,c
  3470  000E20  502B               	movf	(add_tasks@temp_delay+6)^0,w,c
  3471  000E22  580F               	subwfb	(??_add_tasks+6)^0,w,c
  3472  000E24  6E17               	movwf	(??_add_tasks+14)^0,c
  3473  000E26  502C               	movf	(add_tasks@temp_delay+7)^0,w,c
  3474  000E28  5810               	subwfb	(??_add_tasks+7)^0,w,c
  3475  000E2A  6E18               	movwf	(??_add_tasks+15)^0,c
  3476  000E2C  C007  F001         	movff	add_tasks@id,i2___wmul@multiplier
  3477  000E30  C008  F002         	movff	add_tasks@id+1,i2___wmul@multiplier+1
  3478  000E34  0E00               	movlw	0
  3479  000E36  6E04               	movwf	(i2___wmul@multiplicand+1)^0,c
  3480  000E38  0E17               	movlw	23
  3481  000E3A  6E03               	movwf	i2___wmul@multiplicand^0,c
  3482  000E3C  EC15  F00C         	call	i2___wmul	;wreg free
  3483  000E40  0E03               	movlw	low (_tasks+3)
  3484  000E42  2401               	addwf	?i2___wmul^0,w,c
  3485  000E44  6ED9               	movwf	fsr2l,c
  3486  000E46  0E01               	movlw	high (_tasks+3)
  3487  000E48  2002               	addwfc	(?i2___wmul+1)^0,w,c
  3488  000E4A  6EDA               	movwf	fsr2h,c
  3489  000E4C  C011  FFDE         	movff	??_add_tasks+8,postinc2
  3490  000E50  C012  FFDE         	movff	??_add_tasks+9,postinc2
  3491  000E54  C013  FFDE         	movff	??_add_tasks+10,postinc2
  3492  000E58  C014  FFDE         	movff	??_add_tasks+11,postinc2
  3493  000E5C  C015  FFDE         	movff	??_add_tasks+12,postinc2
  3494  000E60  C016  FFDE         	movff	??_add_tasks+13,postinc2
  3495  000E64  C017  FFDE         	movff	??_add_tasks+14,postinc2
  3496  000E68  C018  FFDE         	movff	??_add_tasks+15,postinc2
  3497  000E6C                     
  3498                           ;driver.c: 180:             tasks[id].next = tasks[temp_next].next;
  3499  000E6C  C02D  F001         	movff	add_tasks@temp_next,i2___wmul@multiplier
  3500  000E70  C02E  F002         	movff	add_tasks@temp_next+1,i2___wmul@multiplier+1
  3501  000E74  0E00               	movlw	0
  3502  000E76  6E04               	movwf	(i2___wmul@multiplicand+1)^0,c
  3503  000E78  0E17               	movlw	23
  3504  000E7A  6E03               	movwf	i2___wmul@multiplicand^0,c
  3505  000E7C  EC15  F00C         	call	i2___wmul	;wreg free
  3506  000E80  0E15               	movlw	low (_tasks+21)
  3507  000E82  2401               	addwf	?i2___wmul^0,w,c
  3508  000E84  6ED9               	movwf	fsr2l,c
  3509  000E86  0E01               	movlw	high (_tasks+21)
  3510  000E88  2002               	addwfc	(?i2___wmul+1)^0,w,c
  3511  000E8A  6EDA               	movwf	fsr2h,c
  3512  000E8C  C007  F001         	movff	add_tasks@id,i2___wmul@multiplier
  3513  000E90  C008  F002         	movff	add_tasks@id+1,i2___wmul@multiplier+1
  3514  000E94  0E00               	movlw	0
  3515  000E96  6E04               	movwf	(i2___wmul@multiplicand+1)^0,c
  3516  000E98  0E17               	movlw	23
  3517  000E9A  6E03               	movwf	i2___wmul@multiplicand^0,c
  3518  000E9C  EC15  F00C         	call	i2___wmul	;wreg free
  3519  000EA0  0E15               	movlw	low (_tasks+21)
  3520  000EA2  2401               	addwf	?i2___wmul^0,w,c
  3521  000EA4  6EE1               	movwf	fsr1l,c
  3522  000EA6  0E01               	movlw	high (_tasks+21)
  3523  000EA8  2002               	addwfc	(?i2___wmul+1)^0,w,c
  3524  000EAA  6EE2               	movwf	fsr1h,c
  3525  000EAC  CFDE FFE6          	movff	postinc2,postinc1
  3526  000EB0  CFDD FFE5          	movff	postdec2,postdec1
  3527  000EB4                     
  3528                           ;driver.c: 181:             tasks[temp_next].next = id;
  3529  000EB4  C02D  F001         	movff	add_tasks@temp_next,i2___wmul@multiplier
  3530  000EB8  C02E  F002         	movff	add_tasks@temp_next+1,i2___wmul@multiplier+1
  3531  000EBC  0E00               	movlw	0
  3532  000EBE  6E04               	movwf	(i2___wmul@multiplicand+1)^0,c
  3533  000EC0  0E17               	movlw	23
  3534  000EC2  6E03               	movwf	i2___wmul@multiplicand^0,c
  3535  000EC4  EC15  F00C         	call	i2___wmul	;wreg free
  3536  000EC8  0E15               	movlw	low (_tasks+21)
  3537  000ECA  2401               	addwf	?i2___wmul^0,w,c
  3538  000ECC  6ED9               	movwf	fsr2l,c
  3539  000ECE  0E01               	movlw	high (_tasks+21)
  3540  000ED0  2002               	addwfc	(?i2___wmul+1)^0,w,c
  3541  000ED2  6EDA               	movwf	fsr2h,c
  3542  000ED4  C007  FFDE         	movff	add_tasks@id,postinc2
  3543  000ED8  C008  FFDD         	movff	add_tasks@id+1,postdec2
  3544  000EDC                     
  3545                           ;driver.c: 182:             tasks[tasks[id].next].delay = tasks[tasks[id].next].delay - 
      +                          tasks[id].delay;
  3546  000EDC  C007  F001         	movff	add_tasks@id,i2___wmul@multiplier
  3547  000EE0  C008  F002         	movff	add_tasks@id+1,i2___wmul@multiplier+1
  3548  000EE4  0E00               	movlw	0
  3549  000EE6  6E04               	movwf	(i2___wmul@multiplicand+1)^0,c
  3550  000EE8  0E17               	movlw	23
  3551  000EEA  6E03               	movwf	i2___wmul@multiplicand^0,c
  3552  000EEC  EC15  F00C         	call	i2___wmul	;wreg free
  3553  000EF0  0E15               	movlw	low (_tasks+21)
  3554  000EF2  2401               	addwf	?i2___wmul^0,w,c
  3555  000EF4  6ED9               	movwf	fsr2l,c
  3556  000EF6  0E01               	movlw	high (_tasks+21)
  3557  000EF8  2002               	addwfc	(?i2___wmul+1)^0,w,c
  3558  000EFA  6EDA               	movwf	fsr2h,c
  3559  000EFC  CFDE F023          	movff	postinc2,_add_tasks$1261
  3560  000F00  CFDD F024          	movff	postdec2,_add_tasks$1261+1
  3561  000F04                     
  3562                           ;driver.c: 182:             tasks[tasks[id].next].delay = tasks[tasks[id].next].delay - 
      +                          tasks[id].delay;
  3563  000F04  C007  F001         	movff	add_tasks@id,i2___wmul@multiplier
  3564  000F08  C008  F002         	movff	add_tasks@id+1,i2___wmul@multiplier+1
  3565  000F0C  0E00               	movlw	0
  3566  000F0E  6E04               	movwf	(i2___wmul@multiplicand+1)^0,c
  3567  000F10  0E17               	movlw	23
  3568  000F12  6E03               	movwf	i2___wmul@multiplicand^0,c
  3569  000F14  EC15  F00C         	call	i2___wmul	;wreg free
  3570  000F18  0E15               	movlw	low (_tasks+21)
  3571  000F1A  2401               	addwf	?i2___wmul^0,w,c
  3572  000F1C  6ED9               	movwf	fsr2l,c
  3573  000F1E  0E01               	movlw	high (_tasks+21)
  3574  000F20  2002               	addwfc	(?i2___wmul+1)^0,w,c
  3575  000F22  6EDA               	movwf	fsr2h,c
  3576  000F24  CFDE F021          	movff	postinc2,_add_tasks$1262
  3577  000F28  CFDD F022          	movff	postdec2,_add_tasks$1262+1
  3578  000F2C                     
  3579                           ;driver.c: 182:             tasks[tasks[id].next].delay = tasks[tasks[id].next].delay - 
      +                          tasks[id].delay;
  3580  000F2C  C007  F001         	movff	add_tasks@id,i2___wmul@multiplier
  3581  000F30  C008  F002         	movff	add_tasks@id+1,i2___wmul@multiplier+1
  3582  000F34  0E00               	movlw	0
  3583  000F36  6E04               	movwf	(i2___wmul@multiplicand+1)^0,c
  3584  000F38  0E17               	movlw	23
  3585  000F3A  6E03               	movwf	i2___wmul@multiplicand^0,c
  3586  000F3C  EC15  F00C         	call	i2___wmul	;wreg free
  3587  000F40  0E03               	movlw	low (_tasks+3)
  3588  000F42  2401               	addwf	?i2___wmul^0,w,c
  3589  000F44  6ED9               	movwf	fsr2l,c
  3590  000F46  0E01               	movlw	high (_tasks+3)
  3591  000F48  2002               	addwfc	(?i2___wmul+1)^0,w,c
  3592  000F4A  6EDA               	movwf	fsr2h,c
  3593  000F4C  CFDE F009          	movff	postinc2,??_add_tasks
  3594  000F50  CFDE F00A          	movff	postinc2,??_add_tasks+1
  3595  000F54  CFDE F00B          	movff	postinc2,??_add_tasks+2
  3596  000F58  CFDE F00C          	movff	postinc2,??_add_tasks+3
  3597  000F5C  CFDE F00D          	movff	postinc2,??_add_tasks+4
  3598  000F60  CFDE F00E          	movff	postinc2,??_add_tasks+5
  3599  000F64  CFDE F00F          	movff	postinc2,??_add_tasks+6
  3600  000F68  CFDE F010          	movff	postinc2,??_add_tasks+7
  3601  000F6C  C023  F001         	movff	_add_tasks$1261,i2___wmul@multiplier
  3602  000F70  C024  F002         	movff	_add_tasks$1261+1,i2___wmul@multiplier+1
  3603  000F74  0E00               	movlw	0
  3604  000F76  6E04               	movwf	(i2___wmul@multiplicand+1)^0,c
  3605  000F78  0E17               	movlw	23
  3606  000F7A  6E03               	movwf	i2___wmul@multiplicand^0,c
  3607  000F7C  EC15  F00C         	call	i2___wmul	;wreg free
  3608  000F80  0E03               	movlw	low (_tasks+3)
  3609  000F82  2401               	addwf	?i2___wmul^0,w,c
  3610  000F84  6ED9               	movwf	fsr2l,c
  3611  000F86  0E01               	movlw	high (_tasks+3)
  3612  000F88  2002               	addwfc	(?i2___wmul+1)^0,w,c
  3613  000F8A  6EDA               	movwf	fsr2h,c
  3614  000F8C  CFDE F011          	movff	postinc2,??_add_tasks+8
  3615  000F90  CFDE F012          	movff	postinc2,??_add_tasks+9
  3616  000F94  CFDE F013          	movff	postinc2,??_add_tasks+10
  3617  000F98  CFDE F014          	movff	postinc2,??_add_tasks+11
  3618  000F9C  CFDE F015          	movff	postinc2,??_add_tasks+12
  3619  000FA0  CFDE F016          	movff	postinc2,??_add_tasks+13
  3620  000FA4  CFDE F017          	movff	postinc2,??_add_tasks+14
  3621  000FA8  CFDE F018          	movff	postinc2,??_add_tasks+15
  3622  000FAC  5009               	movf	??_add_tasks^0,w,c
  3623  000FAE  5C11               	subwf	(??_add_tasks+8)^0,w,c
  3624  000FB0  6E19               	movwf	(??_add_tasks+16)^0,c
  3625  000FB2  500A               	movf	(??_add_tasks+1)^0,w,c
  3626  000FB4  5812               	subwfb	(??_add_tasks+9)^0,w,c
  3627  000FB6  6E1A               	movwf	(??_add_tasks+17)^0,c
  3628  000FB8  500B               	movf	(??_add_tasks+2)^0,w,c
  3629  000FBA  5813               	subwfb	(??_add_tasks+10)^0,w,c
  3630  000FBC  6E1B               	movwf	(??_add_tasks+18)^0,c
  3631  000FBE  500C               	movf	(??_add_tasks+3)^0,w,c
  3632  000FC0  5814               	subwfb	(??_add_tasks+11)^0,w,c
  3633  000FC2  6E1C               	movwf	(??_add_tasks+19)^0,c
  3634  000FC4  500D               	movf	(??_add_tasks+4)^0,w,c
  3635  000FC6  5815               	subwfb	(??_add_tasks+12)^0,w,c
  3636  000FC8  6E1D               	movwf	(??_add_tasks+20)^0,c
  3637  000FCA  500E               	movf	(??_add_tasks+5)^0,w,c
  3638  000FCC  5816               	subwfb	(??_add_tasks+13)^0,w,c
  3639  000FCE  6E1E               	movwf	(??_add_tasks+21)^0,c
  3640  000FD0  500F               	movf	(??_add_tasks+6)^0,w,c
  3641  000FD2  5817               	subwfb	(??_add_tasks+14)^0,w,c
  3642  000FD4  6E1F               	movwf	(??_add_tasks+22)^0,c
  3643  000FD6  5010               	movf	(??_add_tasks+7)^0,w,c
  3644  000FD8  5818               	subwfb	(??_add_tasks+15)^0,w,c
  3645  000FDA  6E20               	movwf	(??_add_tasks+23)^0,c
  3646  000FDC  C021  F001         	movff	_add_tasks$1262,i2___wmul@multiplier
  3647  000FE0  C022  F002         	movff	_add_tasks$1262+1,i2___wmul@multiplier+1
  3648  000FE4  0E00               	movlw	0
  3649  000FE6  6E04               	movwf	(i2___wmul@multiplicand+1)^0,c
  3650  000FE8  0E17               	movlw	23
  3651  000FEA  6E03               	movwf	i2___wmul@multiplicand^0,c
  3652  000FEC  EC15  F00C         	call	i2___wmul	;wreg free
  3653  000FF0  0E03               	movlw	low (_tasks+3)
  3654  000FF2  2401               	addwf	?i2___wmul^0,w,c
  3655  000FF4  6ED9               	movwf	fsr2l,c
  3656  000FF6  0E01               	movlw	high (_tasks+3)
  3657  000FF8  2002               	addwfc	(?i2___wmul+1)^0,w,c
  3658  000FFA  6EDA               	movwf	fsr2h,c
  3659  000FFC  C019  FFDE         	movff	??_add_tasks+16,postinc2
  3660  001000  C01A  FFDE         	movff	??_add_tasks+17,postinc2
  3661  001004  C01B  FFDE         	movff	??_add_tasks+18,postinc2
  3662  001008  C01C  FFDE         	movff	??_add_tasks+19,postinc2
  3663  00100C  C01D  FFDE         	movff	??_add_tasks+20,postinc2
  3664  001010  C01E  FFDE         	movff	??_add_tasks+21,postinc2
  3665  001014  C01F  FFDE         	movff	??_add_tasks+22,postinc2
  3666  001018  C020  FFDE         	movff	??_add_tasks+23,postinc2
  3667  00101C  EF26  F008         	goto	i2l236
  3668  001020                     i2l1467:
  3669                           
  3670                           ;driver.c: 185:         temp_next = tasks[temp_next].next;
  3671  001020  C02D  F001         	movff	add_tasks@temp_next,i2___wmul@multiplier
  3672  001024  C02E  F002         	movff	add_tasks@temp_next+1,i2___wmul@multiplier+1
  3673  001028  0E00               	movlw	0
  3674  00102A  6E04               	movwf	(i2___wmul@multiplicand+1)^0,c
  3675  00102C  0E17               	movlw	23
  3676  00102E  6E03               	movwf	i2___wmul@multiplicand^0,c
  3677  001030  EC15  F00C         	call	i2___wmul	;wreg free
  3678  001034  0E15               	movlw	low (_tasks+21)
  3679  001036  2401               	addwf	?i2___wmul^0,w,c
  3680  001038  6ED9               	movwf	fsr2l,c
  3681  00103A  0E01               	movlw	high (_tasks+21)
  3682  00103C  2002               	addwfc	(?i2___wmul+1)^0,w,c
  3683  00103E  6EDA               	movwf	fsr2h,c
  3684  001040  CFDE F02D          	movff	postinc2,add_tasks@temp_next
  3685  001044  CFDD F02E          	movff	postdec2,add_tasks@temp_next+1
  3686  001048  EF83  F005         	goto	i2l237
  3687  00104C                     i2l236:
  3688  00104C  0012               	return		;funcret
  3689  00104E                     __end_of_add_tasks:
  3690                           	opt callstack 0
  3691                           
  3692 ;; *************** function i2___wmul *****************
  3693 ;; Defined at:
  3694 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\Umul16.c"
  3695 ;; Parameters:    Size  Location     Type
  3696 ;;  multiplier      2    0[COMRAM] unsigned int 
  3697 ;;  multiplicand    2    2[COMRAM] unsigned int 
  3698 ;; Auto vars:     Size  Location     Type
  3699 ;;  __wmul          2    4[COMRAM] unsigned int 
  3700 ;; Return value:  Size  Location     Type
  3701 ;;                  2    0[COMRAM] unsigned int 
  3702 ;; Registers used:
  3703 ;;		wreg, status,2, status,0, prodl, prodh
  3704 ;; Tracked objects:
  3705 ;;		On entry : 0/0
  3706 ;;		On exit  : 0/0
  3707 ;;		Unchanged: 0/0
  3708 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3709 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3710 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3711 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3712 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3713 ;;Total ram usage:        6 bytes
  3714 ;; Hardware stack levels used:    1
  3715 ;; This function calls:
  3716 ;;		Nothing
  3717 ;; This function is called by:
  3718 ;;		_timer_ISR
  3719 ;;		_add_tasks
  3720 ;; This function uses a non-reentrant model
  3721 ;;
  3722                           
  3723                           	psect	text12
  3724  00182A                     __ptext12:
  3725                           	opt callstack 0
  3726  00182A                     i2___wmul:
  3727                           	opt callstack 25
  3728  00182A  5001               	movf	i2___wmul@multiplier^0,w,c
  3729  00182C  0203               	mulwf	i2___wmul@multiplicand^0,c
  3730  00182E  CFF3 F005          	movff	prodl,i2___wmul@product
  3731  001832  CFF4 F006          	movff	prodh,i2___wmul@product+1
  3732  001836  5001               	movf	i2___wmul@multiplier^0,w,c
  3733  001838  0204               	mulwf	(i2___wmul@multiplicand+1)^0,c
  3734  00183A  50F3               	movf	243,w,c
  3735  00183C  2606               	addwf	(i2___wmul@product+1)^0,f,c
  3736  00183E  5002               	movf	(i2___wmul@multiplier+1)^0,w,c
  3737  001840  0203               	mulwf	i2___wmul@multiplicand^0,c
  3738  001842  50F3               	movf	243,w,c
  3739  001844  2606               	addwf	(i2___wmul@product+1)^0,f,c
  3740  001846  C005  F001         	movff	i2___wmul@product,?i2___wmul
  3741  00184A  C006  F002         	movff	i2___wmul@product+1,?i2___wmul+1
  3742  00184E  0012               	return		;funcret
  3743  001850                     __end_ofi2___wmul:
  3744                           	opt callstack 0
  3745  0000                     
  3746                           	psect	text13
  3747  000000                     __ptext13:
  3748                           	opt callstack 0
  3749  000000                     
  3750                           	psect	rparam
  3751  0000                     
  3752                           	psect	temp
  3753  000052                     btemp:
  3754                           	opt callstack 0
  3755  000052                     	ds	1
  3756  0000                     int$flags	set	btemp
  3757  0000                     wtemp8	set	btemp+1
  3758  0000                     ttemp5	set	btemp+1
  3759  0000                     ttemp6	set	btemp+4
  3760  0000                     ttemp7	set	btemp+8
  3761                           tosu	equ	0xFFF
  3762                           tosh	equ	0xFFE
  3763                           tosl	equ	0xFFD
  3764                           stkptr	equ	0xFFC
  3765                           pclatu	equ	0xFFB
  3766                           pclath	equ	0xFFA
  3767                           pcl	equ	0xFF9
  3768                           tblptru	equ	0xFF8
  3769                           tblptrh	equ	0xFF7
  3770                           tblptrl	equ	0xFF6
  3771                           tablat	equ	0xFF5
  3772                           prodh	equ	0xFF4
  3773                           prodl	equ	0xFF3
  3774                           indf0	equ	0xFEF
  3775                           postinc0	equ	0xFEE
  3776                           postdec0	equ	0xFED
  3777                           preinc0	equ	0xFEC
  3778                           plusw0	equ	0xFEB
  3779                           fsr0h	equ	0xFEA
  3780                           fsr0l	equ	0xFE9
  3781                           wreg	equ	0xFE8
  3782                           indf1	equ	0xFE7
  3783                           postinc1	equ	0xFE6
  3784                           postdec1	equ	0xFE5
  3785                           preinc1	equ	0xFE4
  3786                           plusw1	equ	0xFE3
  3787                           fsr1h	equ	0xFE2
  3788                           fsr1l	equ	0xFE1
  3789                           bsr	equ	0xFE0
  3790                           indf2	equ	0xFDF
  3791                           postinc2	equ	0xFDE
  3792                           postdec2	equ	0xFDD
  3793                           preinc2	equ	0xFDC
  3794                           plusw2	equ	0xFDB
  3795                           fsr2h	equ	0xFDA
  3796                           fsr2l	equ	0xFD9
  3797                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         273
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     68      83
    BANK0           160     71      99
    BANK1           256      0     230
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           96      0       0

Pointer List with Targets:

    register_timer@data	PTR void  size(2) Largest target is 3935
		 -> RAM(DATA[3935]), NULL(NULL[0]), 

    register_timer@callback	PTR FTN()void  size(3) Largest target is 1
		 -> blink_LED_3(), blink_LED_2(), blink_LED_1(), 

    S25$data	PTR void  size(2) Largest target is 3935
		 -> RAM(DATA[3935]), NULL(NULL[0]), 

    tasks.data	PTR void  size(2) Largest target is 3935
		 -> RAM(DATA[3935]), NULL(NULL[0]), 

    S25$callback	PTR FTN()void  size(3) Largest target is 1
		 -> NULL(NULL[0]), blink_LED_3(), blink_LED_2(), blink_LED_1(), 

    tasks.callback	PTR FTN()void  size(3) Largest target is 1
		 -> NULL(NULL[0]), blink_LED_3(), blink_LED_2(), blink_LED_1(), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _main_interrupt in COMRAM

    _main_interrupt->_timer_ISR
    _timer_ISR->_add_tasks
    _add_tasks->i2___wmul

Critical Paths under _main in BANK0

    _main->_initial_register
    _initial_register->_register_timer
    _register_timer->___wmul
    _dispatch->_blink_LED_1
    _dispatch->_blink_LED_2
    _dispatch->_blink_LED_3
    _blink_LED_3->___wmul
    _blink_LED_2->___wmul
    _blink_LED_1->___wmul

Critical Paths under _main_interrupt in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main_interrupt in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main_interrupt in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main_interrupt in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main_interrupt in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main_interrupt in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main_interrupt in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main_interrupt in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main_interrupt in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main_interrupt in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main_interrupt in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main_interrupt in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main_interrupt in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main_interrupt in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main_interrupt in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _main_interrupt in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   26061
                           _dispatch
                   _initial_register
                        _start_timer
 ---------------------------------------------------------------------------------
 (1) _start_timer                                          5     3      2     121
                                              0 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (1) _initial_register                                     4     4      0   14072
                                             67 BANK0      4     4      0
                     _register_timer
 ---------------------------------------------------------------------------------
 (2) _register_timer                                      63    42     21   14066
                                              6 BANK0     61    40     21
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _dispatch                                             4     4      0   11868
                                             10 BANK0      4     4      0
                             ___wmul
                        _blink_LED_1 *
                        _blink_LED_2 *
                        _blink_LED_3 *
 ---------------------------------------------------------------------------------
 (2) _blink_LED_3                                          4     2      2      75
                                              6 BANK0      4     2      2
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) _blink_LED_2                                          4     2      2      22
                                              6 BANK0      4     2      2
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) _blink_LED_1                                          4     2      2      22
                                              6 BANK0      4     2      2
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4   11615
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _main_interrupt                                       8     8      0    4867
                                             60 COMRAM     8     8      0
                          _timer_ISR
 ---------------------------------------------------------------------------------
 (5) _timer_ISR                                           14    12      2    4866
                                             46 COMRAM    14    12      2
                          _add_tasks
                           i2___wmul
 ---------------------------------------------------------------------------------
 (6) _add_tasks                                           40    38      2    2848
                                              6 COMRAM    40    38      2
                           i2___wmul
 ---------------------------------------------------------------------------------
 (6) i2___wmul                                             6     2      4    1927
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _dispatch
     ___wmul
     _blink_LED_1 *
       ___wmul (ARG)
     _blink_LED_2 *
       ___wmul (ARG)
     _blink_LED_3 *
       ___wmul (ARG)
   _initial_register
     _register_timer
       ___wmul
   _start_timer

 _main_interrupt (ROOT)
   _timer_ISR
     _add_tasks
       i2___wmul
     i2___wmul

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F5F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      E6       7       89.8%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     47      63       5       61.9%
BITBANK15           60      0       0      35        0.0%
BANK15              60      0       0      36        0.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     44      53       1       88.3%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     19C      32        0.0%
DATA                 0      0     19C       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.10 build 88905656 
Symbol Table                                                                                   Mon Nov 04 09:12:15 2019

      ___wmul@multiplicand 0062                        l202 0356                        l203 03C0  
                      l132 1642                        l125 15BC                        l118 16C0  
                      l135 12CA                        l232 1536                        l244 1828  
                      l196 088A                        l189 173C                        u400 0030  
                      u401 002C                        u410 0090                        u411 008C  
                      u340 1658                        u420 0150                        u341 1652  
                      u421 014C                        u350 167C                        u510 14DC  
                      u430 022A                        u351 1676                        u511 14D8  
                      u431 0226                        u360 154C                        u520 1536  
                      u440 03F6                        u361 1546                        u521 1532  
                      u441 03F2                        u346 165A                        u370 1574  
                      u450 058A                        u371 156E                        u451 0586  
                      u380 15D2                        u356 167E                        u508 14A2  
                      u381 15CC                        u509 14B6                        u390 15FC  
                      u366 154E                        u391 15F6                        u376 1576  
                      u386 15D4                        u396 15FE                _start_timer 16C2  
                      tosl 000FFD                        wreg 000FE8       _ALLOW_TIMER_REGISTER 0051  
             __CFG_LVP$OFF 000000               __CFG_WDT$OFF 000000                       l1321 1648  
                     l1401 035E                       l1307 1802                       l1323 166C  
                     l1411 055C                       l1403 03F6                       l1309 1820  
                     l1341 158E                       l1333 1538                       l1421 0738  
                     l1413 058A                       l1501 16DE                       l1351 15EC  
                     l1327 1692                       l1319 1644                       l1335 153C  
                     l1423 082E                       l1415 0698                       l1503 16EA  
                     l1511 16F4                       l1337 1564                       l1417 06E4  
                     l1409 04C0                       l1361 0012                       l1505 16EC  
                     l1513 1738                       l1355 1614                       l1347 15BE  
                     l1531 14E0                       l1523 141E                       l1419 070E  
                     l1371 0050                       l1363 0030                       l1507 16EE  
                     l1349 15C2                       l1533 14FA                       l1525 142C  
                     l1429 085C                       l1381 0150                       l1373 0090  
                     l1527 14B6                       l1535 1506                       l1383 017A  
                     l1391 01DA                       l1375 009C                       l1367 0044  
                     l1551 17E4                       l1529 14DC                       l1393 022A  
                     l1385 0182                       l1377 00A4                       l1369 0048  
                     l1553 17E8                       l1395 034A                       l1387 01C4  
                     l1379 013E                       l1491 16CA                       l1555 17F6  
                     l1493 16CE                       l1549 17D8                       l1487 104E  
                     l1495 16D0                       l1673 170A                       l1497 16D2  
                     l1489 16C2                       l1675 15A6                       l1499 16D8  
                     l1677 16AA                       l1679 162C                       _LATD 000F8C  
       _NUMBER_EXIST_TASKS 00BD                       i2l45 178E                       _main 17D8  
                     _time 0043                       fsr1h 000FE2                       fsr2h 000FDA  
                     fsr1l 000FE1                       fsr2l 000FD9                       btemp 0052  
                     prodh 000FF4                       prodl 000FF3                       start 000E  
            __CFG_IESO$OFF 000000              __CFG_MCLRE$ON 000000               ___param_bank 000000  
                    ?_main 0001                      _T0CON 000FD5                      _T1CON 000FCD  
                    i2l223 1368                      i2l225 141C                      i2l244 184E  
                    i2l236 104C                      i2l237 0B06                      _TMR0H 000FD7  
                    _TMR1H 000FCF                      _TMR0L 000FD6                      _TMR1L 000FCE  
                    _PORTD 000F83                      _TRISD 000F95              __CFG_PWRT$OFF 000000  
           __CFG_FCMEN$OFF 000000                      _tasks 0100             __CFG_BOREN$OFF 000000  
                    pclath 000FFA           __end_ofi2___wmul 1850                      plusw2 000FDB  
                    ttemp5 0053                      ttemp6 0056                      ttemp7 005A  
                    status 000FD8                      wtemp8 0053            __initialization 17AA  
             __end_of_main 1802          ?_initial_register 0001       __size_of_blink_LED_1 007E  
     __size_of_blink_LED_2 0086       __size_of_blink_LED_3 0086         ??_initial_register 00A3  
                   ??_main 00A7              __activetblptr 000003      start_timer@time_vaddr 0064  
                   _ADCON1 000FC1             _register_timer 0012                     i2l1313 182A  
                   i2l1315 1846                     i2l1441 0A9A                     i2l1451 0C3E  
                   i2l1435 088C                     i2l1461 0F04                     i2l1453 0D24  
                   i2l1445 0AA6                     i2l1437 0894                     i2l1541 1774  
                   i2l1463 0F2C                     i2l1455 0E6C                     i2l1447 0B3A  
                   i2l1439 0902                     i2l1471 135C                     i2l1543 1778  
                   i2l1457 0EB4                     i2l1473 1370                     i2l1481 13D6  
                   i2l1545 1788                     i2l1537 1758                     i2l1459 0EDC  
                   i2l1467 1020                     i2l1483 1414                     i2l1475 1398  
                   i2l1547 178C                     i2l1539 1766                     i2l1477 13BE  
                   i2l1469 12CC                     i2l1479 13CA                     _OSCCON 000FD3  
           _main_interrupt 0008             __CFG_XINST$OFF 000000         add_tasks@temp_next 002D  
         __end_of_dispatch 1538                     ___wmul 1802                     _ledVal 004B  
                   clear_0 17B0                     clear_1 17BC                     clear_2 17C8  
   __end_of_register_timer 088C                 __accesstop 0060    __end_of__initialization 17CE  
   __end_of_main_interrupt 17AA              ___rparam_used 000001         __size_of_add_tasks 07C2  
           __pcstackCOMRAM 0001                  ?i2___wmul 0001               ?_start_timer 0060  
          __CFG_OSC$INTIO7 000000            ?_register_timer 0066                 __pbssBANK0 00A7  
               __pbssBANK1 0100            ?_main_interrupt 0001                    ?___wmul 0060  
       register_timer@data 0079   register_timer@temp_delay 0099                 ??i2___wmul 0005  
 register_timer@temp_index 00A1         __size_of_timer_ISR 0152          __end_of_add_tasks 104E  
                  i2u53_40 1766                    i2u53_41 1762                    i2u46_40 0902  
                  i2u54_40 1774                    i2u46_41 08FE                    i2u54_41 1770  
                  i2u47_40 0B3A                    i2u55_40 1788                    i2u47_41 0B36  
                  i2u55_41 1784                    i2u48_40 0D24                    i2u48_41 0D20  
                  i2u49_40 1414                    i2u49_41 1410                  ?_dispatch 0001  
      add_tasks@temp_delay 0025       register_timer@period 006E                    __Hparam 0000  
                  __Lparam 0000            __size_of___wmul 0028                    __pcinit 17AA  
                  __ramtop 1000                    __ptext0 17D8                    __ptext1 16C2  
                  __ptext2 104E                    __ptext3 0012                    __ptext4 141E  
                  __ptext5 1538                    __ptext6 1644                    __ptext7 15BE  
                  __ptext8 1802                  _T1CONbits 000FCD  __size_of_initial_register 027E  
               ??_dispatch 006A             __pintcode_body 173E       end_of_initialization 17CE  
                  int_func 173E        i2___wmul@multiplier 0001          __end_of_timer_ISR 141E  
           _add_tasks$1261 0023             _add_tasks$1262 0021              ??_blink_LED_1 0068  
            ??_blink_LED_2 0068              ??_blink_LED_3 0068                    postdec1 000FE5  
                  postdec2 000FDD                    postinc0 000FEE                    postinc1 000FE6  
                  postinc2 000FDE                  _TRISAbits 000F92                  _TRISBbits 000F93  
     __size_of_start_timer 007C             __end_of___wmul 182A     register_timer@callback 0076  
      __end_of_blink_LED_1 16C2        __end_of_blink_LED_2 15BE        __end_of_blink_LED_3 1644  
         ??_register_timer 007B           i2___wmul@product 0005        start_initialization 17AA  
        __size_ofi2___wmul 0026           ??_main_interrupt 003D                   ??___wmul 0064  
              __pbssCOMRAM 0043              __pcstackBANK0 0060           _initial_register 104E  
                _add_tasks 088C          __size_of_dispatch 011A                _blink_LED_1 1644  
              _blink_LED_2 1538                _blink_LED_3 15BE                  __pintcode 0008  
      _register_timer$1250 0093        _register_timer$1249 0097                add_tasks@id 0007  
      register_timer@delay 0066                  _execution 00A7                 ?_add_tasks 0007  
           ___wmul@product 0064                   _LATDbits 000F8C                   _PIE1bits 000F9D  
                 _PIR1bits 000F9E                  _timer_ISR 12CC                 timer_ISR@i 003B  
        ___wmul@multiplier 0060                   i2___wmul 182A                  dispatch@i 006C  
             _NUMBER_EXIST 00BF                _count_count 004D            register_timer@i 0095  
                 __Hrparam 0000                   __Lrparam 0000                 ?_timer_ISR 002F  
               _HEAD_ARRAY 004F                 _HEAD_QUEUE 00BB      i2___wmul@multiplicand 0003  
            ??_start_timer 0062                   __ptext10 12CC                   __ptext11 088C  
                 __ptext12 182A                   __ptext13 0000                ??_add_tasks 0009  
                 _dispatch 141E              __size_of_main 002A               _remove_tasks 00C1  
 __end_of_initial_register 12CC                   int$flags 0052                 _INTCONbits 000FF2  
           fp__blink_LED_1 0000             fp__blink_LED_2 0000             fp__blink_LED_3 0000  
     initial_register@temp 00A3        __end_of_start_timer 173E                   intlevel2 0000  
            timer_ISR@temp 0039               ?_blink_LED_1 0066               ?_blink_LED_2 0066  
             ?_blink_LED_3 0066                ??_timer_ISR 0031           blink_LED_1@index 0066  
         blink_LED_2@index 0066           blink_LED_3@index 0066            start_timer@type 0060  
  __size_of_register_timer 087A    __size_of_main_interrupt 17A2  
