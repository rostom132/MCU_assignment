

Microchip MPLAB XC8 Assembler V2.10 build 88905656 
                                                                                               Mon Nov 25 12:10:03 2019

Microchip MPLAB XC8 C Compiler v2.10 (Free license) build 20190730164152 Og1 
     1                           	processor	18F8722
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    15                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    16                           	psect	text0,global,reloc=2,class=CODE,delta=1
    17                           	psect	text1,global,reloc=2,class=CODE,delta=1
    18                           	psect	text2,global,reloc=2,class=CODE,delta=1
    19                           	psect	text3,global,reloc=2,class=CODE,delta=1
    20                           	psect	text4,global,reloc=2,class=CODE,delta=1
    21                           	psect	text5,global,reloc=2,class=CODE,delta=1
    22                           	psect	text6,global,reloc=2,class=CODE,delta=1
    23                           	psect	text7,global,reloc=2,class=CODE,delta=1
    24                           	psect	text8,global,reloc=2,class=CODE,delta=1
    25                           	psect	text9,global,reloc=2,class=CODE,delta=1
    26                           	psect	text10,global,reloc=2,class=CODE,delta=1
    27                           	psect	text11,global,reloc=2,class=CODE,delta=1
    28                           	psect	text12,global,reloc=2,class=CODE,delta=1
    29                           	psect	text13,global,reloc=2,class=CODE,delta=1
    30                           	psect	text14,global,reloc=2,class=CODE,delta=1
    31                           	psect	text15,global,reloc=2,class=CODE,delta=1
    32                           	psect	text16,global,reloc=2,class=CODE,delta=1
    33                           	psect	text17,global,reloc=2,class=CODE,delta=1
    34                           	psect	text18,global,reloc=2,class=CODE,delta=1
    35                           	psect	text19,global,reloc=2,class=CODE,delta=1
    36                           	psect	text20,global,reloc=2,class=CODE,delta=1
    37                           	psect	text21,global,reloc=2,class=CODE,delta=1
    38                           	psect	text22,global,reloc=2,class=CODE,delta=1
    39                           	psect	text23,global,reloc=2,class=CODE,delta=1
    40                           	psect	text24,global,reloc=2,class=CODE,delta=1,group=1
    41                           	psect	text25,global,reloc=2,class=CODE,delta=1
    42                           	psect	text26,global,reloc=2,class=CODE,delta=1
    43                           	psect	text27,global,reloc=2,class=CODE,delta=1
    44                           	psect	text28,global,reloc=2,class=CODE,delta=1
    45                           	psect	text29,global,reloc=2,class=CODE,delta=1,group=1
    46                           	psect	text30,global,reloc=2,class=CODE,delta=1,group=1
    47                           	psect	text31,global,reloc=2,class=CODE,delta=1
    48                           	psect	text32,global,reloc=2,class=CODE,delta=1
    49                           	psect	text33,global,reloc=2,class=CODE,delta=1
    50                           	psect	text34,global,reloc=2,class=CODE,delta=1
    51                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    52                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    53                           	psect	text36,global,reloc=2,class=CODE,delta=1
    54                           	psect	text37,global,reloc=2,class=CODE,delta=1
    55                           	psect	text38,global,reloc=2,class=CODE,delta=1
    56                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    57                           	psect	text39,global,reloc=2,class=CODE,delta=1
    58                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    59                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    60  0000                     
    61                           ; Version 2.10
    62                           ; Generated 31/07/2019 GMT
    63                           ; 
    64                           ; Copyright Â© 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
    65                           ; All rights reserved.
    66                           ; 
    67                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    68                           ; 
    69                           ; Redistribution and use in source and binary forms, with or without modification, are
    70                           ; permitted provided that the following conditions are met:
    71                           ; 
    72                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    73                           ;        conditions and the following disclaimer.
    74                           ; 
    75                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    76                           ;        of conditions and the following disclaimer in the documentation and/or other
    77                           ;        materials provided with the distribution.
    78                           ; 
    79                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    80                           ;        software without specific prior written permission.
    81                           ; 
    82                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    83                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    84                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    85                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    86                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    87                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    88                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    89                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    90                           ; 
    91                           ; 
    92                           ; Code-generator required, PIC18F8722 Definitions
    93                           ; 
    94                           ; SFR Addresses
    95  0000                     
    96                           	psect	idataCOMRAM
    97  003C74                     __pidataCOMRAM:
    98                           	opt callstack 0
    99                           
   100                           ;initializer for _HUMI_SWAP
   101  003C74  32                 	db	50
   102                           
   103                           ;initializer for _BUTTON_INC_STATE
   104  003C75  01                 	db	1
   105                           
   106                           ;initializer for _first_read_A
   107  003C76  01                 	db	1
   108                           
   109                           	psect	idataBANK0
   110  003C6C                     __pidataBANK0:
   111                           	opt callstack 0
   112                           
   113                           ;initializer for _TEMP_SWAP
   114  003C6C  05                 	db	5
   115                           
   116                           ;initializer for _TIME_SWAP
   117  003C6D  01                 	db	1
   118                           
   119                           ;initializer for _BUTTON_STATE
   120  003C6E  01                 	db	1
   121                           
   122                           ;initializer for _first_read_B
   123  003C6F  01                 	db	1
   124  0000                     _TMR0	set	4054
   125  0000                     _PORTCbits	set	3970
   126  0000                     _LATCbits	set	3979
   127  0000                     _LATAbits	set	3977
   128  0000                     _TRISCbits	set	3988
   129  0000                     _LATFbits	set	3982
   130  0000                     _TRISFbits	set	3991
   131  0000                     _PORTBbits	set	3969
   132  0000                     _PORTAbits	set	3968
   133  0000                     _T1CONbits	set	4045
   134  0000                     _PIE1bits	set	3997
   135  0000                     _PIR1bits	set	3998
   136  0000                     _TMR1L	set	4046
   137  0000                     _TMR1H	set	4047
   138  0000                     _T1CON	set	4045
   139  0000                     _T0CON	set	4053
   140  0000                     _LATDbits	set	3980
   141  0000                     _TRISBbits	set	3987
   142  0000                     _TRISAbits	set	3986
   143  0000                     _ADCON1	set	4033
   144  0000                     _PORTD	set	3971
   145  0000                     _TRISD	set	3989
   146  0000                     _OSCTUNE	set	3995
   147  0000                     _OSCCON	set	4051
   148  0000                     _INTCONbits	set	4082
   149                           
   150                           	psect	smallconst
   151  001000                     __psmallconst:
   152                           	opt callstack 0
   153  001000  00                 	db	0
   154  001001                     STR_9:
   155  001001  53                 	db	83	;'S'
   156  001002  65                 	db	101	;'e'
   157  001003  74                 	db	116	;'t'
   158  001004  20                 	db	32
   159  001005  54                 	db	84	;'T'
   160  001006  49                 	db	73	;'I'
   161  001007  4D                 	db	77	;'M'
   162  001008  45                 	db	69	;'E'
   163  001009  3A                 	db	58	;':'
   164  00100A  20                 	db	32
   165  00100B  20                 	db	32
   166  00100C  20                 	db	32
   167  00100D  20                 	db	32
   168  00100E  20                 	db	32
   169  00100F  20                 	db	32
   170  001010  20                 	db	32
   171  001011  00                 	db	0
   172  001012                     STR_11:
   173  001012  53                 	db	83	;'S'
   174  001013  65                 	db	101	;'e'
   175  001014  74                 	db	116	;'t'
   176  001015  20                 	db	32
   177  001016  48                 	db	72	;'H'
   178  001017  55                 	db	85	;'U'
   179  001018  4D                 	db	77	;'M'
   180  001019  49                 	db	73	;'I'
   181  00101A  3A                 	db	58	;':'
   182  00101B  20                 	db	32
   183  00101C  20                 	db	32
   184  00101D  20                 	db	32
   185  00101E  20                 	db	32
   186  00101F  20                 	db	32
   187  001020  20                 	db	32
   188  001021  20                 	db	32
   189  001022  00                 	db	0
   190  001023                     STR_7:
   191  001023  20                 	db	32
   192  001024  20                 	db	32
   193  001025  20                 	db	32
   194  001026  20                 	db	32
   195  001027  57                 	db	87	;'W'
   196  001028  4F                 	db	79	;'O'
   197  001029  52                 	db	82	;'R'
   198  00102A  4B                 	db	75	;'K'
   199  00102B  49                 	db	73	;'I'
   200  00102C  4E                 	db	78	;'N'
   201  00102D  47                 	db	71	;'G'
   202  00102E  20                 	db	32
   203  00102F  20                 	db	32
   204  001030  20                 	db	32
   205  001031  20                 	db	32
   206  001032  20                 	db	32
   207  001033  00                 	db	0
   208  001034                     STR_6:
   209  001034  20                 	db	32
   210  001035  20                 	db	32
   211  001036  20                 	db	32
   212  001037  20                 	db	32
   213  001038  48                 	db	72	;'H'
   214  001039  45                 	db	69	;'E'
   215  00103A  41                 	db	65	;'A'
   216  00103B  54                 	db	84	;'T'
   217  00103C  20                 	db	32
   218  00103D  55                 	db	85	;'U'
   219  00103E  50                 	db	80	;'P'
   220  00103F  20                 	db	32
   221  001040  20                 	db	32
   222  001041  20                 	db	32
   223  001042  20                 	db	32
   224  001043  20                 	db	32
   225  001044  00                 	db	0
   226  001045                     STR_3:
   227  001045  20                 	db	32
   228  001046  20                 	db	32
   229  001047  20                 	db	32
   230  001048  20                 	db	32
   231  001049  53                 	db	83	;'S'
   232  00104A  4C                 	db	76	;'L'
   233  00104B  45                 	db	69	;'E'
   234  00104C  45                 	db	69	;'E'
   235  00104D  50                 	db	80	;'P'
   236  00104E  49                 	db	73	;'I'
   237  00104F  4E                 	db	78	;'N'
   238  001050  47                 	db	71	;'G'
   239  001051  20                 	db	32
   240  001052  20                 	db	32
   241  001053  20                 	db	32
   242  001054  20                 	db	32
   243  001055  00                 	db	0
   244  001056                     STR_8:
   245  001056  20                 	db	32
   246  001057  20                 	db	32
   247  001058  20                 	db	32
   248  001059  20                 	db	32
   249  00105A  54                 	db	84	;'T'
   250  00105B  49                 	db	73	;'I'
   251  00105C  4D                 	db	77	;'M'
   252  00105D  45                 	db	69	;'E'
   253  00105E  20                 	db	32
   254  00105F  4F                 	db	79	;'O'
   255  001060  55                 	db	85	;'U'
   256  001061  54                 	db	84	;'T'
   257  001062  20                 	db	32
   258  001063  20                 	db	32
   259  001064  20                 	db	32
   260  001065  20                 	db	32
   261  001066  00                 	db	0
   262  001067                     STR_2:
   263  001067  20                 	db	32
   264  001068  20                 	db	32
   265  001069  20                 	db	32
   266  00106A  49                 	db	73	;'I'
   267  00106B  44                 	db	68	;'D'
   268  00106C  3A                 	db	58	;':'
   269  00106D  31                 	db	49	;'1'
   270  00106E  37                 	db	55	;'7'
   271  00106F  35                 	db	53	;'5'
   272  001070  32                 	db	50	;'2'
   273  001071  35                 	db	53	;'5'
   274  001072  34                 	db	52	;'4'
   275  001073  31                 	db	49	;'1'
   276  001074  20                 	db	32
   277  001075  20                 	db	32
   278  001076  20                 	db	32
   279  001077  00                 	db	0
   280  001078                     STR_4:
   281  001078  54                 	db	84	;'T'
   282  001079  45                 	db	69	;'E'
   283  00107A  4D                 	db	77	;'M'
   284  00107B  50                 	db	80	;'P'
   285  00107C  3A                 	db	58	;':'
   286  00107D  4E                 	db	78	;'N'
   287  00107E  41                 	db	65	;'A'
   288  00107F  20                 	db	32
   289  001080  48                 	db	72	;'H'
   290  001081  55                 	db	85	;'U'
   291  001082  4D                 	db	77	;'M'
   292  001083  49                 	db	73	;'I'
   293  001084  44                 	db	68	;'D'
   294  001085  3A                 	db	58	;':'
   295  001086  4E                 	db	78	;'N'
   296  001087  41                 	db	65	;'A'
   297  001088  00                 	db	0
   298  001089                     STR_1:
   299  001089  44                 	db	68	;'D'
   300  00108A  52                 	db	82	;'R'
   301  00108B  59                 	db	89	;'Y'
   302  00108C  20                 	db	32
   303  00108D  46                 	db	70	;'F'
   304  00108E  4F                 	db	79	;'O'
   305  00108F  4F                 	db	79	;'O'
   306  001090  44                 	db	68	;'D'
   307  001091  20                 	db	32
   308  001092  4D                 	db	77	;'M'
   309  001093  41                 	db	65	;'A'
   310  001094  43                 	db	67	;'C'
   311  001095  48                 	db	72	;'H'
   312  001096  49                 	db	73	;'I'
   313  001097  4E                 	db	78	;'N'
   314  001098  45                 	db	69	;'E'
   315  001099  00                 	db	0
   316  00109A                     STR_10:
   317  00109A  53                 	db	83	;'S'
   318  00109B  65                 	db	101	;'e'
   319  00109C  74                 	db	116	;'t'
   320  00109D  20                 	db	32
   321  00109E  54                 	db	84	;'T'
   322  00109F  45                 	db	69	;'E'
   323  0010A0  4D                 	db	77	;'M'
   324  0010A1  50                 	db	80	;'P'
   325  0010A2  3A                 	db	58	;':'
   326  0010A3  20                 	db	32
   327  0010A4  00                 	db	0
   328  0000                     
   329                           ; #config settings
   330  0010A5  00                 	db	0	; dummy byte at the end
   331  0000                     
   332                           	psect	cinit
   333  0037D8                     __pcinit:
   334                           	opt callstack 0
   335  0037D8                     start_initialization:
   336                           	opt callstack 0
   337  0037D8                     __initialization:
   338                           	opt callstack 0
   339                           
   340                           ; Initialize objects allocated to BANK0 (4 bytes)
   341                           ; load TBLPTR registers with __pidataBANK0
   342  0037D8  0E6C               	movlw	low __pidataBANK0
   343  0037DA  6EF6               	movwf	tblptrl,c
   344  0037DC  0E3C               	movlw	high __pidataBANK0
   345  0037DE  6EF7               	movwf	tblptrh,c
   346  0037E0  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   347  0037E2  6EF8               	movwf	tblptru,c
   348  0037E4  EE00  F0E0         	lfsr	0,__pdataBANK0
   349  0037E8  EE10 F004          	lfsr	1,4
   350  0037EC                     copy_data0:
   351  0037EC  0009               	tblrd		*+
   352  0037EE  CFF5 FFEE          	movff	tablat,postinc0
   353  0037F2  50E5               	movf	postdec1,w,c
   354  0037F4  50E1               	movf	fsr1l,w,c
   355  0037F6  E1FA               	bnz	copy_data0
   356                           
   357                           ; Initialize objects allocated to COMRAM (3 bytes)
   358                           ; load TBLPTR registers with __pidataCOMRAM
   359  0037F8  0E74               	movlw	low __pidataCOMRAM
   360  0037FA  6EF6               	movwf	tblptrl,c
   361  0037FC  0E3C               	movlw	high __pidataCOMRAM
   362  0037FE  6EF7               	movwf	tblptrh,c
   363  003800  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   364  003802  6EF8               	movwf	tblptru,c
   365  003804  0009               	tblrd		*+	;fetch initializer
   366  003806  CFF5 F05A          	movff	tablat,__pdataCOMRAM
   367  00380A  0009               	tblrd		*+	;fetch initializer
   368  00380C  CFF5 F05B          	movff	tablat,__pdataCOMRAM+1
   369  003810  0009               	tblrd		*+	;fetch initializer
   370  003812  CFF5 F05C          	movff	tablat,__pdataCOMRAM+2
   371                           
   372                           ; Clear objects allocated to BANK1 (230 bytes)
   373  003816  EE01  F000         	lfsr	0,__pbssBANK1
   374  00381A  0EE6               	movlw	230
   375  00381C                     clear_0:
   376  00381C  6AEE               	clrf	postinc0,c
   377  00381E  06E8               	decf	wreg,f,c
   378  003820  E1FD               	bnz	clear_0
   379                           
   380                           ; Clear objects allocated to BANK0 (47 bytes)
   381  003822  EE00  F0B1         	lfsr	0,__pbssBANK0
   382  003826  0E2F               	movlw	47
   383  003828                     clear_1:
   384  003828  6AEE               	clrf	postinc0,c
   385  00382A  06E8               	decf	wreg,f,c
   386  00382C  E1FD               	bnz	clear_1
   387                           
   388                           ; Clear objects allocated to COMRAM (22 bytes)
   389  00382E  EE00  F044         	lfsr	0,__pbssCOMRAM
   390  003832  0E16               	movlw	22
   391  003834                     clear_2:
   392  003834  6AEE               	clrf	postinc0,c
   393  003836  06E8               	decf	wreg,f,c
   394  003838  E1FD               	bnz	clear_2
   395  00383A                     end_of_initialization:
   396                           	opt callstack 0
   397  00383A                     __end_of__initialization:
   398                           	opt callstack 0
   399  00383A  905D               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   400  00383C  925D               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   401  00383E  0100               	movlb	0
   402  003840  EFB8  F01D         	goto	_main	;jump to C main() function
   403                           
   404                           	psect	bssCOMRAM
   405  000044                     __pbssCOMRAM:
   406                           	opt callstack 0
   407  000044                     _time:
   408                           	opt callstack 0
   409  000044                     	ds	8
   410  00004C                     _ledVal:
   411                           	opt callstack 0
   412  00004C                     	ds	2
   413  00004E                     _count_count:
   414                           	opt callstack 0
   415  00004E                     	ds	2
   416  000050                     _HEAD_ARRAY:
   417                           	opt callstack 0
   418  000050                     	ds	2
   419  000052                     _temp_humidity:
   420                           	opt callstack 0
   421  000052                     	ds	2
   422  000054                     _FLAG_BUG:
   423                           	opt callstack 0
   424  000054                     	ds	1
   425  000055                     _ALLOW_TIMER_REGISTER:
   426                           	opt callstack 0
   427  000055                     	ds	1
   428  000056                     _state_working:
   429                           	opt callstack 0
   430  000056                     	ds	1
   431  000057                     _state_machine:
   432                           	opt callstack 0
   433  000057                     	ds	1
   434  000058                     _id_hold_but_B:
   435                           	opt callstack 0
   436  000058                     	ds	1
   437  000059                     _second_read_A:
   438                           	opt callstack 0
   439  000059                     	ds	1
   440                           
   441                           	psect	dataCOMRAM
   442  00005A                     __pdataCOMRAM:
   443                           	opt callstack 0
   444  00005A                     _HUMI_SWAP:
   445                           	opt callstack 0
   446  00005A                     	ds	1
   447  00005B                     _BUTTON_INC_STATE:
   448                           	opt callstack 0
   449  00005B                     	ds	1
   450  00005C                     _first_read_A:
   451                           	opt callstack 0
   452  00005C                     	ds	1
   453                           
   454                           	psect	bssBANK0
   455  0000B1                     __pbssBANK0:
   456                           	opt callstack 0
   457  0000B1                     _execution:
   458                           	opt callstack 0
   459  0000B1                     	ds	20
   460  0000C5                     _humidity_dht11:
   461                           	opt callstack 0
   462  0000C5                     	ds	2
   463  0000C7                     _temperature_dht11:
   464                           	opt callstack 0
   465  0000C7                     	ds	2
   466  0000C9                     _HEAD_QUEUE:
   467                           	opt callstack 0
   468  0000C9                     	ds	2
   469  0000CB                     _NUMBER_EXIST_TASKS:
   470                           	opt callstack 0
   471  0000CB                     	ds	2
   472  0000CD                     _NUMBER_EXIST:
   473                           	opt callstack 0
   474  0000CD                     	ds	2
   475  0000CF                     _remove_tasks:
   476                           	opt callstack 0
   477  0000CF                     	ds	2
   478  0000D1                     _time_checkout_HEATPUMB:
   479                           	opt callstack 0
   480  0000D1                     	ds	2
   481  0000D3                     _time_checkout_HEATER:
   482                           	opt callstack 0
   483  0000D3                     	ds	2
   484  0000D5                     _temp_heat_up:
   485                           	opt callstack 0
   486  0000D5                     	ds	2
   487  0000D7                     _humidity_old:
   488                           	opt callstack 0
   489  0000D7                     	ds	1
   490  0000D8                     _temperature_old:
   491                           	opt callstack 0
   492  0000D8                     	ds	1
   493  0000D9                     _humidity:
   494                           	opt callstack 0
   495  0000D9                     	ds	1
   496  0000DA                     _temperature:
   497                           	opt callstack 0
   498  0000DA                     	ds	1
   499  0000DB                     _setting:
   500                           	opt callstack 0
   501  0000DB                     	ds	1
   502  0000DC                     _hold_but_B:
   503                           	opt callstack 0
   504  0000DC                     	ds	1
   505  0000DD                     _button_B:
   506                           	opt callstack 0
   507  0000DD                     	ds	1
   508  0000DE                     _button_A:
   509                           	opt callstack 0
   510  0000DE                     	ds	1
   511  0000DF                     _second_read_B:
   512                           	opt callstack 0
   513  0000DF                     	ds	1
   514                           
   515                           	psect	dataBANK0
   516  0000E0                     __pdataBANK0:
   517                           	opt callstack 0
   518  0000E0                     _TEMP_SWAP:
   519                           	opt callstack 0
   520  0000E0                     	ds	1
   521  0000E1                     _TIME_SWAP:
   522                           	opt callstack 0
   523  0000E1                     	ds	1
   524  0000E2                     _BUTTON_STATE:
   525                           	opt callstack 0
   526  0000E2                     	ds	1
   527  0000E3                     _first_read_B:
   528                           	opt callstack 0
   529  0000E3                     	ds	1
   530                           
   531                           	psect	bssBANK1
   532  000100                     __pbssBANK1:
   533                           	opt callstack 0
   534  000100                     _tasks:
   535                           	opt callstack 0
   536  000100                     	ds	230
   537                           
   538                           	psect	cstackBANK0
   539  000060                     __pcstackBANK0:
   540                           	opt callstack 0
   541  000060                     ??_getByte:
   542  000060                     ?___wmul:
   543                           	opt callstack 0
   544  000060                     ?___awdiv:
   545                           	opt callstack 0
   546  000060                     ?___awmod:
   547                           	opt callstack 0
   548  000060                     SendByteBBSPI@output:
   549                           	opt callstack 0
   550  000060                     start_timer@type:
   551                           	opt callstack 0
   552  000060                     ___wmul@multiplier:
   553                           	opt callstack 0
   554  000060                     ___awdiv@dividend:
   555                           	opt callstack 0
   556  000060                     ___awmod@dividend:
   557                           	opt callstack 0
   558                           
   559                           ; 2 bytes @ 0x0
   560  000060                     	ds	1
   561  000061                     SendByteBBSPI@bitcount:
   562                           	opt callstack 0
   563                           
   564                           ; 1 bytes @ 0x1
   565  000061                     	ds	1
   566  000062                     ??_start_timer:
   567  000062                     SendByteBBSPI@input:
   568                           	opt callstack 0
   569  000062                     getByte@i:
   570                           	opt callstack 0
   571  000062                     ___wmul@multiplicand:
   572                           	opt callstack 0
   573  000062                     ___awdiv@divisor:
   574                           	opt callstack 0
   575  000062                     ___awmod@divisor:
   576                           	opt callstack 0
   577                           
   578                           ; 2 bytes @ 0x2
   579  000062                     	ds	1
   580  000063                     Port_BBSPIInit@port_dir:
   581                           	opt callstack 0
   582  000063                     WritePort_BBSPI@a:
   583                           	opt callstack 0
   584  000063                     getByte@timeOut:
   585                           	opt callstack 0
   586                           
   587                           ; 2 bytes @ 0x3
   588  000063                     	ds	1
   589  000064                     start_timer@time_vaddr:
   590                           	opt callstack 0
   591  000064                     WritePort_BBSPI@port_add:
   592                           	opt callstack 0
   593  000064                     ___awdiv@counter:
   594                           	opt callstack 0
   595  000064                     ___awmod@counter:
   596                           	opt callstack 0
   597  000064                     ___wmul@product:
   598                           	opt callstack 0
   599                           
   600                           ; 2 bytes @ 0x4
   601  000064                     	ds	1
   602  000065                     LCDPutChar@ch:
   603                           	opt callstack 0
   604  000065                     LCDPutInst@ch:
   605                           	opt callstack 0
   606  000065                     getByte@j:
   607                           	opt callstack 0
   608  000065                     ___awdiv@sign:
   609                           	opt callstack 0
   610  000065                     ___awmod@sign:
   611                           	opt callstack 0
   612                           
   613                           ; 1 bytes @ 0x5
   614  000065                     	ds	1
   615  000066                     ??_LCDInit:
   616  000066                     ??_readDHT:
   617  000066                     ?_register_timer:
   618                           	opt callstack 0
   619  000066                     LCDPutStr@ptr:
   620                           	opt callstack 0
   621  000066                     ___awdiv@quotient:
   622                           	opt callstack 0
   623  000066                     remove_timer@id:
   624                           	opt callstack 0
   625  000066                     register_timer@delay:
   626                           	opt callstack 0
   627                           
   628                           ; 8 bytes @ 0x6
   629  000066                     	ds	2
   630  000068                     ??_initial_display:
   631  000068                     readDHT@checkSum:
   632                           	opt callstack 0
   633  000068                     display_state@state:
   634                           	opt callstack 0
   635                           
   636                           ; 2 bytes @ 0x8
   637  000068                     	ds	1
   638  000069                     readDHT@timeOut:
   639                           	opt callstack 0
   640                           
   641                           ; 2 bytes @ 0x9
   642  000069                     	ds	1
   643  00006A                     ??_display_state:
   644  00006A                     ??_remove_timer:
   645                           
   646                           ; 1 bytes @ 0xA
   647  00006A                     	ds	1
   648  00006B                     ?_read_button_B:
   649                           	opt callstack 0
   650  00006B                     
   651                           ; 1 bytes @ 0xB
   652  00006B                     	ds	1
   653  00006C                     ??_increaseButton:
   654                           
   655                           ; 1 bytes @ 0xC
   656  00006C                     	ds	1
   657  00006D                     
   658                           ; 1 bytes @ 0xD
   659  00006D                     	ds	1
   660  00006E                     register_timer@period:
   661                           	opt callstack 0
   662                           
   663                           ; 8 bytes @ 0xE
   664  00006E                     	ds	1
   665  00006F                     dispatch@i:
   666                           	opt callstack 0
   667                           
   668                           ; 2 bytes @ 0xF
   669  00006F                     	ds	3
   670  000072                     _remove_timer$2312:
   671                           	opt callstack 0
   672                           
   673                           ; 2 bytes @ 0x12
   674  000072                     	ds	2
   675  000074                     remove_timer@temp_index:
   676                           	opt callstack 0
   677                           
   678                           ; 2 bytes @ 0x14
   679  000074                     	ds	2
   680  000076                     ??_switch_button_state:
   681  000076                     register_timer@callback:
   682                           	opt callstack 0
   683                           
   684                           ; 3 bytes @ 0x16
   685  000076                     	ds	3
   686  000079                     register_timer@data:
   687                           	opt callstack 0
   688                           
   689                           ; 2 bytes @ 0x19
   690  000079                     	ds	2
   691  00007B                     ??_register_timer:
   692                           
   693                           ; 1 bytes @ 0x1B
   694  00007B                     	ds	24
   695  000093                     _register_timer$2311:
   696                           	opt callstack 0
   697                           
   698                           ; 2 bytes @ 0x33
   699  000093                     	ds	2
   700  000095                     register_timer@i:
   701                           	opt callstack 0
   702                           
   703                           ; 2 bytes @ 0x35
   704  000095                     	ds	2
   705  000097                     _register_timer$2310:
   706                           	opt callstack 0
   707                           
   708                           ; 2 bytes @ 0x37
   709  000097                     	ds	2
   710  000099                     register_timer@temp_delay:
   711                           	opt callstack 0
   712                           
   713                           ; 8 bytes @ 0x39
   714  000099                     	ds	8
   715  0000A1                     register_timer@temp_index:
   716                           	opt callstack 0
   717                           
   718                           ; 2 bytes @ 0x41
   719  0000A1                     	ds	2
   720  0000A3                     ??_FSM:
   721  0000A3                     initial_register@temp:
   722                           	opt callstack 0
   723                           
   724                           ; 4 bytes @ 0x43
   725  0000A3                     	ds	6
   726  0000A9                     _FSM$2315:
   727                           	opt callstack 0
   728                           
   729                           ; 8 bytes @ 0x49
   730  0000A9                     	ds	8
   731  0000B1                     
   732                           ; 1 bytes @ 0x51
   733                           
   734                           	psect	cstackCOMRAM
   735  000001                     __pcstackCOMRAM:
   736                           	opt callstack 0
   737  000001                     ?i2___wmul:
   738                           	opt callstack 0
   739  000001                     i2___wmul@multiplier:
   740                           	opt callstack 0
   741                           
   742                           ; 2 bytes @ 0x0
   743  000001                     	ds	2
   744  000003                     i2___wmul@multiplicand:
   745                           	opt callstack 0
   746                           
   747                           ; 2 bytes @ 0x2
   748  000003                     	ds	2
   749  000005                     i2___wmul@product:
   750                           	opt callstack 0
   751                           
   752                           ; 2 bytes @ 0x4
   753  000005                     	ds	2
   754  000007                     add_tasks@id:
   755                           	opt callstack 0
   756                           
   757                           ; 2 bytes @ 0x6
   758  000007                     	ds	2
   759  000009                     ??_add_tasks:
   760                           
   761                           ; 1 bytes @ 0x8
   762  000009                     	ds	24
   763  000021                     _add_tasks$2324:
   764                           	opt callstack 0
   765                           
   766                           ; 2 bytes @ 0x20
   767  000021                     	ds	2
   768  000023                     _add_tasks$2323:
   769                           	opt callstack 0
   770                           
   771                           ; 2 bytes @ 0x22
   772  000023                     	ds	2
   773  000025                     add_tasks@temp_delay:
   774                           	opt callstack 0
   775                           
   776                           ; 8 bytes @ 0x24
   777  000025                     	ds	8
   778  00002D                     add_tasks@temp_next:
   779                           	opt callstack 0
   780                           
   781                           ; 2 bytes @ 0x2C
   782  00002D                     	ds	2
   783  00002F                     ?_timer_ISR:
   784                           	opt callstack 0
   785                           
   786                           ; 2 bytes @ 0x2E
   787  00002F                     	ds	2
   788  000031                     ??_timer_ISR:
   789                           
   790                           ; 1 bytes @ 0x30
   791  000031                     	ds	8
   792  000039                     timer_ISR@temp:
   793                           	opt callstack 0
   794                           
   795                           ; 2 bytes @ 0x38
   796  000039                     	ds	2
   797  00003B                     timer_ISR@i:
   798                           	opt callstack 0
   799                           
   800                           ; 2 bytes @ 0x3A
   801  00003B                     	ds	2
   802  00003D                     ??_main_interrupt:
   803                           
   804                           ; 1 bytes @ 0x3C
   805  00003D                     	ds	7
   806                           
   807 ;;
   808 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   809 ;;
   810 ;; *************** function _main *****************
   811 ;; Defined at:
   812 ;;		line 35 in file "main.c"
   813 ;; Parameters:    Size  Location     Type
   814 ;;		None
   815 ;; Auto vars:     Size  Location     Type
   816 ;;		None
   817 ;; Return value:  Size  Location     Type
   818 ;;                  1    wreg      void 
   819 ;; Registers used:
   820 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   821 ;; Tracked objects:
   822 ;;		On entry : 0/0
   823 ;;		On exit  : 0/0
   824 ;;		Unchanged: 0/0
   825 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   826 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   827 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   828 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   829 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   830 ;;Total ram usage:        0 bytes
   831 ;; Hardware stack levels required when called:   11
   832 ;; This function calls:
   833 ;;		_FSM
   834 ;;		_dispatch
   835 ;;		_initDisplayDHT
   836 ;;		_initial_SYSTEM
   837 ;;		_initial_register
   838 ;;		_start_timer
   839 ;; This function is called by:
   840 ;;		Startup code after reset
   841 ;; This function uses a non-reentrant model
   842 ;;
   843                           
   844                           	psect	text0
   845  003B70                     __ptext0:
   846                           	opt callstack 0
   847  003B70                     _main:
   848                           	opt callstack 20
   849  003B70                     
   850                           ;main.c: 36:     initial_SYSTEM();
   851  003B70  EC13  F01E         	call	_initial_SYSTEM	;wreg free
   852  003B74                     
   853                           ;main.c: 37:     initial_register();
   854  003B74  EC66  F018         	call	_initial_register	;wreg free
   855  003B78                     
   856                           ;main.c: 38:     start_timer(TIMER_TMR0);
   857  003B78  0E00               	movlw	0
   858  003B7A  0100               	movlb	0	; () banked
   859  003B7C  6F61               	movwf	(start_timer@type+1)& (0+255),b
   860  003B7E  0E00               	movlw	0
   861  003B80  6F60               	movwf	start_timer@type& (0+255),b
   862  003B82  ECAE  F01B         	call	_start_timer	;wreg free
   863  003B86                     
   864                           ;main.c: 39:     initDisplayDHT();
   865  003B86  EC8A  F01D         	call	_initDisplayDHT	;wreg free
   866  003B8A                     l3731:
   867                           
   868                           ;main.c: 41:         dispatch();
   869  003B8A  EC99  F019         	call	_dispatch	;wreg free
   870  003B8E                     
   871                           ;main.c: 42:         FSM();
   872  003B8E  EC30  F015         	call	_FSM	;wreg free
   873  003B92  EFC5  F01D         	goto	l3731
   874  003B96  EF07  F000         	goto	start
   875  003B9A                     __end_of_main:
   876                           	opt callstack 0
   877                           
   878 ;; *************** function _start_timer *****************
   879 ;; Defined at:
   880 ;;		line 15 in file "driver.c"
   881 ;; Parameters:    Size  Location     Type
   882 ;;  type            2    0[BANK0 ] int 
   883 ;; Auto vars:     Size  Location     Type
   884 ;;  time_vaddr      1    4[BANK0 ] enum E4656
   885 ;; Return value:  Size  Location     Type
   886 ;;                  1    wreg      void 
   887 ;; Registers used:
   888 ;;		wreg, status,2, status,0
   889 ;; Tracked objects:
   890 ;;		On entry : 0/0
   891 ;;		On exit  : 0/0
   892 ;;		Unchanged: 0/0
   893 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   894 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   895 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   896 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   897 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   898 ;;Total ram usage:        5 bytes
   899 ;; Hardware stack levels used:    1
   900 ;; Hardware stack levels required when called:    4
   901 ;; This function calls:
   902 ;;		Nothing
   903 ;; This function is called by:
   904 ;;		_main
   905 ;; This function uses a non-reentrant model
   906 ;;
   907                           
   908                           	psect	text1
   909  00375C                     __ptext1:
   910                           	opt callstack 0
   911  00375C                     _start_timer:
   912                           	opt callstack 26
   913  00375C                     
   914                           ;driver.c: 17:     enum Timer_type time_vaddr = type;
   915  00375C  C060  F064         	movff	start_timer@type,start_timer@time_vaddr
   916                           
   917                           ;driver.c: 18:     switch(time_vaddr){
   918  003760  EFC7  F01B         	goto	l3577
   919  003764                     l3561:
   920                           
   921                           ; BSR set to: 0
   922                           ;driver.c: 20:             T0CON = 0b11000111;
   923  003764  0EC7               	movlw	199
   924  003766  6ED5               	movwf	213,c	;volatile
   925                           
   926                           ;driver.c: 21:             TMR0 = 0xB2;
   927  003768  0E00               	movlw	0
   928  00376A  6ED7               	movwf	215,c	;volatile
   929  00376C  0EB2               	movlw	178
   930  00376E  6ED6               	movwf	214,c	;volatile
   931  003770                     
   932                           ; BSR set to: 0
   933                           ;driver.c: 23:             INTCONbits.TMR0IE = 1;
   934  003770  8AF2               	bsf	242,5,c	;volatile
   935  003772                     
   936                           ; BSR set to: 0
   937                           ;driver.c: 24:             INTCONbits.TMR0IF = 0;
   938  003772  94F2               	bcf	242,2,c	;volatile
   939                           
   940                           ;driver.c: 27:             break;
   941  003774  EFE9  F01B         	goto	l3579
   942  003778                     l3567:
   943                           
   944                           ; BSR set to: 0
   945                           ;driver.c: 29:             T1CON = 0x0F;
   946  003778  0E0F               	movlw	15
   947  00377A  6ECD               	movwf	205,c	;volatile
   948                           
   949                           ;driver.c: 30:             TMR1H = 0x80;
   950  00377C  0E80               	movlw	128
   951  00377E  6ECF               	movwf	207,c	;volatile
   952                           
   953                           ;driver.c: 31:             TMR1L = 0x00;
   954  003780  0E00               	movlw	0
   955  003782  6ECE               	movwf	206,c	;volatile
   956  003784                     
   957                           ; BSR set to: 0
   958                           ;driver.c: 32:             PIR1bits.TMR1IF = 0;
   959  003784  909E               	bcf	158,0,c	;volatile
   960  003786                     
   961                           ; BSR set to: 0
   962                           ;driver.c: 33:             PIE1bits.TMR1IE = 1;
   963  003786  809D               	bsf	157,0,c	;volatile
   964  003788                     
   965                           ; BSR set to: 0
   966                           ;driver.c: 34:             T1CONbits.TMR1ON = 1;
   967  003788  80CD               	bsf	205,0,c	;volatile
   968                           
   969                           ;driver.c: 35:             break;
   970  00378A  EFE9  F01B         	goto	l3579
   971  00378E                     l3577:
   972  00378E  0100               	movlb	0	; () banked
   973  003790  5164               	movf	start_timer@time_vaddr& (0+255),w,b
   974  003792  6F62               	movwf	??_start_timer& (0+255),b
   975  003794  6B63               	clrf	(??_start_timer+1)& (0+255),b
   976                           
   977                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   978                           ; Switch size 1, requested type "simple"
   979                           ; Number of cases is 1, Range of values is 0 to 0
   980                           ; switch strategies available:
   981                           ; Name         Instructions Cycles
   982                           ; simple_byte            4     3 (average)
   983                           ;	Chosen strategy is simple_byte
   984  003796  5163               	movf	(??_start_timer+1)& (0+255),w,b
   985  003798  0A00               	xorlw	0	; case 0
   986  00379A  B4D8               	btfsc	status,2,c
   987  00379C  EFD2  F01B         	goto	l4007
   988  0037A0  EFE9  F01B         	goto	l3579
   989  0037A4                     l4007:
   990                           
   991                           ; BSR set to: 0
   992                           ; Switch size 1, requested type "simple"
   993                           ; Number of cases is 5, Range of values is 0 to 4
   994                           ; switch strategies available:
   995                           ; Name         Instructions Cycles
   996                           ; simple_byte           16     9 (average)
   997                           ;	Chosen strategy is simple_byte
   998  0037A4  5162               	movf	??_start_timer& (0+255),w,b
   999  0037A6  0A00               	xorlw	0	; case 0
  1000  0037A8  B4D8               	btfsc	status,2,c
  1001  0037AA  EFB2  F01B         	goto	l3561
  1002  0037AE  0A01               	xorlw	1	; case 1
  1003  0037B0  B4D8               	btfsc	status,2,c
  1004  0037B2  EFBC  F01B         	goto	l3567
  1005  0037B6  0A03               	xorlw	3	; case 2
  1006  0037B8  B4D8               	btfsc	status,2,c
  1007  0037BA  EFE9  F01B         	goto	l3579
  1008  0037BE  0A01               	xorlw	1	; case 3
  1009  0037C0  B4D8               	btfsc	status,2,c
  1010  0037C2  EFE9  F01B         	goto	l3579
  1011  0037C6  0A07               	xorlw	7	; case 4
  1012  0037C8  B4D8               	btfsc	status,2,c
  1013  0037CA  EFE9  F01B         	goto	l3579
  1014  0037CE  EFE9  F01B         	goto	l3579
  1015  0037D2                     l3579:
  1016                           
  1017                           ; BSR set to: 0
  1018                           ;driver.c: 43:     ALLOW_TIMER_REGISTER = 1;
  1019  0037D2  0E01               	movlw	1
  1020  0037D4  6E55               	movwf	_ALLOW_TIMER_REGISTER^0,c
  1021  0037D6                     
  1022                           ; BSR set to: 0
  1023  0037D6  0012               	return		;funcret
  1024  0037D8                     __end_of_start_timer:
  1025                           	opt callstack 0
  1026                           
  1027 ;; *************** function _initial_register *****************
  1028 ;; Defined at:
  1029 ;;		line 29 in file "register.c"
  1030 ;; Parameters:    Size  Location     Type
  1031 ;;		None
  1032 ;; Auto vars:     Size  Location     Type
  1033 ;;  temp            4   67[BANK0 ] unsigned long 
  1034 ;; Return value:  Size  Location     Type
  1035 ;;                  1    wreg      void 
  1036 ;; Registers used:
  1037 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1038 ;; Tracked objects:
  1039 ;;		On entry : 0/0
  1040 ;;		On exit  : 0/0
  1041 ;;		Unchanged: 0/0
  1042 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1043 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1044 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1045 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1046 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1047 ;;Total ram usage:        4 bytes
  1048 ;; Hardware stack levels used:    1
  1049 ;; Hardware stack levels required when called:    6
  1050 ;; This function calls:
  1051 ;;		_register_timer
  1052 ;; This function is called by:
  1053 ;;		_main
  1054 ;; This function uses a non-reentrant model
  1055 ;;
  1056                           
  1057                           	psect	text2
  1058  0030CC                     __ptext2:
  1059                           	opt callstack 0
  1060  0030CC                     _initial_register:
  1061                           	opt callstack 24
  1062  0030CC                     
  1063                           ;register.c: 30:     uint32_t temp = register_timer(0,40,read_button_A,((void*)0));
  1064  0030CC  0E00               	movlw	0
  1065  0030CE  0100               	movlb	0	; () banked
  1066  0030D0  6F66               	movwf	register_timer@delay& (0+255),b
  1067  0030D2  0E00               	movlw	0
  1068  0030D4  6F67               	movwf	(register_timer@delay+1)& (0+255),b
  1069  0030D6  0E00               	movlw	0
  1070  0030D8  6F68               	movwf	(register_timer@delay+2)& (0+255),b
  1071  0030DA  0E00               	movlw	0
  1072  0030DC  6F69               	movwf	(register_timer@delay+3)& (0+255),b
  1073  0030DE  0E00               	movlw	0
  1074  0030E0  6F6A               	movwf	(register_timer@delay+4)& (0+255),b
  1075  0030E2  0E00               	movlw	0
  1076  0030E4  6F6B               	movwf	(register_timer@delay+5)& (0+255),b
  1077  0030E6  0E00               	movlw	0
  1078  0030E8  6F6C               	movwf	(register_timer@delay+6)& (0+255),b
  1079  0030EA  0E00               	movlw	0
  1080  0030EC  6F6D               	movwf	(register_timer@delay+7)& (0+255),b
  1081  0030EE  0E28               	movlw	40
  1082  0030F0  6F6E               	movwf	register_timer@period& (0+255),b
  1083  0030F2  0E00               	movlw	0
  1084  0030F4  6F6F               	movwf	(register_timer@period+1)& (0+255),b
  1085  0030F6  0E00               	movlw	0
  1086  0030F8  6F70               	movwf	(register_timer@period+2)& (0+255),b
  1087  0030FA  0E00               	movlw	0
  1088  0030FC  6F71               	movwf	(register_timer@period+3)& (0+255),b
  1089  0030FE  0E00               	movlw	0
  1090  003100  6F72               	movwf	(register_timer@period+4)& (0+255),b
  1091  003102  0E00               	movlw	0
  1092  003104  6F73               	movwf	(register_timer@period+5)& (0+255),b
  1093  003106  0E00               	movlw	0
  1094  003108  6F74               	movwf	(register_timer@period+6)& (0+255),b
  1095  00310A  0E00               	movlw	0
  1096  00310C  6F75               	movwf	(register_timer@period+7)& (0+255),b
  1097  00310E  0E0A               	movlw	low _read_button_A
  1098  003110  6F76               	movwf	register_timer@callback& (0+255),b
  1099  003112  0E3A               	movlw	high _read_button_A
  1100  003114  6F77               	movwf	(register_timer@callback+1)& (0+255),b
  1101  003116  0E00               	movlw	low (_read_button_A shr (0+16))
  1102  003118  6F78               	movwf	(register_timer@callback+2)& (0+255),b
  1103  00311A  0E00               	movlw	0
  1104  00311C  6F79               	movwf	register_timer@data& (0+255),b
  1105  00311E  0E00               	movlw	0
  1106  003120  6F7A               	movwf	(register_timer@data+1)& (0+255),b
  1107  003122  EC53  F008         	call	_register_timer	;wreg free
  1108  003126  C066  F0A3         	movff	?_register_timer,initial_register@temp
  1109  00312A  C067  F0A4         	movff	?_register_timer+1,initial_register@temp+1
  1110  00312E  C068  F0A5         	movff	?_register_timer+2,initial_register@temp+2
  1111  003132  C069  F0A6         	movff	?_register_timer+3,initial_register@temp+3
  1112                           
  1113                           ;register.c: 31:     temp = register_timer(1000,500,readTempAndHumid,((void*)0));
  1114  003136  0EE8               	movlw	232
  1115  003138  0100               	movlb	0	; () banked
  1116  00313A  6F66               	movwf	register_timer@delay& (0+255),b
  1117  00313C  0E03               	movlw	3
  1118  00313E  6F67               	movwf	(register_timer@delay+1)& (0+255),b
  1119  003140  0E00               	movlw	0
  1120  003142  6F68               	movwf	(register_timer@delay+2)& (0+255),b
  1121  003144  0E00               	movlw	0
  1122  003146  6F69               	movwf	(register_timer@delay+3)& (0+255),b
  1123  003148  0E00               	movlw	0
  1124  00314A  6F6A               	movwf	(register_timer@delay+4)& (0+255),b
  1125  00314C  0E00               	movlw	0
  1126  00314E  6F6B               	movwf	(register_timer@delay+5)& (0+255),b
  1127  003150  0E00               	movlw	0
  1128  003152  6F6C               	movwf	(register_timer@delay+6)& (0+255),b
  1129  003154  0E00               	movlw	0
  1130  003156  6F6D               	movwf	(register_timer@delay+7)& (0+255),b
  1131  003158  0EF4               	movlw	244
  1132  00315A  6F6E               	movwf	register_timer@period& (0+255),b
  1133  00315C  0E01               	movlw	1
  1134  00315E  6F6F               	movwf	(register_timer@period+1)& (0+255),b
  1135  003160  0E00               	movlw	0
  1136  003162  6F70               	movwf	(register_timer@period+2)& (0+255),b
  1137  003164  0E00               	movlw	0
  1138  003166  6F71               	movwf	(register_timer@period+3)& (0+255),b
  1139  003168  0E00               	movlw	0
  1140  00316A  6F72               	movwf	(register_timer@period+4)& (0+255),b
  1141  00316C  0E00               	movlw	0
  1142  00316E  6F73               	movwf	(register_timer@period+5)& (0+255),b
  1143  003170  0E00               	movlw	0
  1144  003172  6F74               	movwf	(register_timer@period+6)& (0+255),b
  1145  003174  0E00               	movlw	0
  1146  003176  6F75               	movwf	(register_timer@period+7)& (0+255),b
  1147  003178  0E44               	movlw	low _readTempAndHumid
  1148  00317A  6F76               	movwf	register_timer@callback& (0+255),b
  1149  00317C  0E3B               	movlw	high _readTempAndHumid
  1150  00317E  6F77               	movwf	(register_timer@callback+1)& (0+255),b
  1151  003180  0E00               	movlw	low (_readTempAndHumid shr (0+16))
  1152  003182  6F78               	movwf	(register_timer@callback+2)& (0+255),b
  1153  003184  0E00               	movlw	0
  1154  003186  6F79               	movwf	register_timer@data& (0+255),b
  1155  003188  0E00               	movlw	0
  1156  00318A  6F7A               	movwf	(register_timer@data+1)& (0+255),b
  1157  00318C  EC53  F008         	call	_register_timer	;wreg free
  1158  003190  C066  F0A3         	movff	?_register_timer,initial_register@temp
  1159  003194  C067  F0A4         	movff	?_register_timer+1,initial_register@temp+1
  1160  003198  C068  F0A5         	movff	?_register_timer+2,initial_register@temp+2
  1161  00319C  C069  F0A6         	movff	?_register_timer+3,initial_register@temp+3
  1162                           
  1163                           ;register.c: 32:     temp = register_timer(20,40,read_button_B,((void*)0));
  1164  0031A0  0E14               	movlw	20
  1165  0031A2  0100               	movlb	0	; () banked
  1166  0031A4  6F66               	movwf	register_timer@delay& (0+255),b
  1167  0031A6  0E00               	movlw	0
  1168  0031A8  6F67               	movwf	(register_timer@delay+1)& (0+255),b
  1169  0031AA  0E00               	movlw	0
  1170  0031AC  6F68               	movwf	(register_timer@delay+2)& (0+255),b
  1171  0031AE  0E00               	movlw	0
  1172  0031B0  6F69               	movwf	(register_timer@delay+3)& (0+255),b
  1173  0031B2  0E00               	movlw	0
  1174  0031B4  6F6A               	movwf	(register_timer@delay+4)& (0+255),b
  1175  0031B6  0E00               	movlw	0
  1176  0031B8  6F6B               	movwf	(register_timer@delay+5)& (0+255),b
  1177  0031BA  0E00               	movlw	0
  1178  0031BC  6F6C               	movwf	(register_timer@delay+6)& (0+255),b
  1179  0031BE  0E00               	movlw	0
  1180  0031C0  6F6D               	movwf	(register_timer@delay+7)& (0+255),b
  1181  0031C2  0E28               	movlw	40
  1182  0031C4  6F6E               	movwf	register_timer@period& (0+255),b
  1183  0031C6  0E00               	movlw	0
  1184  0031C8  6F6F               	movwf	(register_timer@period+1)& (0+255),b
  1185  0031CA  0E00               	movlw	0
  1186  0031CC  6F70               	movwf	(register_timer@period+2)& (0+255),b
  1187  0031CE  0E00               	movlw	0
  1188  0031D0  6F71               	movwf	(register_timer@period+3)& (0+255),b
  1189  0031D2  0E00               	movlw	0
  1190  0031D4  6F72               	movwf	(register_timer@period+4)& (0+255),b
  1191  0031D6  0E00               	movlw	0
  1192  0031D8  6F73               	movwf	(register_timer@period+5)& (0+255),b
  1193  0031DA  0E00               	movlw	0
  1194  0031DC  6F74               	movwf	(register_timer@period+6)& (0+255),b
  1195  0031DE  0E00               	movlw	0
  1196  0031E0  6F75               	movwf	(register_timer@period+7)& (0+255),b
  1197  0031E2  0E54               	movlw	low _read_button_B
  1198  0031E4  6F76               	movwf	register_timer@callback& (0+255),b
  1199  0031E6  0E3A               	movlw	high _read_button_B
  1200  0031E8  6F77               	movwf	(register_timer@callback+1)& (0+255),b
  1201  0031EA  0E00               	movlw	low (_read_button_B shr (0+16))
  1202  0031EC  6F78               	movwf	(register_timer@callback+2)& (0+255),b
  1203  0031EE  0E00               	movlw	0
  1204  0031F0  6F79               	movwf	register_timer@data& (0+255),b
  1205  0031F2  0E00               	movlw	0
  1206  0031F4  6F7A               	movwf	(register_timer@data+1)& (0+255),b
  1207  0031F6  EC53  F008         	call	_register_timer	;wreg free
  1208  0031FA  C066  F0A3         	movff	?_register_timer,initial_register@temp
  1209  0031FE  C067  F0A4         	movff	?_register_timer+1,initial_register@temp+1
  1210  003202  C068  F0A5         	movff	?_register_timer+2,initial_register@temp+2
  1211  003206  C069  F0A6         	movff	?_register_timer+3,initial_register@temp+3
  1212  00320A  0012               	return		;funcret
  1213  00320C                     __end_of_initial_register:
  1214                           	opt callstack 0
  1215                           
  1216 ;; *************** function _initial_SYSTEM *****************
  1217 ;; Defined at:
  1218 ;;		line 6 in file "initial.c"
  1219 ;; Parameters:    Size  Location     Type
  1220 ;;		None
  1221 ;; Auto vars:     Size  Location     Type
  1222 ;;		None
  1223 ;; Return value:  Size  Location     Type
  1224 ;;                  1    wreg      void 
  1225 ;; Registers used:
  1226 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1227 ;; Tracked objects:
  1228 ;;		On entry : 0/0
  1229 ;;		On exit  : 0/0
  1230 ;;		Unchanged: 0/0
  1231 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1232 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1233 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1234 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1235 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1236 ;;Total ram usage:        0 bytes
  1237 ;; Hardware stack levels used:    1
  1238 ;; Hardware stack levels required when called:    9
  1239 ;; This function calls:
  1240 ;;		_initial_BUTTON
  1241 ;;		_initial_INTERRUPT
  1242 ;;		_initial_LED
  1243 ;;		_initial_OSSCON
  1244 ;;		_initial_display
  1245 ;; This function is called by:
  1246 ;;		_main
  1247 ;; This function uses a non-reentrant model
  1248 ;;
  1249                           
  1250                           	psect	text3
  1251  003C26                     __ptext3:
  1252                           	opt callstack 0
  1253  003C26                     _initial_SYSTEM:
  1254                           	opt callstack 21
  1255  003C26                     
  1256                           ;initial.c: 7:     initial_OSSCON();
  1257  003C26  EC27  F01E         	call	_initial_OSSCON	;wreg free
  1258                           
  1259                           ;initial.c: 8:     initial_LED();
  1260  003C2A  EC2C  F01E         	call	_initial_LED	;wreg free
  1261                           
  1262                           ;initial.c: 9:     initial_BUTTON();
  1263  003C2E  EC31  F01E         	call	_initial_BUTTON	;wreg free
  1264  003C32                     
  1265                           ;initial.c: 10:     initial_INTERRUPT();
  1266  003C32  EC38  F01E         	call	_initial_INTERRUPT	;wreg free
  1267  003C36                     
  1268                           ;initial.c: 11:     initial_display();
  1269  003C36  ECDE  F01C         	call	_initial_display	;wreg free
  1270  003C3A  0012               	return		;funcret
  1271  003C3C                     __end_of_initial_SYSTEM:
  1272                           	opt callstack 0
  1273                           
  1274 ;; *************** function _initial_display *****************
  1275 ;; Defined at:
  1276 ;;		line 14 in file "display.c"
  1277 ;; Parameters:    Size  Location     Type
  1278 ;;		None
  1279 ;; Auto vars:     Size  Location     Type
  1280 ;;		None
  1281 ;; Return value:  Size  Location     Type
  1282 ;;                  1    wreg      void 
  1283 ;; Registers used:
  1284 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1285 ;; Tracked objects:
  1286 ;;		On entry : 0/0
  1287 ;;		On exit  : 0/0
  1288 ;;		Unchanged: 0/0
  1289 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1290 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1291 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1292 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1293 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1294 ;;Total ram usage:        2 bytes
  1295 ;; Hardware stack levels used:    1
  1296 ;; Hardware stack levels required when called:    8
  1297 ;; This function calls:
  1298 ;;		_LCDInit
  1299 ;;		_LCDPutInst
  1300 ;;		_LCDPutStr
  1301 ;; This function is called by:
  1302 ;;		_initial_SYSTEM
  1303 ;; This function uses a non-reentrant model
  1304 ;;
  1305                           
  1306                           	psect	text4
  1307  0039BC                     __ptext4:
  1308                           	opt callstack 0
  1309  0039BC                     _initial_display:
  1310                           	opt callstack 21
  1311  0039BC                     
  1312                           ;display.c: 15:     LCDInit();
  1313  0039BC  EC57  F01C         	call	_LCDInit	;wreg free
  1314                           
  1315                           ;display.c: 16:     LCDPutInst(0x01);
  1316  0039C0  0E01               	movlw	1
  1317  0039C2  EC8A  F01C         	call	_LCDPutInst
  1318                           
  1319                           ;display.c: 17:     LCDPutInst(0x80);
  1320  0039C6  0E80               	movlw	128
  1321  0039C8  EC8A  F01C         	call	_LCDPutInst
  1322  0039CC                     
  1323                           ;display.c: 18:     LCDPutStr("DRY FOOD MACHINE");
  1324  0039CC  0E89               	movlw	low STR_1
  1325  0039CE  0100               	movlb	0	; () banked
  1326  0039D0  6F66               	movwf	LCDPutStr@ptr& (0+255),b
  1327  0039D2  0E10               	movlw	high STR_1
  1328  0039D4  6F67               	movwf	(LCDPutStr@ptr+1)& (0+255),b
  1329  0039D6  EC4D  F01D         	call	_LCDPutStr	;wreg free
  1330  0039DA                     
  1331                           ;display.c: 19:     LCDPutInst(0xC0);
  1332  0039DA  0EC0               	movlw	192
  1333  0039DC  EC8A  F01C         	call	_LCDPutInst
  1334                           
  1335                           ;display.c: 20:     LCDPutStr("   ID:1752541   ");
  1336  0039E0  0E67               	movlw	low STR_2
  1337  0039E2  0100               	movlb	0	; () banked
  1338  0039E4  6F66               	movwf	LCDPutStr@ptr& (0+255),b
  1339  0039E6  0E10               	movlw	high STR_2
  1340  0039E8  6F67               	movwf	(LCDPutStr@ptr+1)& (0+255),b
  1341  0039EA  EC4D  F01D         	call	_LCDPutStr	;wreg free
  1342  0039EE                     
  1343                           ;display.c: 21:     _delay((unsigned long)((1000)*(10000000/4000.0)));
  1344  0039EE  0E0D               	movlw	13
  1345  0039F0  0100               	movlb	0	; () banked
  1346  0039F2  6F69               	movwf	(??_initial_display+1)& (0+255),b
  1347  0039F4  0EAF               	movlw	175
  1348  0039F6  6F68               	movwf	??_initial_display& (0+255),b
  1349  0039F8  0EB6               	movlw	182
  1350  0039FA                     u1937:
  1351  0039FA  2EE8               	decfsz	wreg,f,c
  1352  0039FC  D7FE               	bra	u1937
  1353  0039FE  2F68               	decfsz	??_initial_display& (0+255),f,b
  1354  003A00  D7FC               	bra	u1937
  1355  003A02  2F69               	decfsz	(??_initial_display+1)& (0+255),f,b
  1356  003A04  D7FA               	bra	u1937
  1357  003A06  F000               	nop	
  1358  003A08  0012               	return		;funcret
  1359  003A0A                     __end_of_initial_display:
  1360                           	opt callstack 0
  1361                           
  1362 ;; *************** function _LCDInit *****************
  1363 ;; Defined at:
  1364 ;;		line 46 in file "BBSPI_LCD.c"
  1365 ;; Parameters:    Size  Location     Type
  1366 ;;		None
  1367 ;; Auto vars:     Size  Location     Type
  1368 ;;		None
  1369 ;; Return value:  Size  Location     Type
  1370 ;;                  1    wreg      void 
  1371 ;; Registers used:
  1372 ;;		wreg, status,2, status,0, cstack
  1373 ;; Tracked objects:
  1374 ;;		On entry : 0/0
  1375 ;;		On exit  : 0/0
  1376 ;;		Unchanged: 0/0
  1377 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1378 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1379 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1380 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1381 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1382 ;;Total ram usage:        1 bytes
  1383 ;; Hardware stack levels used:    1
  1384 ;; Hardware stack levels required when called:    7
  1385 ;; This function calls:
  1386 ;;		_InitBBSPI
  1387 ;;		_LCDPutInst
  1388 ;;		_Port_BBSPIInit
  1389 ;;		_WritePort_BBSPI
  1390 ;; This function is called by:
  1391 ;;		_initial_display
  1392 ;; This function uses a non-reentrant model
  1393 ;;
  1394                           
  1395                           	psect	text5
  1396  0038AE                     __ptext5:
  1397                           	opt callstack 0
  1398  0038AE                     _LCDInit:
  1399                           	opt callstack 21
  1400  0038AE                     
  1401                           ;BBSPI_LCD.c: 48:     InitBBSPI();
  1402  0038AE  EC1E  F01E         	call	_InitBBSPI	;wreg free
  1403  0038B2                     
  1404                           ;BBSPI_LCD.c: 49:     TRISFbits.TRISF6 = 0;
  1405  0038B2  9C97               	bcf	151,6,c	;volatile
  1406  0038B4                     
  1407                           ;BBSPI_LCD.c: 50:     LATFbits.LATF6 = 0;
  1408  0038B4  9C8E               	bcf	142,6,c	;volatile
  1409  0038B6                     
  1410                           ;BBSPI_LCD.c: 51:     _delay((unsigned long)((1)*(10000000/4000.0)));
  1411  0038B6  0E04               	movlw	4
  1412  0038B8  0100               	movlb	0	; () banked
  1413  0038BA  6F66               	movwf	??_LCDInit& (0+255),b
  1414  0038BC  0E3D               	movlw	61
  1415  0038BE                     u1947:
  1416  0038BE  2EE8               	decfsz	wreg,f,c
  1417  0038C0  D7FE               	bra	u1947
  1418  0038C2  2F66               	decfsz	??_LCDInit& (0+255),f,b
  1419  0038C4  D7FC               	bra	u1947
  1420  0038C6  D000               	nop2	
  1421  0038C8                     
  1422                           ;BBSPI_LCD.c: 52:     LATFbits.LATF6 = 1;
  1423  0038C8  8C8E               	bsf	142,6,c	;volatile
  1424  0038CA                     
  1425                           ;BBSPI_LCD.c: 53:     Port_BBSPIInit (0x00);
  1426  0038CA  0E00               	movlw	0
  1427  0038CC  EC04  F01E         	call	_Port_BBSPIInit
  1428  0038D0                     
  1429                           ;BBSPI_LCD.c: 54:     Port_BBSPIInit (0x01);
  1430  0038D0  0E01               	movlw	1
  1431  0038D2  EC04  F01E         	call	_Port_BBSPIInit
  1432  0038D6                     
  1433                           ;BBSPI_LCD.c: 55:     WritePort_BBSPI (0x12, 0);
  1434  0038D6  0E00               	movlw	0
  1435  0038D8  0100               	movlb	0	; () banked
  1436  0038DA  6F63               	movwf	WritePort_BBSPI@a& (0+255),b
  1437  0038DC  0E12               	movlw	18
  1438  0038DE  ECF4  F01D         	call	_WritePort_BBSPI
  1439  0038E2                     
  1440                           ;BBSPI_LCD.c: 56:     _delay((unsigned long)((15)*(10000000/4000.0)));
  1441  0038E2  0E31               	movlw	49
  1442  0038E4  0100               	movlb	0	; () banked
  1443  0038E6  6F66               	movwf	??_LCDInit& (0+255),b
  1444  0038E8  0EB2               	movlw	178
  1445  0038EA                     u1957:
  1446  0038EA  2EE8               	decfsz	wreg,f,c
  1447  0038EC  D7FE               	bra	u1957
  1448  0038EE  2F66               	decfsz	??_LCDInit& (0+255),f,b
  1449  0038F0  D7FC               	bra	u1957
  1450  0038F2  F000               	nop	
  1451  0038F4                     
  1452                           ;BBSPI_LCD.c: 57:     LCDPutInst(0x32);
  1453  0038F4  0E32               	movlw	50
  1454  0038F6  EC8A  F01C         	call	_LCDPutInst
  1455  0038FA                     
  1456                           ;BBSPI_LCD.c: 58:     LCDPutInst(0x3C);
  1457  0038FA  0E3C               	movlw	60
  1458  0038FC  EC8A  F01C         	call	_LCDPutInst
  1459  003900                     
  1460                           ;BBSPI_LCD.c: 59:     LCDPutInst(0x0C);
  1461  003900  0E0C               	movlw	12
  1462  003902  EC8A  F01C         	call	_LCDPutInst
  1463  003906                     
  1464                           ;BBSPI_LCD.c: 60:     LCDPutInst(0x01);
  1465  003906  0E01               	movlw	1
  1466  003908  EC8A  F01C         	call	_LCDPutInst
  1467  00390C                     
  1468                           ;BBSPI_LCD.c: 61:     LCDPutInst(0x06);
  1469  00390C  0E06               	movlw	6
  1470  00390E  EC8A  F01C         	call	_LCDPutInst
  1471  003912  0012               	return		;funcret
  1472  003914                     __end_of_LCDInit:
  1473                           	opt callstack 0
  1474                           
  1475 ;; *************** function _Port_BBSPIInit *****************
  1476 ;; Defined at:
  1477 ;;		line 124 in file "BBSPI_LCD.c"
  1478 ;; Parameters:    Size  Location     Type
  1479 ;;  port_dir        1    wreg     unsigned char 
  1480 ;; Auto vars:     Size  Location     Type
  1481 ;;  port_dir        1    3[BANK0 ] unsigned char 
  1482 ;; Return value:  Size  Location     Type
  1483 ;;                  1    wreg      void 
  1484 ;; Registers used:
  1485 ;;		wreg, status,2, status,0, cstack
  1486 ;; Tracked objects:
  1487 ;;		On entry : 0/0
  1488 ;;		On exit  : 0/0
  1489 ;;		Unchanged: 0/0
  1490 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1491 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1492 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1493 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1494 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1495 ;;Total ram usage:        1 bytes
  1496 ;; Hardware stack levels used:    1
  1497 ;; Hardware stack levels required when called:    5
  1498 ;; This function calls:
  1499 ;;		_SendByteBBSPI
  1500 ;; This function is called by:
  1501 ;;		_LCDInit
  1502 ;; This function uses a non-reentrant model
  1503 ;;
  1504                           
  1505                           	psect	text6
  1506  003C08                     __ptext6:
  1507                           	opt callstack 0
  1508  003C08                     _Port_BBSPIInit:
  1509                           	opt callstack 22
  1510                           
  1511                           ;incstack = 0
  1512                           ;Port_BBSPIInit@port_dir stored from wreg
  1513  003C08  0100               	movlb	0	; () banked
  1514  003C0A  6F63               	movwf	Port_BBSPIInit@port_dir& (0+255),b
  1515  003C0C                     
  1516                           ;BBSPI_LCD.c: 124: void Port_BBSPIInit (unsigned char port_dir);BBSPI_LCD.c: 125: {;BBSP
      +                          I_LCD.c: 129:     LATAbits.LATA2 = 0;
  1517  003C0C  9489               	bcf	137,2,c	;volatile
  1518  003C0E                     
  1519                           ;BBSPI_LCD.c: 130:     SendByteBBSPI(0x40);
  1520  003C0E  0E40               	movlw	64
  1521  003C10  EC22  F01C         	call	_SendByteBBSPI
  1522                           
  1523                           ;BBSPI_LCD.c: 131:     SendByteBBSPI(port_dir);
  1524  003C14  0100               	movlb	0	; () banked
  1525  003C16  5163               	movf	Port_BBSPIInit@port_dir& (0+255),w,b
  1526  003C18  EC22  F01C         	call	_SendByteBBSPI
  1527                           
  1528                           ;BBSPI_LCD.c: 132:     SendByteBBSPI(0x00);
  1529  003C1C  0E00               	movlw	0
  1530  003C1E  EC22  F01C         	call	_SendByteBBSPI
  1531  003C22                     
  1532                           ;BBSPI_LCD.c: 133:     LATAbits.LATA2 = 1;
  1533  003C22  8489               	bsf	137,2,c	;volatile
  1534  003C24  0012               	return		;funcret
  1535  003C26                     __end_of_Port_BBSPIInit:
  1536                           	opt callstack 0
  1537                           
  1538 ;; *************** function _InitBBSPI *****************
  1539 ;; Defined at:
  1540 ;;		line 71 in file "BBSPI_LCD.c"
  1541 ;; Parameters:    Size  Location     Type
  1542 ;;		None
  1543 ;; Auto vars:     Size  Location     Type
  1544 ;;		None
  1545 ;; Return value:  Size  Location     Type
  1546 ;;                  1    wreg      void 
  1547 ;; Registers used:
  1548 ;;		None
  1549 ;; Tracked objects:
  1550 ;;		On entry : 0/0
  1551 ;;		On exit  : 0/0
  1552 ;;		Unchanged: 0/0
  1553 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1554 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1555 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1556 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1557 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1558 ;;Total ram usage:        0 bytes
  1559 ;; Hardware stack levels used:    1
  1560 ;; Hardware stack levels required when called:    4
  1561 ;; This function calls:
  1562 ;;		Nothing
  1563 ;; This function is called by:
  1564 ;;		_LCDInit
  1565 ;; This function uses a non-reentrant model
  1566 ;;
  1567                           
  1568                           	psect	text7
  1569  003C3C                     __ptext7:
  1570                           	opt callstack 0
  1571  003C3C                     _InitBBSPI:
  1572                           	opt callstack 23
  1573  003C3C                     
  1574                           ;BBSPI_LCD.c: 73:     TRISAbits.TRISA2 = 0;
  1575  003C3C  9492               	bcf	146,2,c	;volatile
  1576                           
  1577                           ;BBSPI_LCD.c: 74:     TRISCbits.TRISC4 = 1;
  1578  003C3E  8894               	bsf	148,4,c	;volatile
  1579                           
  1580                           ;BBSPI_LCD.c: 75:     TRISCbits.TRISC5 = 0;
  1581  003C40  9A94               	bcf	148,5,c	;volatile
  1582                           
  1583                           ;BBSPI_LCD.c: 76:     TRISCbits.TRISC3 = 0;
  1584  003C42  9694               	bcf	148,3,c	;volatile
  1585                           
  1586                           ;BBSPI_LCD.c: 78:     LATAbits.LATA2 = 1;
  1587  003C44  8489               	bsf	137,2,c	;volatile
  1588                           
  1589                           ;BBSPI_LCD.c: 79:     LATCbits.LATC4 = 1;
  1590  003C46  888B               	bsf	139,4,c	;volatile
  1591                           
  1592                           ;BBSPI_LCD.c: 80:     LATCbits.LATC5 = 0;
  1593  003C48  9A8B               	bcf	139,5,c	;volatile
  1594                           
  1595                           ;BBSPI_LCD.c: 81:     LATCbits.LATC3 = 0;
  1596  003C4A  968B               	bcf	139,3,c	;volatile
  1597  003C4C  0012               	return		;funcret
  1598  003C4E                     __end_of_InitBBSPI:
  1599                           	opt callstack 0
  1600                           
  1601 ;; *************** function _initial_OSSCON *****************
  1602 ;; Defined at:
  1603 ;;		line 14 in file "initial.c"
  1604 ;; Parameters:    Size  Location     Type
  1605 ;;		None
  1606 ;; Auto vars:     Size  Location     Type
  1607 ;;		None
  1608 ;; Return value:  Size  Location     Type
  1609 ;;                  1    wreg      void 
  1610 ;; Registers used:
  1611 ;;		wreg, status,2
  1612 ;; Tracked objects:
  1613 ;;		On entry : 0/0
  1614 ;;		On exit  : 0/0
  1615 ;;		Unchanged: 0/0
  1616 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1617 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1618 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1619 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1620 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1621 ;;Total ram usage:        0 bytes
  1622 ;; Hardware stack levels used:    1
  1623 ;; Hardware stack levels required when called:    4
  1624 ;; This function calls:
  1625 ;;		Nothing
  1626 ;; This function is called by:
  1627 ;;		_initial_SYSTEM
  1628 ;; This function uses a non-reentrant model
  1629 ;;
  1630                           
  1631                           	psect	text8
  1632  003C4E                     __ptext8:
  1633                           	opt callstack 0
  1634  003C4E                     _initial_OSSCON:
  1635                           	opt callstack 25
  1636  003C4E                     
  1637                           ;initial.c: 15:     OSCCON = 0x73;
  1638  003C4E  0E73               	movlw	115
  1639  003C50  6ED3               	movwf	211,c	;volatile
  1640                           
  1641                           ;initial.c: 16:     OSCTUNE = 0x0F;
  1642  003C52  0E0F               	movlw	15
  1643  003C54  6E9B               	movwf	155,c	;volatile
  1644  003C56  0012               	return		;funcret
  1645  003C58                     __end_of_initial_OSSCON:
  1646                           	opt callstack 0
  1647                           
  1648 ;; *************** function _initial_LED *****************
  1649 ;; Defined at:
  1650 ;;		line 19 in file "initial.c"
  1651 ;; Parameters:    Size  Location     Type
  1652 ;;		None
  1653 ;; Auto vars:     Size  Location     Type
  1654 ;;		None
  1655 ;; Return value:  Size  Location     Type
  1656 ;;                  1    wreg      void 
  1657 ;; Registers used:
  1658 ;;		wreg, status,2
  1659 ;; Tracked objects:
  1660 ;;		On entry : 0/0
  1661 ;;		On exit  : 0/0
  1662 ;;		Unchanged: 0/0
  1663 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1664 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1665 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1666 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1667 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1668 ;;Total ram usage:        0 bytes
  1669 ;; Hardware stack levels used:    1
  1670 ;; Hardware stack levels required when called:    4
  1671 ;; This function calls:
  1672 ;;		Nothing
  1673 ;; This function is called by:
  1674 ;;		_initial_SYSTEM
  1675 ;; This function uses a non-reentrant model
  1676 ;;
  1677                           
  1678                           	psect	text9
  1679  003C58                     __ptext9:
  1680                           	opt callstack 0
  1681  003C58                     _initial_LED:
  1682                           	opt callstack 25
  1683  003C58                     
  1684                           ;initial.c: 20:     TRISD = 0x00;
  1685  003C58  0E00               	movlw	0
  1686  003C5A  6E95               	movwf	149,c	;volatile
  1687                           
  1688                           ;initial.c: 21:     PORTD = 0x00;
  1689  003C5C  0E00               	movlw	0
  1690  003C5E  6E83               	movwf	131,c	;volatile
  1691  003C60  0012               	return		;funcret
  1692  003C62                     __end_of_initial_LED:
  1693                           	opt callstack 0
  1694                           
  1695 ;; *************** function _initial_INTERRUPT *****************
  1696 ;; Defined at:
  1697 ;;		line 30 in file "initial.c"
  1698 ;; Parameters:    Size  Location     Type
  1699 ;;		None
  1700 ;; Auto vars:     Size  Location     Type
  1701 ;;		None
  1702 ;; Return value:  Size  Location     Type
  1703 ;;                  1    wreg      void 
  1704 ;; Registers used:
  1705 ;;		None
  1706 ;; Tracked objects:
  1707 ;;		On entry : 0/0
  1708 ;;		On exit  : 0/0
  1709 ;;		Unchanged: 0/0
  1710 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1711 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1712 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1713 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1714 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1715 ;;Total ram usage:        0 bytes
  1716 ;; Hardware stack levels used:    1
  1717 ;; Hardware stack levels required when called:    4
  1718 ;; This function calls:
  1719 ;;		Nothing
  1720 ;; This function is called by:
  1721 ;;		_initial_SYSTEM
  1722 ;; This function uses a non-reentrant model
  1723 ;;
  1724                           
  1725                           	psect	text10
  1726  003C70                     __ptext10:
  1727                           	opt callstack 0
  1728  003C70                     _initial_INTERRUPT:
  1729                           	opt callstack 25
  1730  003C70                     
  1731                           ;initial.c: 31:     INTCONbits.GIE = 1;
  1732  003C70  8EF2               	bsf	242,7,c	;volatile
  1733  003C72  0012               	return		;funcret
  1734  003C74                     __end_of_initial_INTERRUPT:
  1735                           	opt callstack 0
  1736                           
  1737 ;; *************** function _initial_BUTTON *****************
  1738 ;; Defined at:
  1739 ;;		line 24 in file "initial.c"
  1740 ;; Parameters:    Size  Location     Type
  1741 ;;		None
  1742 ;; Auto vars:     Size  Location     Type
  1743 ;;		None
  1744 ;; Return value:  Size  Location     Type
  1745 ;;                  1    wreg      void 
  1746 ;; Registers used:
  1747 ;;		wreg, status,2
  1748 ;; Tracked objects:
  1749 ;;		On entry : 0/0
  1750 ;;		On exit  : 0/0
  1751 ;;		Unchanged: 0/0
  1752 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1753 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1754 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1755 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1756 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1757 ;;Total ram usage:        0 bytes
  1758 ;; Hardware stack levels used:    1
  1759 ;; Hardware stack levels required when called:    4
  1760 ;; This function calls:
  1761 ;;		Nothing
  1762 ;; This function is called by:
  1763 ;;		_initial_SYSTEM
  1764 ;; This function uses a non-reentrant model
  1765 ;;
  1766                           
  1767                           	psect	text11
  1768  003C62                     __ptext11:
  1769                           	opt callstack 0
  1770  003C62                     _initial_BUTTON:
  1771                           	opt callstack 25
  1772  003C62                     
  1773                           ;initial.c: 25:     ADCON1 = 0b00001111;
  1774  003C62  0E0F               	movlw	15
  1775  003C64  6EC1               	movwf	193,c	;volatile
  1776  003C66                     
  1777                           ;initial.c: 26:     TRISAbits.RA5 = 1;
  1778  003C66  8A92               	bsf	146,5,c	;volatile
  1779  003C68                     
  1780                           ;initial.c: 28:     TRISBbits.RB0 = 1;
  1781  003C68  8093               	bsf	147,0,c	;volatile
  1782  003C6A  0012               	return		;funcret
  1783  003C6C                     __end_of_initial_BUTTON:
  1784                           	opt callstack 0
  1785                           
  1786 ;; *************** function _initDisplayDHT *****************
  1787 ;; Defined at:
  1788 ;;		line 24 in file "display.c"
  1789 ;; Parameters:    Size  Location     Type
  1790 ;;		None
  1791 ;; Auto vars:     Size  Location     Type
  1792 ;;		None
  1793 ;; Return value:  Size  Location     Type
  1794 ;;                  1    wreg      void 
  1795 ;; Registers used:
  1796 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1797 ;; Tracked objects:
  1798 ;;		On entry : 0/0
  1799 ;;		On exit  : 0/0
  1800 ;;		Unchanged: 0/0
  1801 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1802 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1803 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1804 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1805 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1806 ;;Total ram usage:        0 bytes
  1807 ;; Hardware stack levels used:    1
  1808 ;; Hardware stack levels required when called:    8
  1809 ;; This function calls:
  1810 ;;		_LCDPutInst
  1811 ;;		_LCDPutStr
  1812 ;; This function is called by:
  1813 ;;		_main
  1814 ;; This function uses a non-reentrant model
  1815 ;;
  1816                           
  1817                           	psect	text12
  1818  003B14                     __ptext12:
  1819                           	opt callstack 0
  1820  003B14                     _initDisplayDHT:
  1821                           	opt callstack 22
  1822  003B14                     
  1823                           ;display.c: 25:     LCDPutInst(0x01);
  1824  003B14  0E01               	movlw	1
  1825  003B16  EC8A  F01C         	call	_LCDPutInst
  1826                           
  1827                           ;display.c: 26:     LCDPutInst(0x80);
  1828  003B1A  0E80               	movlw	128
  1829  003B1C  EC8A  F01C         	call	_LCDPutInst
  1830  003B20                     
  1831                           ;display.c: 27:     LCDPutStr("    SLEEPING    ");
  1832  003B20  0E45               	movlw	low STR_3
  1833  003B22  0100               	movlb	0	; () banked
  1834  003B24  6F66               	movwf	LCDPutStr@ptr& (0+255),b
  1835  003B26  0E10               	movlw	high STR_3
  1836  003B28  6F67               	movwf	(LCDPutStr@ptr+1)& (0+255),b
  1837  003B2A  EC4D  F01D         	call	_LCDPutStr	;wreg free
  1838  003B2E                     
  1839                           ;display.c: 28:     LCDPutInst(0xC0);
  1840  003B2E  0EC0               	movlw	192
  1841  003B30  EC8A  F01C         	call	_LCDPutInst
  1842                           
  1843                           ;display.c: 29:     LCDPutStr("TEMP:NA HUMID:NA");
  1844  003B34  0E78               	movlw	low STR_4
  1845  003B36  0100               	movlb	0	; () banked
  1846  003B38  6F66               	movwf	LCDPutStr@ptr& (0+255),b
  1847  003B3A  0E10               	movlw	high STR_4
  1848  003B3C  6F67               	movwf	(LCDPutStr@ptr+1)& (0+255),b
  1849  003B3E  EC4D  F01D         	call	_LCDPutStr	;wreg free
  1850  003B42  0012               	return		;funcret
  1851  003B44                     __end_of_initDisplayDHT:
  1852                           	opt callstack 0
  1853                           
  1854 ;; *************** function _dispatch *****************
  1855 ;; Defined at:
  1856 ;;		line 151 in file "driver.c"
  1857 ;; Parameters:    Size  Location     Type
  1858 ;;		None
  1859 ;; Auto vars:     Size  Location     Type
  1860 ;;  i               2   15[BANK0 ] int 
  1861 ;; Return value:  Size  Location     Type
  1862 ;;                  1    wreg      void 
  1863 ;; Registers used:
  1864 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  1865 ;; Tracked objects:
  1866 ;;		On entry : 0/0
  1867 ;;		On exit  : 0/0
  1868 ;;		Unchanged: 0/0
  1869 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1870 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1871 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1872 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1873 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1874 ;;Total ram usage:        4 bytes
  1875 ;; Hardware stack levels used:    1
  1876 ;; Hardware stack levels required when called:    7
  1877 ;; This function calls:
  1878 ;;		___wmul
  1879 ;;		_readTempAndHumid
  1880 ;;		_read_button_A
  1881 ;;		_read_button_B
  1882 ;;		_swap_machine
  1883 ;; This function is called by:
  1884 ;;		_main
  1885 ;; This function uses a non-reentrant model
  1886 ;;
  1887                           
  1888                           	psect	text13
  1889  003332                     __ptext13:
  1890                           	opt callstack 0
  1891  003332                     _dispatch:
  1892                           	opt callstack 23
  1893  003332                     
  1894                           ;driver.c: 152:     int i = 0;
  1895  003332  0E00               	movlw	0
  1896  003334  0100               	movlb	0	; () banked
  1897  003336  6F70               	movwf	(dispatch@i+1)& (0+255),b
  1898  003338  0E00               	movlw	0
  1899  00333A  6F6F               	movwf	dispatch@i& (0+255),b
  1900                           
  1901                           ;driver.c: 153:     while(execution[i] > 0){
  1902  00333C  EF0D  F01A         	goto	l3609
  1903  003340                     l3599:
  1904                           
  1905                           ; BSR set to: 0
  1906                           ;driver.c: 154:         (tasks[execution[i]-1].callback)(tasks[execution[i]-1].data);
  1907  003340  90D8               	bcf	status,0,c
  1908  003342  356F               	rlcf	dispatch@i& (0+255),w,b
  1909  003344  6ED9               	movwf	fsr2l,c
  1910  003346  3570               	rlcf	(dispatch@i+1)& (0+255),w,b
  1911  003348  6EDA               	movwf	fsr2h,c
  1912  00334A  0EB1               	movlw	low _execution
  1913  00334C  26D9               	addwf	fsr2l,f,c
  1914  00334E  0E00               	movlw	high _execution
  1915  003350  22DA               	addwfc	fsr2h,f,c
  1916  003352  CFDE F060          	movff	postinc2,___wmul@multiplier
  1917  003356  CFDD F061          	movff	postdec2,___wmul@multiplier+1
  1918  00335A  0E00               	movlw	0
  1919  00335C  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  1920  00335E  0E17               	movlw	23
  1921  003360  6F62               	movwf	___wmul@multiplicand& (0+255),b
  1922  003362  ECCD  F01D         	call	___wmul	;wreg free
  1923  003366  0EFC               	movlw	low (_tasks+65532)
  1924  003368  0100               	movlb	0	; () banked
  1925  00336A  2560               	addwf	?___wmul& (0+255),w,b
  1926  00336C  6ED9               	movwf	fsr2l,c
  1927  00336E  0E00               	movlw	high (_tasks+65532)
  1928  003370  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  1929  003372  6EDA               	movwf	fsr2h,c
  1930  003374  CFDE F06B          	movff	postinc2,?_read_button_B
  1931  003378  CFDD F06C          	movff	postdec2,?_read_button_B+1
  1932  00337C  90D8               	bcf	status,0,c
  1933  00337E  356F               	rlcf	dispatch@i& (0+255),w,b
  1934  003380  6ED9               	movwf	fsr2l,c
  1935  003382  3570               	rlcf	(dispatch@i+1)& (0+255),w,b
  1936  003384  6EDA               	movwf	fsr2h,c
  1937  003386  0EB1               	movlw	low _execution
  1938  003388  26D9               	addwf	fsr2l,f,c
  1939  00338A  0E00               	movlw	high _execution
  1940  00338C  22DA               	addwfc	fsr2h,f,c
  1941  00338E  CFDE F060          	movff	postinc2,___wmul@multiplier
  1942  003392  CFDD F061          	movff	postdec2,___wmul@multiplier+1
  1943  003396  0E00               	movlw	0
  1944  003398  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  1945  00339A  0E17               	movlw	23
  1946  00339C  6F62               	movwf	___wmul@multiplicand& (0+255),b
  1947  00339E  ECCD  F01D         	call	___wmul	;wreg free
  1948  0033A2  0EE9               	movlw	low (_tasks+65513)
  1949  0033A4  0100               	movlb	0	; () banked
  1950  0033A6  2560               	addwf	?___wmul& (0+255),w,b
  1951  0033A8  6ED9               	movwf	fsr2l,c
  1952  0033AA  0E00               	movlw	high (_tasks+65513)
  1953  0033AC  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  1954  0033AE  6EDA               	movwf	fsr2h,c
  1955  0033B0  D802               	call	u1758
  1956  0033B2  EFE5  F019         	goto	u1759
  1957  0033B6                     u1758:
  1958  0033B6  0005               	push	
  1959  0033B8  6EFA               	movwf	pclath,c
  1960  0033BA  50DE               	movf	postinc2,w,c
  1961  0033BC  6EFD               	movwf	tosl,c
  1962  0033BE  50DE               	movf	postinc2,w,c
  1963  0033C0  6EFE               	movwf	tosh,c
  1964  0033C2  50DE               	movf	postinc2,w,c
  1965  0033C4  6EFF               	movwf	tosu,c
  1966  0033C6  50FA               	movf	pclath,w,c
  1967  0033C8  0012               	return		;indir
  1968  0033CA                     u1759:
  1969  0033CA                     
  1970                           ;driver.c: 155:         if (execution[i] == 1) remove_tasks ++;
  1971  0033CA  90D8               	bcf	status,0,c
  1972  0033CC  0100               	movlb	0	; () banked
  1973  0033CE  356F               	rlcf	dispatch@i& (0+255),w,b
  1974  0033D0  6ED9               	movwf	fsr2l,c
  1975  0033D2  3570               	rlcf	(dispatch@i+1)& (0+255),w,b
  1976  0033D4  6EDA               	movwf	fsr2h,c
  1977  0033D6  0EB1               	movlw	low _execution
  1978  0033D8  26D9               	addwf	fsr2l,f,c
  1979  0033DA  0E00               	movlw	high _execution
  1980  0033DC  22DA               	addwfc	fsr2h,f,c
  1981  0033DE  04DE               	decf	postinc2,w,c
  1982  0033E0  10DE               	iorwf	postinc2,w,c
  1983  0033E2  A4D8               	btfss	status,2,c
  1984  0033E4  EFF6  F019         	goto	u1761
  1985  0033E8  EFF8  F019         	goto	u1760
  1986  0033EC                     u1761:
  1987  0033EC  EFFA  F019         	goto	l3605
  1988  0033F0                     u1760:
  1989  0033F0                     
  1990                           ; BSR set to: 0
  1991  0033F0  4BCF               	infsnz	_remove_tasks& (0+255),f,b
  1992  0033F2  2BD0               	incf	(_remove_tasks+1)& (0+255),f,b
  1993  0033F4                     l3605:
  1994                           
  1995                           ; BSR set to: 0
  1996                           ;driver.c: 156:         execution[i] = 0;
  1997  0033F4  90D8               	bcf	status,0,c
  1998  0033F6  356F               	rlcf	dispatch@i& (0+255),w,b
  1999  0033F8  6ED9               	movwf	fsr2l,c
  2000  0033FA  3570               	rlcf	(dispatch@i+1)& (0+255),w,b
  2001  0033FC  6EDA               	movwf	fsr2h,c
  2002  0033FE  0EB1               	movlw	low _execution
  2003  003400  26D9               	addwf	fsr2l,f,c
  2004  003402  0E00               	movlw	high _execution
  2005  003404  22DA               	addwfc	fsr2h,f,c
  2006  003406  0E00               	movlw	0
  2007  003408  6EDE               	movwf	postinc2,c
  2008  00340A  0E00               	movlw	0
  2009  00340C  6EDD               	movwf	postdec2,c
  2010  00340E                     
  2011                           ; BSR set to: 0
  2012                           ;driver.c: 157:         i = i + 1;
  2013  00340E  0E01               	movlw	1
  2014  003410  256F               	addwf	dispatch@i& (0+255),w,b
  2015  003412  6F6F               	movwf	dispatch@i& (0+255),b
  2016  003414  0E00               	movlw	0
  2017  003416  2170               	addwfc	(dispatch@i+1)& (0+255),w,b
  2018  003418  6F70               	movwf	(dispatch@i+1)& (0+255),b
  2019  00341A                     l3609:
  2020                           
  2021                           ; BSR set to: 0
  2022                           ;driver.c: 153:     while(execution[i] > 0){
  2023  00341A  90D8               	bcf	status,0,c
  2024  00341C  356F               	rlcf	dispatch@i& (0+255),w,b
  2025  00341E  6ED9               	movwf	fsr2l,c
  2026  003420  3570               	rlcf	(dispatch@i+1)& (0+255),w,b
  2027  003422  6EDA               	movwf	fsr2h,c
  2028  003424  0EB1               	movlw	low _execution
  2029  003426  26D9               	addwf	fsr2l,f,c
  2030  003428  0E00               	movlw	high _execution
  2031  00342A  22DA               	addwfc	fsr2h,f,c
  2032  00342C  0E01               	movlw	1
  2033  00342E  BEDB               	btfsc	plusw2,7,c
  2034  003430  EF25  F01A         	goto	u1770
  2035  003434  0E01               	movlw	1
  2036  003436  50DB               	movf	plusw2,w,c
  2037  003438  E106               	bnz	u1771
  2038  00343A  04DE               	decf	postinc2,w,c
  2039  00343C  B0D8               	btfsc	status,0,c
  2040  00343E  EF23  F01A         	goto	u1771
  2041  003442  EF25  F01A         	goto	u1770
  2042  003446                     u1771:
  2043  003446  EFA0  F019         	goto	l3599
  2044  00344A                     u1770:
  2045  00344A                     
  2046                           ; BSR set to: 0
  2047  00344A  0012               	return		;funcret
  2048  00344C                     __end_of_dispatch:
  2049                           	opt callstack 0
  2050                           
  2051 ;; *************** function _read_button_B *****************
  2052 ;; Defined at:
  2053 ;;		line 21 in file "button.c"
  2054 ;; Parameters:    Size  Location     Type
  2055 ;;		None
  2056 ;; Auto vars:     Size  Location     Type
  2057 ;;		None
  2058 ;; Return value:  Size  Location     Type
  2059 ;;                  1    wreg      void 
  2060 ;; Registers used:
  2061 ;;		wreg, status,2, status,0
  2062 ;; Tracked objects:
  2063 ;;		On entry : 0/0
  2064 ;;		On exit  : 0/0
  2065 ;;		Unchanged: 0/0
  2066 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2067 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2068 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2069 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2070 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2071 ;;Total ram usage:        2 bytes
  2072 ;; Hardware stack levels used:    1
  2073 ;; Hardware stack levels required when called:    4
  2074 ;; This function calls:
  2075 ;;		Nothing
  2076 ;; This function is called by:
  2077 ;;		_initial_register
  2078 ;;		_dispatch
  2079 ;; This function uses a non-reentrant model
  2080 ;;
  2081                           
  2082                           	psect	text14
  2083  003A54                     __ptext14:
  2084                           	opt callstack 0
  2085  003A54                     _read_button_B:
  2086                           	opt callstack 25
  2087  003A54                     
  2088                           ;button.c: 22:     first_read_B = second_read_B;
  2089  003A54  C0DF  F0E3         	movff	_second_read_B,_first_read_B
  2090  003A58                     
  2091                           ;button.c: 23:     second_read_B = PORTBbits.RB0;
  2092  003A58  0E00               	movlw	0
  2093  003A5A  B081               	btfsc	129,0,c	;volatile
  2094  003A5C  0E01               	movlw	1
  2095  003A5E  0100               	movlb	0	; () banked
  2096  003A60  6FDF               	movwf	_second_read_B& (0+255),b
  2097  003A62                     
  2098                           ; BSR set to: 0
  2099                           ;button.c: 24:     if (first_read_B == second_read_B){
  2100  003A62  51DF               	movf	_second_read_B& (0+255),w,b
  2101  003A64  19E3               	xorwf	_first_read_B& (0+255),w,b
  2102  003A66  A4D8               	btfss	status,2,c
  2103  003A68  EF38  F01D         	goto	u1511
  2104  003A6C  EF3A  F01D         	goto	u1510
  2105  003A70                     u1511:
  2106  003A70  EF4A  F01D         	goto	l3331
  2107  003A74                     u1510:
  2108  003A74                     
  2109                           ; BSR set to: 0
  2110                           ;button.c: 25:         if(second_read_B == 0) {
  2111  003A74  51DF               	movf	_second_read_B& (0+255),w,b
  2112  003A76  A4D8               	btfss	status,2,c
  2113  003A78  EF40  F01D         	goto	u1521
  2114  003A7C  EF42  F01D         	goto	u1520
  2115  003A80                     u1521:
  2116  003A80  EF46  F01D         	goto	l3327
  2117  003A84                     u1520:
  2118  003A84                     
  2119                           ; BSR set to: 0
  2120                           ;button.c: 26:             button_B = 1;
  2121  003A84  0E01               	movlw	1
  2122  003A86  6FDD               	movwf	_button_B& (0+255),b
  2123                           
  2124                           ;button.c: 27:         }
  2125  003A88  EF4C  F01D         	goto	l484
  2126  003A8C                     l3327:
  2127                           
  2128                           ; BSR set to: 0
  2129  003A8C  0E02               	movlw	2
  2130  003A8E  6FDD               	movwf	_button_B& (0+255),b
  2131  003A90  EF4C  F01D         	goto	l484
  2132  003A94                     l3331:
  2133                           
  2134                           ; BSR set to: 0
  2135                           ;button.c: 31:     button_B = 0;
  2136  003A94  0E00               	movlw	0
  2137  003A96  6FDD               	movwf	_button_B& (0+255),b
  2138  003A98                     l484:
  2139                           
  2140                           ; BSR set to: 0
  2141  003A98  0012               	return		;funcret
  2142  003A9A                     __end_of_read_button_B:
  2143                           	opt callstack 0
  2144                           
  2145 ;; *************** function _readTempAndHumid *****************
  2146 ;; Defined at:
  2147 ;;		line 71 in file "dht.c"
  2148 ;; Parameters:    Size  Location     Type
  2149 ;;		None
  2150 ;; Auto vars:     Size  Location     Type
  2151 ;;		None
  2152 ;; Return value:  Size  Location     Type
  2153 ;;                  1    wreg      void 
  2154 ;; Registers used:
  2155 ;;		wreg, status,2, status,0, cstack
  2156 ;; Tracked objects:
  2157 ;;		On entry : 0/0
  2158 ;;		On exit  : 0/0
  2159 ;;		Unchanged: 0/0
  2160 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2161 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2162 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2163 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2164 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2165 ;;Total ram usage:        0 bytes
  2166 ;; Hardware stack levels used:    1
  2167 ;; Hardware stack levels required when called:    6
  2168 ;; This function calls:
  2169 ;;		_readDHT
  2170 ;; This function is called by:
  2171 ;;		_initial_register
  2172 ;;		_dispatch
  2173 ;; This function uses a non-reentrant model
  2174 ;;
  2175                           
  2176                           	psect	text15
  2177  003B44                     __ptext15:
  2178                           	opt callstack 0
  2179  003B44                     _readTempAndHumid:
  2180                           	opt callstack 23
  2181  003B44                     
  2182                           ;dht.c: 72:     if(!readDHT()) {
  2183  003B44  ECC4  F017         	call	_readDHT	;wreg free
  2184  003B48  0900               	iorlw	0
  2185  003B4A  A4D8               	btfss	status,2,c
  2186  003B4C  EFAA  F01D         	goto	u1711
  2187  003B50  EFAC  F01D         	goto	u1710
  2188  003B54                     u1711:
  2189  003B54  EFB3  F01D         	goto	l866
  2190  003B58                     u1710:
  2191  003B58                     
  2192                           ;dht.c: 73:         temperature = 0;
  2193  003B58  0E00               	movlw	0
  2194  003B5A  0100               	movlb	0	; () banked
  2195  003B5C  6FDA               	movwf	_temperature& (0+255),b
  2196                           
  2197                           ;dht.c: 74:         humidity = 0;
  2198  003B5E  0E00               	movlw	0
  2199  003B60  6FD9               	movwf	_humidity& (0+255),b
  2200  003B62  EFB7  F01D         	goto	l867
  2201  003B66                     l866:
  2202                           
  2203                           ;dht.c: 77:     temperature = temperature_dht11[0];
  2204  003B66  C0C7  F0DA         	movff	_temperature_dht11,_temperature
  2205                           
  2206                           ;dht.c: 78:     humidity = humidity_dht11[0];
  2207  003B6A  C0C5  F0D9         	movff	_humidity_dht11,_humidity
  2208  003B6E                     l867:
  2209  003B6E  0012               	return		;funcret
  2210  003B70                     __end_of_readTempAndHumid:
  2211                           	opt callstack 0
  2212                           
  2213 ;; *************** function _read_button_A *****************
  2214 ;; Defined at:
  2215 ;;		line 10 in file "button.c"
  2216 ;; Parameters:    Size  Location     Type
  2217 ;;		None
  2218 ;; Auto vars:     Size  Location     Type
  2219 ;;		None
  2220 ;; Return value:  Size  Location     Type
  2221 ;;                  1    wreg      void 
  2222 ;; Registers used:
  2223 ;;		wreg, status,2, status,0
  2224 ;; Tracked objects:
  2225 ;;		On entry : 0/0
  2226 ;;		On exit  : 0/0
  2227 ;;		Unchanged: 0/0
  2228 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2229 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2230 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2231 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2232 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2233 ;;Total ram usage:        2 bytes
  2234 ;; Hardware stack levels used:    1
  2235 ;; Hardware stack levels required when called:    4
  2236 ;; This function calls:
  2237 ;;		Nothing
  2238 ;; This function is called by:
  2239 ;;		_initial_register
  2240 ;;		_dispatch
  2241 ;; This function uses a non-reentrant model
  2242 ;;
  2243                           
  2244                           	psect	text16
  2245  003A0A                     __ptext16:
  2246                           	opt callstack 0
  2247  003A0A                     _read_button_A:
  2248                           	opt callstack 25
  2249  003A0A                     
  2250                           ;button.c: 11:     first_read_A = second_read_A;
  2251  003A0A  C059  F05C         	movff	_second_read_A,_first_read_A
  2252  003A0E                     
  2253                           ;button.c: 12:     second_read_A = PORTAbits.RA5;
  2254  003A0E  0E00               	movlw	0
  2255  003A10  BA80               	btfsc	128,5,c	;volatile
  2256  003A12  0E01               	movlw	1
  2257  003A14  6E59               	movwf	_second_read_A^0,c
  2258  003A16                     
  2259                           ;button.c: 13:     if (first_read_A == second_read_A){
  2260  003A16  5059               	movf	_second_read_A^0,w,c
  2261  003A18  185C               	xorwf	_first_read_A^0,w,c
  2262  003A1A  A4D8               	btfss	status,2,c
  2263  003A1C  EF12  F01D         	goto	u1491
  2264  003A20  EF14  F01D         	goto	u1490
  2265  003A24                     u1491:
  2266  003A24  EF26  F01D         	goto	l3313
  2267  003A28                     u1490:
  2268  003A28                     
  2269                           ;button.c: 14:         if(second_read_A == 0) button_A = 1;
  2270  003A28  5059               	movf	_second_read_A^0,w,c
  2271  003A2A  A4D8               	btfss	status,2,c
  2272  003A2C  EF1A  F01D         	goto	u1501
  2273  003A30  EF1C  F01D         	goto	u1500
  2274  003A34                     u1501:
  2275  003A34  EF21  F01D         	goto	l3309
  2276  003A38                     u1500:
  2277  003A38  0E01               	movlw	1
  2278  003A3A  0100               	movlb	0	; () banked
  2279  003A3C  6FDE               	movwf	_button_A& (0+255),b
  2280  003A3E  EF29  F01D         	goto	l478
  2281  003A42                     l3309:
  2282  003A42  0E02               	movlw	2
  2283  003A44  0100               	movlb	0	; () banked
  2284  003A46  6FDE               	movwf	_button_A& (0+255),b
  2285  003A48  EF29  F01D         	goto	l478
  2286  003A4C                     l3313:
  2287                           
  2288                           ;button.c: 18:     button_A = 0;
  2289  003A4C  0E00               	movlw	0
  2290  003A4E  0100               	movlb	0	; () banked
  2291  003A50  6FDE               	movwf	_button_A& (0+255),b
  2292  003A52                     l478:
  2293                           
  2294                           ; BSR set to: 0
  2295  003A52  0012               	return		;funcret
  2296  003A54                     __end_of_read_button_A:
  2297                           	opt callstack 0
  2298                           
  2299 ;; *************** function _swap_machine *****************
  2300 ;; Defined at:
  2301 ;;		line 10 in file "register.c"
  2302 ;; Parameters:    Size  Location     Type
  2303 ;;		None
  2304 ;; Auto vars:     Size  Location     Type
  2305 ;;		None
  2306 ;; Return value:  Size  Location     Type
  2307 ;;                  1    wreg      void 
  2308 ;; Registers used:
  2309 ;;		wreg, status,2
  2310 ;; Tracked objects:
  2311 ;;		On entry : 0/0
  2312 ;;		On exit  : 0/0
  2313 ;;		Unchanged: 0/0
  2314 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2315 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2316 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2317 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2318 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2319 ;;Total ram usage:        2 bytes
  2320 ;; Hardware stack levels used:    1
  2321 ;; Hardware stack levels required when called:    4
  2322 ;; This function calls:
  2323 ;;		Nothing
  2324 ;; This function is called by:
  2325 ;;		_FSM
  2326 ;;		_dispatch
  2327 ;; This function uses a non-reentrant model
  2328 ;;
  2329                           
  2330                           	psect	text17
  2331  003ADA                     __ptext17:
  2332                           	opt callstack 0
  2333  003ADA                     _swap_machine:
  2334                           	opt callstack 25
  2335  003ADA                     
  2336                           ;register.c: 11:     if (state_working == HEATER_WORK){
  2337  003ADA  5056               	movf	_state_working^0,w,c
  2338  003ADC  A4D8               	btfss	status,2,c
  2339  003ADE  EF73  F01D         	goto	u1391
  2340  003AE2  EF75  F01D         	goto	u1390
  2341  003AE6                     u1391:
  2342  003AE6  EF80  F01D         	goto	l3183
  2343  003AEA                     u1390:
  2344  003AEA                     
  2345                           ;register.c: 12:         time_checkout_HEATER = 0;
  2346  003AEA  0E00               	movlw	0
  2347  003AEC  0100               	movlb	0	; () banked
  2348  003AEE  6FD4               	movwf	(_time_checkout_HEATER+1)& (0+255),b
  2349  003AF0  0E00               	movlw	0
  2350  003AF2  6FD3               	movwf	_time_checkout_HEATER& (0+255),b
  2351  003AF4                     
  2352                           ; BSR set to: 0
  2353                           ;register.c: 13:         LATDbits.LATD4 = 0;
  2354  003AF4  988C               	bcf	140,4,c	;volatile
  2355  003AF6                     
  2356                           ; BSR set to: 0
  2357                           ;register.c: 14:         LATDbits.LATD3 = 0;
  2358  003AF6  968C               	bcf	140,3,c	;volatile
  2359                           
  2360                           ;register.c: 15:         state_working = HEATPUMB_WORK;
  2361  003AF8  0E01               	movlw	1
  2362  003AFA  6E56               	movwf	_state_working^0,c
  2363  003AFC  EF89  F01D         	goto	l246
  2364  003B00                     l3183:
  2365                           
  2366                           ;register.c: 18:     time_checkout_HEATPUMB = 0;
  2367  003B00  0E00               	movlw	0
  2368  003B02  0100               	movlb	0	; () banked
  2369  003B04  6FD2               	movwf	(_time_checkout_HEATPUMB+1)& (0+255),b
  2370  003B06  0E00               	movlw	0
  2371  003B08  6FD1               	movwf	_time_checkout_HEATPUMB& (0+255),b
  2372  003B0A                     
  2373                           ; BSR set to: 0
  2374                           ;register.c: 19:     LATDbits.LATD7 = 0;
  2375  003B0A  9E8C               	bcf	140,7,c	;volatile
  2376  003B0C                     
  2377                           ; BSR set to: 0
  2378                           ;register.c: 20:     LATDbits.LATD6 = 0;
  2379  003B0C  9C8C               	bcf	140,6,c	;volatile
  2380                           
  2381                           ;register.c: 21:     state_working = HEATER_WORK;
  2382  003B0E  0E00               	movlw	0
  2383  003B10  6E56               	movwf	_state_working^0,c
  2384  003B12                     l246:
  2385                           
  2386                           ; BSR set to: 0
  2387  003B12  0012               	return		;funcret
  2388  003B14                     __end_of_swap_machine:
  2389                           	opt callstack 0
  2390                           
  2391 ;; *************** function _readDHT *****************
  2392 ;; Defined at:
  2393 ;;		line 31 in file "dht.c"
  2394 ;; Parameters:    Size  Location     Type
  2395 ;;		None
  2396 ;; Auto vars:     Size  Location     Type
  2397 ;;  timeOut         2    9[BANK0 ] unsigned int 
  2398 ;;  checkSum        1    8[BANK0 ] unsigned char 
  2399 ;; Return value:  Size  Location     Type
  2400 ;;                  1    wreg      unsigned char 
  2401 ;; Registers used:
  2402 ;;		wreg, status,2, status,0, cstack
  2403 ;; Tracked objects:
  2404 ;;		On entry : 0/0
  2405 ;;		On exit  : 0/0
  2406 ;;		Unchanged: 0/0
  2407 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2408 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2409 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2410 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2411 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2412 ;;Total ram usage:        5 bytes
  2413 ;; Hardware stack levels used:    1
  2414 ;; Hardware stack levels required when called:    5
  2415 ;; This function calls:
  2416 ;;		_getByte
  2417 ;; This function is called by:
  2418 ;;		_readTempAndHumid
  2419 ;; This function uses a non-reentrant model
  2420 ;;
  2421                           
  2422                           	psect	text18
  2423  002F88                     __ptext18:
  2424                           	opt callstack 0
  2425  002F88                     _readDHT:
  2426                           	opt callstack 23
  2427  002F88                     
  2428                           ;dht.c: 33:     char checkSum;;dht.c: 34:     unsigned int timeOut = 100;
  2429  002F88  0E00               	movlw	0
  2430  002F8A  0100               	movlb	0	; () banked
  2431  002F8C  6F6A               	movwf	(readDHT@timeOut+1)& (0+255),b
  2432  002F8E  0E64               	movlw	100
  2433  002F90  6F69               	movwf	readDHT@timeOut& (0+255),b
  2434  002F92                     
  2435                           ; BSR set to: 0
  2436                           ;dht.c: 35:     TRISCbits.TRISC0 = 0;
  2437  002F92  9094               	bcf	148,0,c	;volatile
  2438  002F94                     
  2439                           ; BSR set to: 0
  2440                           ;dht.c: 36:     LATCbits.LATC0 = 0;
  2441  002F94  908B               	bcf	139,0,c	;volatile
  2442  002F96                     
  2443                           ; BSR set to: 0
  2444                           ;dht.c: 37:     _delay((unsigned long)((20)*(10000000/4000.0)));
  2445  002F96  0E41               	movlw	65
  2446  002F98  0100               	movlb	0	; () banked
  2447  002F9A  6F66               	movwf	??_readDHT& (0+255),b
  2448  002F9C  0EEE               	movlw	238
  2449  002F9E                     u1967:
  2450  002F9E  2EE8               	decfsz	wreg,f,c
  2451  002FA0  D7FE               	bra	u1967
  2452  002FA2  2F66               	decfsz	??_readDHT& (0+255),f,b
  2453  002FA4  D7FC               	bra	u1967
  2454  002FA6  F000               	nop	
  2455  002FA8                     
  2456                           ;dht.c: 39:     LATCbits.LATC0 = 1;
  2457  002FA8  808B               	bsf	139,0,c	;volatile
  2458  002FAA                     
  2459                           ;dht.c: 40:     _delay((unsigned long)((20)*(10000000/4000000.0)));
  2460  002FAA  0E10               	movlw	16
  2461  002FAC                     u1977:
  2462  002FAC  2EE8               	decfsz	wreg,f,c
  2463  002FAE  D7FE               	bra	u1977
  2464  002FB0  D000               	nop2	
  2465  002FB2                     
  2466                           ;dht.c: 41:     TRISCbits.TRISC0 = 1;
  2467  002FB2  8094               	bsf	148,0,c	;volatile
  2468                           
  2469                           ;dht.c: 43:     while(PORTCbits.RC0 & 1) {
  2470  002FB4  EFEC  F017         	goto	l850
  2471  002FB8                     l3109:
  2472                           
  2473                           ;dht.c: 44:         if(--timeOut == 0)
  2474  002FB8  0100               	movlb	0	; () banked
  2475  002FBA  0769               	decf	readDHT@timeOut& (0+255),f,b
  2476  002FBC  A0D8               	btfss	status,0,c
  2477  002FBE  076A               	decf	(readDHT@timeOut+1)& (0+255),f,b
  2478  002FC0  5169               	movf	readDHT@timeOut& (0+255),w,b
  2479  002FC2  116A               	iorwf	(readDHT@timeOut+1)& (0+255),w,b
  2480  002FC4  A4D8               	btfss	status,2,c
  2481  002FC6  EFE7  F017         	goto	u1281
  2482  002FCA  EFE9  F017         	goto	u1280
  2483  002FCE                     u1281:
  2484  002FCE  EFEC  F017         	goto	l850
  2485  002FD2                     u1280:
  2486  002FD2                     l3111:
  2487                           
  2488                           ; BSR set to: 0
  2489                           ;dht.c: 45:             return 0;
  2490  002FD2  0E00               	movlw	0
  2491  002FD4  EF65  F018         	goto	l853
  2492  002FD8                     l850:
  2493                           
  2494                           ;dht.c: 43:     while(PORTCbits.RC0 & 1) {
  2495  002FD8  B082               	btfsc	130,0,c	;volatile
  2496  002FDA  EFF1  F017         	goto	u1291
  2497  002FDE  EFF3  F017         	goto	u1290
  2498  002FE2                     u1291:
  2499  002FE2  EFDC  F017         	goto	l3109
  2500  002FE6                     u1290:
  2501  002FE6                     
  2502                           ;dht.c: 48:     timeOut = 100;
  2503  002FE6  0E00               	movlw	0
  2504  002FE8  0100               	movlb	0	; () banked
  2505  002FEA  6F6A               	movwf	(readDHT@timeOut+1)& (0+255),b
  2506  002FEC  0E64               	movlw	100
  2507  002FEE  6F69               	movwf	readDHT@timeOut& (0+255),b
  2508                           
  2509                           ;dht.c: 49:     while(!PORTCbits.RC0 & 1) {
  2510  002FF0  EF08  F018         	goto	l3123
  2511  002FF4                     l3117:
  2512                           
  2513                           ; BSR set to: 0
  2514                           ;dht.c: 50:         if(--timeOut == 0)
  2515  002FF4  0769               	decf	readDHT@timeOut& (0+255),f,b
  2516  002FF6  A0D8               	btfss	status,0,c
  2517  002FF8  076A               	decf	(readDHT@timeOut+1)& (0+255),f,b
  2518  002FFA  5169               	movf	readDHT@timeOut& (0+255),w,b
  2519  002FFC  116A               	iorwf	(readDHT@timeOut+1)& (0+255),w,b
  2520  002FFE  A4D8               	btfss	status,2,c
  2521  003000  EF04  F018         	goto	u1301
  2522  003004  EF06  F018         	goto	u1300
  2523  003008                     u1301:
  2524  003008  EF08  F018         	goto	l3123
  2525  00300C                     u1300:
  2526  00300C  EFE9  F017         	goto	l3111
  2527  003010                     l3123:
  2528                           
  2529                           ; BSR set to: 0
  2530                           ;dht.c: 49:     while(!PORTCbits.RC0 & 1) {
  2531  003010  A082               	btfss	130,0,c	;volatile
  2532  003012  EF0D  F018         	goto	u1311
  2533  003016  EF10  F018         	goto	u1310
  2534  00301A                     u1311:
  2535  00301A  0E01               	movlw	1
  2536  00301C  EF11  F018         	goto	u1320
  2537  003020                     u1310:
  2538  003020  0E00               	movlw	0
  2539  003022                     u1320:
  2540  003022  6F66               	movwf	??_readDHT& (0+255),b
  2541  003024  6B67               	clrf	(??_readDHT+1)& (0+255),b
  2542  003026  B166               	btfsc	??_readDHT& (0+255),0,b
  2543  003028  EF18  F018         	goto	u1331
  2544  00302C  EF1A  F018         	goto	u1330
  2545  003030                     u1331:
  2546  003030  EFFA  F017         	goto	l3117
  2547  003034                     u1330:
  2548  003034                     
  2549                           ; BSR set to: 0
  2550                           ;dht.c: 54:     timeOut = 100;
  2551  003034  0E00               	movlw	0
  2552  003036  6F6A               	movwf	(readDHT@timeOut+1)& (0+255),b
  2553  003038  0E64               	movlw	100
  2554  00303A  6F69               	movwf	readDHT@timeOut& (0+255),b
  2555                           
  2556                           ;dht.c: 55:     while(PORTCbits.RC0 & 1) {
  2557  00303C  EF2E  F018         	goto	l859
  2558  003040                     l3127:
  2559                           
  2560                           ; BSR set to: 0
  2561                           ;dht.c: 56:         if(--timeOut == 0)
  2562  003040  0769               	decf	readDHT@timeOut& (0+255),f,b
  2563  003042  A0D8               	btfss	status,0,c
  2564  003044  076A               	decf	(readDHT@timeOut+1)& (0+255),f,b
  2565  003046  5169               	movf	readDHT@timeOut& (0+255),w,b
  2566  003048  116A               	iorwf	(readDHT@timeOut+1)& (0+255),w,b
  2567  00304A  A4D8               	btfss	status,2,c
  2568  00304C  EF2A  F018         	goto	u1341
  2569  003050  EF2C  F018         	goto	u1340
  2570  003054                     u1341:
  2571  003054  EF2E  F018         	goto	l859
  2572  003058                     u1340:
  2573  003058  EFE9  F017         	goto	l3111
  2574  00305C                     l859:
  2575                           
  2576                           ; BSR set to: 0
  2577                           ;dht.c: 55:     while(PORTCbits.RC0 & 1) {
  2578  00305C  B082               	btfsc	130,0,c	;volatile
  2579  00305E  EF33  F018         	goto	u1351
  2580  003062  EF35  F018         	goto	u1350
  2581  003066                     u1351:
  2582  003066  EF20  F018         	goto	l3127
  2583  00306A                     u1350:
  2584  00306A                     
  2585                           ; BSR set to: 0
  2586                           ;dht.c: 60:     humidity_dht11[0] = getByte();
  2587  00306A  EC26  F01A         	call	_getByte	;wreg free
  2588  00306E  0100               	movlb	0	; () banked
  2589  003070  6FC5               	movwf	_humidity_dht11& (0+255),b
  2590                           
  2591                           ;dht.c: 61:     humidity_dht11[1] = getByte();
  2592  003072  EC26  F01A         	call	_getByte	;wreg free
  2593  003076  0100               	movlb	0	; () banked
  2594  003078  6FC6               	movwf	(_humidity_dht11+1)& (0+255),b
  2595                           
  2596                           ;dht.c: 62:     temperature_dht11[0] = getByte();
  2597  00307A  EC26  F01A         	call	_getByte	;wreg free
  2598  00307E  0100               	movlb	0	; () banked
  2599  003080  6FC7               	movwf	_temperature_dht11& (0+255),b
  2600                           
  2601                           ;dht.c: 63:     temperature_dht11[1] = getByte();
  2602  003082  EC26  F01A         	call	_getByte	;wreg free
  2603  003086  0100               	movlb	0	; () banked
  2604  003088  6FC8               	movwf	(_temperature_dht11+1)& (0+255),b
  2605                           
  2606                           ;dht.c: 64:     checkSum = getByte();
  2607  00308A  EC26  F01A         	call	_getByte	;wreg free
  2608  00308E  0100               	movlb	0	; () banked
  2609  003090  6F68               	movwf	readDHT@checkSum& (0+255),b
  2610  003092                     
  2611                           ; BSR set to: 0
  2612                           ;dht.c: 65:     if( (char)( humidity_dht11[0] + humidity_dht11[1] + temperature_dht11[0]
      +                           + temperature_dht11[1] ) & 0xFF != checkSum ){
  2613  003092  2968               	incf	readDHT@checkSum& (0+255),w,b
  2614  003094  A4D8               	btfss	status,2,c
  2615  003096  EF4F  F018         	goto	u1361
  2616  00309A  EF53  F018         	goto	u1360
  2617  00309E                     u1361:
  2618  00309E  6B66               	clrf	??_readDHT& (0+255),b
  2619  0030A0  2B66               	incf	??_readDHT& (0+255),f,b
  2620  0030A2  EF55  F018         	goto	u1378
  2621  0030A6                     u1360:
  2622  0030A6  0100               	movlb	0	; () banked
  2623  0030A8  6B66               	clrf	??_readDHT& (0+255),b
  2624  0030AA                     u1378:
  2625  0030AA  51C6               	movf	(_humidity_dht11+1)& (0+255),w,b
  2626  0030AC  25C8               	addwf	(_temperature_dht11+1)& (0+255),w,b
  2627  0030AE  25C5               	addwf	_humidity_dht11& (0+255),w,b
  2628  0030B0  25C7               	addwf	_temperature_dht11& (0+255),w,b
  2629  0030B2  1566               	andwf	??_readDHT& (0+255),w,b
  2630  0030B4  0900               	iorlw	0
  2631  0030B6  B4D8               	btfsc	status,2,c
  2632  0030B8  EF60  F018         	goto	u1381
  2633  0030BC  EF62  F018         	goto	u1380
  2634  0030C0                     u1381:
  2635  0030C0  EF64  F018         	goto	l3141
  2636  0030C4                     u1380:
  2637  0030C4  EFE9  F017         	goto	l3111
  2638  0030C8                     l3141:
  2639                           
  2640                           ; BSR set to: 0
  2641                           ;dht.c: 68:     return 1;
  2642  0030C8  0E01               	movlw	1
  2643  0030CA                     l853:
  2644                           
  2645                           ; BSR set to: 0
  2646  0030CA  0012               	return		;funcret
  2647  0030CC                     __end_of_readDHT:
  2648                           	opt callstack 0
  2649                           
  2650 ;; *************** function _getByte *****************
  2651 ;; Defined at:
  2652 ;;		line 12 in file "dht.c"
  2653 ;; Parameters:    Size  Location     Type
  2654 ;;		None
  2655 ;; Auto vars:     Size  Location     Type
  2656 ;;  timeOut         2    3[BANK0 ] unsigned int 
  2657 ;;  j               1    5[BANK0 ] unsigned char 
  2658 ;;  i               1    2[BANK0 ] unsigned char 
  2659 ;; Return value:  Size  Location     Type
  2660 ;;                  1    wreg      unsigned char 
  2661 ;; Registers used:
  2662 ;;		wreg, status,2, status,0
  2663 ;; Tracked objects:
  2664 ;;		On entry : 0/0
  2665 ;;		On exit  : 0/0
  2666 ;;		Unchanged: 0/0
  2667 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2668 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2669 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2670 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2671 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2672 ;;Total ram usage:        6 bytes
  2673 ;; Hardware stack levels used:    1
  2674 ;; Hardware stack levels required when called:    4
  2675 ;; This function calls:
  2676 ;;		Nothing
  2677 ;; This function is called by:
  2678 ;;		_readDHT
  2679 ;; This function uses a non-reentrant model
  2680 ;;
  2681                           
  2682                           	psect	text19
  2683  00344C                     __ptext19:
  2684                           	opt callstack 0
  2685  00344C                     _getByte:
  2686                           	opt callstack 23
  2687  00344C                     
  2688                           ;dht.c: 13:     char i, j;;dht.c: 14:     unsigned int timeOut;;dht.c: 15:     for(j = 0
      +                          ; j < 8; j++){
  2689  00344C  0E00               	movlw	0
  2690  00344E  0100               	movlb	0	; () banked
  2691  003450  6F65               	movwf	getByte@j& (0+255),b
  2692  003452  EF3A  F01A         	goto	l837
  2693  003456                     l2841:
  2694                           
  2695                           ; BSR set to: 0
  2696                           ;dht.c: 17:             if(--timeOut == 0) return 0;
  2697  003456  0763               	decf	getByte@timeOut& (0+255),f,b
  2698  003458  A0D8               	btfss	status,0,c
  2699  00345A  0764               	decf	(getByte@timeOut+1)& (0+255),f,b
  2700  00345C  5163               	movf	getByte@timeOut& (0+255),w,b
  2701  00345E  1164               	iorwf	(getByte@timeOut+1)& (0+255),w,b
  2702  003460  A4D8               	btfss	status,2,c
  2703  003462  EF35  F01A         	goto	u1011
  2704  003466  EF37  F01A         	goto	u1010
  2705  00346A                     u1011:
  2706  00346A  EF3A  F01A         	goto	l837
  2707  00346E                     u1010:
  2708  00346E                     l2843:
  2709                           
  2710                           ; BSR set to: 0
  2711  00346E  0E00               	movlw	0
  2712  003470  EF96  F01A         	goto	l840
  2713  003474                     l837:
  2714                           
  2715                           ; BSR set to: 0
  2716                           ;dht.c: 16:         while(!(PORTCbits.RC0 & 1))
  2717  003474  A082               	btfss	130,0,c	;volatile
  2718  003476  EF3F  F01A         	goto	u1021
  2719  00347A  EF41  F01A         	goto	u1020
  2720  00347E                     u1021:
  2721  00347E  EF2B  F01A         	goto	l2841
  2722  003482                     u1020:
  2723  003482                     
  2724                           ; BSR set to: 0
  2725                           ;dht.c: 18:          _delay((unsigned long)((25)*(10000000/4000000.0)));
  2726  003482  0E14               	movlw	20
  2727  003484                     u1987:
  2728  003484  2EE8               	decfsz	wreg,f,c
  2729  003486  D7FE               	bra	u1987
  2730  003488  D000               	nop2	
  2731  00348A                     
  2732                           ;dht.c: 19:         if(PORTCbits.RC0 == 0)
  2733  00348A  B082               	btfsc	130,0,c	;volatile
  2734  00348C  EF4A  F01A         	goto	u1031
  2735  003490  EF4C  F01A         	goto	u1030
  2736  003494                     u1031:
  2737  003494  EF60  F01A         	goto	l2853
  2738  003498                     u1030:
  2739  003498                     
  2740                           ;dht.c: 20:             i&= ~(1<<(7 - j));
  2741  003498  0100               	movlb	0	; () banked
  2742  00349A  5165               	movf	getByte@j& (0+255),w,b
  2743  00349C  0807               	sublw	7
  2744  00349E  6F60               	movwf	??_getByte& (0+255),b
  2745  0034A0  0E01               	movlw	1
  2746  0034A2  6F61               	movwf	(??_getByte+1)& (0+255),b
  2747  0034A4  2B60               	incf	??_getByte& (0+255),f,b
  2748  0034A6  EF57  F01A         	goto	u1044
  2749  0034AA                     u1045:
  2750  0034AA  90D8               	bcf	status,0,c
  2751  0034AC  3761               	rlcf	(??_getByte+1)& (0+255),f,b
  2752  0034AE                     u1044:
  2753  0034AE  2F60               	decfsz	??_getByte& (0+255),f,b
  2754  0034B0  EF55  F01A         	goto	u1045
  2755  0034B4  0100               	movlb	0	; () banked
  2756  0034B6  5161               	movf	(??_getByte+1)& (0+255),w,b
  2757  0034B8  0AFF               	xorlw	255
  2758  0034BA  1762               	andwf	getByte@i& (0+255),f,b
  2759  0034BC  EF8C  F01A         	goto	l2863
  2760  0034C0                     l2853:
  2761                           
  2762                           ;dht.c: 22:             i|= (1 << (7 - j));
  2763  0034C0  0100               	movlb	0	; () banked
  2764  0034C2  5165               	movf	getByte@j& (0+255),w,b
  2765  0034C4  0807               	sublw	7
  2766  0034C6  6F60               	movwf	??_getByte& (0+255),b
  2767  0034C8  0E01               	movlw	1
  2768  0034CA  6F61               	movwf	(??_getByte+1)& (0+255),b
  2769  0034CC  2B60               	incf	??_getByte& (0+255),f,b
  2770  0034CE  EF6B  F01A         	goto	u1054
  2771  0034D2                     u1055:
  2772  0034D2  90D8               	bcf	status,0,c
  2773  0034D4  3761               	rlcf	(??_getByte+1)& (0+255),f,b
  2774  0034D6                     u1054:
  2775  0034D6  2F60               	decfsz	??_getByte& (0+255),f,b
  2776  0034D8  EF69  F01A         	goto	u1055
  2777  0034DC  0100               	movlb	0	; () banked
  2778  0034DE  5161               	movf	(??_getByte+1)& (0+255),w,b
  2779  0034E0  1362               	iorwf	getByte@i& (0+255),f,b
  2780  0034E2                     
  2781                           ; BSR set to: 0
  2782                           ;dht.c: 23:             timeOut = 100;
  2783  0034E2  0E00               	movlw	0
  2784  0034E4  6F64               	movwf	(getByte@timeOut+1)& (0+255),b
  2785  0034E6  0E64               	movlw	100
  2786  0034E8  6F63               	movwf	getByte@timeOut& (0+255),b
  2787                           
  2788                           ;dht.c: 24:             while(PORTCbits.RC0 & 1)
  2789  0034EA  EF85  F01A         	goto	l844
  2790  0034EE                     l2857:
  2791                           
  2792                           ; BSR set to: 0
  2793                           ;dht.c: 25:                 if(--timeOut == 0) return 0;
  2794  0034EE  0763               	decf	getByte@timeOut& (0+255),f,b
  2795  0034F0  A0D8               	btfss	status,0,c
  2796  0034F2  0764               	decf	(getByte@timeOut+1)& (0+255),f,b
  2797  0034F4  5163               	movf	getByte@timeOut& (0+255),w,b
  2798  0034F6  1164               	iorwf	(getByte@timeOut+1)& (0+255),w,b
  2799  0034F8  A4D8               	btfss	status,2,c
  2800  0034FA  EF81  F01A         	goto	u1061
  2801  0034FE  EF83  F01A         	goto	u1060
  2802  003502                     u1061:
  2803  003502  EF85  F01A         	goto	l844
  2804  003506                     u1060:
  2805  003506  EF37  F01A         	goto	l2843
  2806  00350A                     l844:
  2807                           
  2808                           ; BSR set to: 0
  2809                           ;dht.c: 24:             while(PORTCbits.RC0 & 1)
  2810  00350A  B082               	btfsc	130,0,c	;volatile
  2811  00350C  EF8A  F01A         	goto	u1071
  2812  003510  EF8C  F01A         	goto	u1070
  2813  003514                     u1071:
  2814  003514  EF77  F01A         	goto	l2857
  2815  003518                     u1070:
  2816  003518                     l2863:
  2817                           
  2818                           ; BSR set to: 0
  2819                           ;dht.c: 27:     }
  2820  003518  2B65               	incf	getByte@j& (0+255),f,b
  2821  00351A                     
  2822                           ; BSR set to: 0
  2823  00351A  0E07               	movlw	7
  2824  00351C  6565               	cpfsgt	getByte@j& (0+255),b
  2825  00351E  EF93  F01A         	goto	u1081
  2826  003522  EF95  F01A         	goto	u1080
  2827  003526                     u1081:
  2828  003526  EF3A  F01A         	goto	l837
  2829  00352A                     u1080:
  2830  00352A                     
  2831                           ; BSR set to: 0
  2832                           ;dht.c: 28:     return i;
  2833  00352A  5162               	movf	getByte@i& (0+255),w,b
  2834  00352C                     l840:
  2835                           
  2836                           ; BSR set to: 0
  2837  00352C  0012               	return		;funcret
  2838  00352E                     __end_of_getByte:
  2839                           	opt callstack 0
  2840                           
  2841 ;; *************** function _FSM *****************
  2842 ;; Defined at:
  2843 ;;		line 17 in file "FSM.c"
  2844 ;; Parameters:    Size  Location     Type
  2845 ;;		None
  2846 ;; Auto vars:     Size  Location     Type
  2847 ;;  temp            4    0        unsigned long 
  2848 ;; Return value:  Size  Location     Type
  2849 ;;                  1    wreg      void 
  2850 ;; Registers used:
  2851 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2852 ;; Tracked objects:
  2853 ;;		On entry : 0/0
  2854 ;;		On exit  : 0/0
  2855 ;;		Unchanged: 0/0
  2856 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2857 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2858 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2859 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2860 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2861 ;;Total ram usage:       14 bytes
  2862 ;; Hardware stack levels used:    1
  2863 ;; Hardware stack levels required when called:   10
  2864 ;; This function calls:
  2865 ;;		___wmul
  2866 ;;		_displayDHT
  2867 ;;		_display_state
  2868 ;;		_increaseButton
  2869 ;;		_register_timer
  2870 ;;		_switch_button_state
  2871 ;; This function is called by:
  2872 ;;		_main
  2873 ;; This function uses a non-reentrant model
  2874 ;;
  2875                           
  2876                           	psect	text20
  2877  002A60                     __ptext20:
  2878                           	opt callstack 0
  2879  002A60                     _FSM:
  2880                           	opt callstack 20
  2881  002A60                     
  2882                           ;FSM.c: 18:     displayDHT();
  2883  002A60  ECFA  F01A         	call	_displayDHT	;wreg free
  2884                           
  2885                           ;FSM.c: 19:     switch(state_machine){
  2886  002A64  EF01  F016         	goto	l3671
  2887  002A68                     l3613:
  2888                           
  2889                           ; BSR set to: 0
  2890                           ;FSM.c: 21:             switch_button_state();
  2891  002A68  EC24  F016         	call	_switch_button_state	;wreg free
  2892                           
  2893                           ;FSM.c: 22:             break;
  2894  002A6C  EF23  F016         	goto	l635
  2895  002A70                     l3615:
  2896                           
  2897                           ; BSR set to: 0
  2898                           ;FSM.c: 24:             switch_button_state();
  2899  002A70  EC24  F016         	call	_switch_button_state	;wreg free
  2900  002A74                     
  2901                           ;FSM.c: 25:             if(temp_heat_up > TEMP_SWAP*100) {
  2902  002A74  0100               	movlb	0	; () banked
  2903  002A76  51E0               	movf	_TEMP_SWAP& (0+255),w,b
  2904  002A78  0D64               	mullw	100
  2905  002A7A  51D5               	movf	_temp_heat_up& (0+255),w,b
  2906  002A7C  5CF3               	subwf	243,w,c
  2907  002A7E  50F4               	movf	244,w,c
  2908  002A80  0A80               	xorlw	128
  2909  002A82  6FA3               	movwf	??_FSM& (0+255),b
  2910  002A84  51D6               	movf	(_temp_heat_up+1)& (0+255),w,b
  2911  002A86  0A80               	xorlw	128
  2912  002A88  59A3               	subwfb	??_FSM& (0+255),w,b
  2913  002A8A  B0D8               	btfsc	status,0,c
  2914  002A8C  EF4A  F015         	goto	u1781
  2915  002A90  EF4C  F015         	goto	u1780
  2916  002A94                     u1781:
  2917  002A94  EF23  F016         	goto	l635
  2918  002A98                     u1780:
  2919  002A98                     
  2920                           ; BSR set to: 0
  2921                           ;FSM.c: 26:                 state_machine = WORKING;
  2922  002A98  0E02               	movlw	2
  2923  002A9A  6E57               	movwf	_state_machine^0,c
  2924  002A9C                     
  2925                           ; BSR set to: 0
  2926                           ;FSM.c: 27:                 uint32_t temp = register_timer(0,TIME_SWAP*1000,swap_machine
      +                          ,1);
  2927  002A9C  C0E1  F060         	movff	_TIME_SWAP,___wmul@multiplier
  2928  002AA0  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
  2929  002AA2  0E03               	movlw	3
  2930  002AA4  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  2931  002AA6  0EE8               	movlw	232
  2932  002AA8  6F62               	movwf	___wmul@multiplicand& (0+255),b
  2933  002AAA  ECCD  F01D         	call	___wmul	;wreg free
  2934  002AAE  0100               	movlb	0	; () banked
  2935  002AB0  C060  F0A9         	movff	?___wmul,_FSM$2315
  2936  002AB4  C061  F0AA         	movff	?___wmul+1,_FSM$2315+1
  2937  002AB8  0E00               	movlw	0
  2938  002ABA  BFAA               	btfsc	(_FSM$2315+1)& (0+255),7,b
  2939  002ABC  0EFF               	movlw	-1
  2940  002ABE  6FAB               	movwf	(_FSM$2315+2)& (0+255),b
  2941  002AC0  6FAC               	movwf	(_FSM$2315+3)& (0+255),b
  2942  002AC2  6FAD               	movwf	(_FSM$2315+4)& (0+255),b
  2943  002AC4  6FAE               	movwf	(_FSM$2315+5)& (0+255),b
  2944  002AC6  6FAF               	movwf	(_FSM$2315+6)& (0+255),b
  2945  002AC8  6FB0               	movwf	(_FSM$2315+7)& (0+255),b
  2946  002ACA                     
  2947                           ; BSR set to: 0
  2948  002ACA  0E00               	movlw	0
  2949  002ACC  6F66               	movwf	register_timer@delay& (0+255),b
  2950  002ACE  0E00               	movlw	0
  2951  002AD0  6F67               	movwf	(register_timer@delay+1)& (0+255),b
  2952  002AD2  0E00               	movlw	0
  2953  002AD4  6F68               	movwf	(register_timer@delay+2)& (0+255),b
  2954  002AD6  0E00               	movlw	0
  2955  002AD8  6F69               	movwf	(register_timer@delay+3)& (0+255),b
  2956  002ADA  0E00               	movlw	0
  2957  002ADC  6F6A               	movwf	(register_timer@delay+4)& (0+255),b
  2958  002ADE  0E00               	movlw	0
  2959  002AE0  6F6B               	movwf	(register_timer@delay+5)& (0+255),b
  2960  002AE2  0E00               	movlw	0
  2961  002AE4  6F6C               	movwf	(register_timer@delay+6)& (0+255),b
  2962  002AE6  0E00               	movlw	0
  2963  002AE8  6F6D               	movwf	(register_timer@delay+7)& (0+255),b
  2964  002AEA  C0A9  F06E         	movff	_FSM$2315,register_timer@period
  2965  002AEE  C0AA  F06F         	movff	_FSM$2315+1,register_timer@period+1
  2966  002AF2  C0AB  F070         	movff	_FSM$2315+2,register_timer@period+2
  2967  002AF6  C0AC  F071         	movff	_FSM$2315+3,register_timer@period+3
  2968  002AFA  C0AD  F072         	movff	_FSM$2315+4,register_timer@period+4
  2969  002AFE  C0AE  F073         	movff	_FSM$2315+5,register_timer@period+5
  2970  002B02  C0AF  F074         	movff	_FSM$2315+6,register_timer@period+6
  2971  002B06  C0B0  F075         	movff	_FSM$2315+7,register_timer@period+7
  2972  002B0A  0EDA               	movlw	low _swap_machine
  2973  002B0C  6F76               	movwf	register_timer@callback& (0+255),b
  2974  002B0E  0E3A               	movlw	high _swap_machine
  2975  002B10  6F77               	movwf	(register_timer@callback+1)& (0+255),b
  2976  002B12  0E00               	movlw	low (_swap_machine shr (0+16))
  2977  002B14  6F78               	movwf	(register_timer@callback+2)& (0+255),b
  2978  002B16  0E01               	movlw	1
  2979  002B18  6F79               	movwf	register_timer@data& (0+255),b
  2980  002B1A  0E00               	movlw	0
  2981  002B1C  6F7A               	movwf	(register_timer@data+1)& (0+255),b
  2982  002B1E  EC53  F008         	call	_register_timer	;wreg free
  2983  002B22                     
  2984                           ;FSM.c: 28:                 state_working = HEATER_WORK;
  2985  002B22  0E00               	movlw	0
  2986  002B24  6E56               	movwf	_state_working^0,c
  2987  002B26                     l3627:
  2988                           
  2989                           ;FSM.c: 29:                 display_state(state_machine);
  2990  002B26  C057  F068         	movff	_state_machine,display_state@state
  2991  002B2A  0100               	movlb	0	; () banked
  2992  002B2C  6B69               	clrf	(display_state@state+1)& (0+255),b
  2993  002B2E  ECA7  F012         	call	_display_state	;wreg free
  2994  002B32  EF23  F016         	goto	l635
  2995  002B36                     l3629:
  2996                           
  2997                           ; BSR set to: 0
  2998                           ;FSM.c: 33:             if (temp_humidity >= 300) LATDbits.LATD0 = 1;
  2999  002B36  BE53               	btfsc	(_temp_humidity+1)^0,7,c
  3000  002B38  EFA7  F015         	goto	u1791
  3001  002B3C  0E2C               	movlw	44
  3002  002B3E  5C52               	subwf	_temp_humidity^0,w,c
  3003  002B40  0E01               	movlw	1
  3004  002B42  5853               	subwfb	(_temp_humidity+1)^0,w,c
  3005  002B44  A0D8               	btfss	status,0,c
  3006  002B46  EFA7  F015         	goto	u1791
  3007  002B4A  EFA9  F015         	goto	u1790
  3008  002B4E                     u1791:
  3009  002B4E  EFD4  F015         	goto	l3651
  3010  002B52                     u1790:
  3011  002B52                     
  3012                           ; BSR set to: 0
  3013  002B52  808C               	bsf	140,0,c	;volatile
  3014  002B54  EFD4  F015         	goto	l3651
  3015  002B58                     l3633:
  3016                           
  3017                           ; BSR set to: 0
  3018                           ;FSM.c: 36:                     if (time_checkout_HEATER >= 6000/10) state_machine = TIM
      +                          E_OUT;
  3019  002B58  BFD4               	btfsc	(_time_checkout_HEATER+1)& (0+255),7,b
  3020  002B5A  EFB8  F015         	goto	u1801
  3021  002B5E  0E58               	movlw	88
  3022  002B60  5DD3               	subwf	_time_checkout_HEATER& (0+255),w,b
  3023  002B62  0E02               	movlw	2
  3024  002B64  59D4               	subwfb	(_time_checkout_HEATER+1)& (0+255),w,b
  3025  002B66  A0D8               	btfss	status,0,c
  3026  002B68  EFB8  F015         	goto	u1801
  3027  002B6C  EFBA  F015         	goto	u1800
  3028  002B70                     u1801:
  3029  002B70  EFBC  F015         	goto	l3637
  3030  002B74                     u1800:
  3031  002B74                     
  3032                           ; BSR set to: 0
  3033  002B74  0E03               	movlw	3
  3034  002B76  6E57               	movwf	_state_machine^0,c
  3035  002B78                     l3637:
  3036                           
  3037                           ; BSR set to: 0
  3038                           ;FSM.c: 37:                     LATDbits.LATD4 = 1;
  3039  002B78  888C               	bsf	140,4,c	;volatile
  3040  002B7A                     
  3041                           ; BSR set to: 0
  3042                           ;FSM.c: 38:                     LATDbits.LATD3 = 1;
  3043  002B7A  868C               	bsf	140,3,c	;volatile
  3044                           
  3045                           ;FSM.c: 39:                     break;
  3046  002B7C  EF34  F015         	goto	l3613
  3047  002B80                     l3641:
  3048                           
  3049                           ; BSR set to: 0
  3050                           ;FSM.c: 41:                     if (time_checkout_HEATPUMB >= 6000/10) state_machine = T
      +                          IME_OUT;
  3051  002B80  BFD2               	btfsc	(_time_checkout_HEATPUMB+1)& (0+255),7,b
  3052  002B82  EFCC  F015         	goto	u1811
  3053  002B86  0E58               	movlw	88
  3054  002B88  5DD1               	subwf	_time_checkout_HEATPUMB& (0+255),w,b
  3055  002B8A  0E02               	movlw	2
  3056  002B8C  59D2               	subwfb	(_time_checkout_HEATPUMB+1)& (0+255),w,b
  3057  002B8E  A0D8               	btfss	status,0,c
  3058  002B90  EFCC  F015         	goto	u1811
  3059  002B94  EFCE  F015         	goto	u1810
  3060  002B98                     u1811:
  3061  002B98  EFD0  F015         	goto	l3645
  3062  002B9C                     u1810:
  3063  002B9C                     
  3064                           ; BSR set to: 0
  3065  002B9C  0E03               	movlw	3
  3066  002B9E  6E57               	movwf	_state_machine^0,c
  3067  002BA0                     l3645:
  3068                           
  3069                           ; BSR set to: 0
  3070                           ;FSM.c: 42:                     LATDbits.LATD7 = 1;
  3071  002BA0  8E8C               	bsf	140,7,c	;volatile
  3072  002BA2                     
  3073                           ; BSR set to: 0
  3074                           ;FSM.c: 43:                     LATDbits.LATD6 = 1;
  3075  002BA2  8C8C               	bsf	140,6,c	;volatile
  3076                           
  3077                           ;FSM.c: 44:                     break;
  3078  002BA4  EF34  F015         	goto	l3613
  3079  002BA8                     l3651:
  3080                           
  3081                           ; BSR set to: 0
  3082  002BA8  5056               	movf	_state_working^0,w,c
  3083  002BAA  6FA3               	movwf	??_FSM& (0+255),b
  3084  002BAC  6BA4               	clrf	(??_FSM+1)& (0+255),b
  3085                           
  3086                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3087                           ; Switch size 1, requested type "simple"
  3088                           ; Number of cases is 1, Range of values is 0 to 0
  3089                           ; switch strategies available:
  3090                           ; Name         Instructions Cycles
  3091                           ; simple_byte            4     3 (average)
  3092                           ;	Chosen strategy is simple_byte
  3093  002BAE  51A4               	movf	(??_FSM+1)& (0+255),w,b
  3094  002BB0  0A00               	xorlw	0	; case 0
  3095  002BB2  B4D8               	btfsc	status,2,c
  3096  002BB4  EFDE  F015         	goto	l4009
  3097  002BB8  EF34  F015         	goto	l3613
  3098  002BBC                     l4009:
  3099                           
  3100                           ; BSR set to: 0
  3101                           ; Switch size 1, requested type "simple"
  3102                           ; Number of cases is 2, Range of values is 0 to 1
  3103                           ; switch strategies available:
  3104                           ; Name         Instructions Cycles
  3105                           ; simple_byte            7     4 (average)
  3106                           ;	Chosen strategy is simple_byte
  3107  002BBC  51A3               	movf	??_FSM& (0+255),w,b
  3108  002BBE  0A00               	xorlw	0	; case 0
  3109  002BC0  B4D8               	btfsc	status,2,c
  3110  002BC2  EFAC  F015         	goto	l3633
  3111  002BC6  0A01               	xorlw	1	; case 1
  3112  002BC8  B4D8               	btfsc	status,2,c
  3113  002BCA  EFC0  F015         	goto	l3641
  3114  002BCE  EF34  F015         	goto	l3613
  3115  002BD2                     l3655:
  3116                           
  3117                           ; BSR set to: 0
  3118                           ;FSM.c: 49:             display_state(state_machine);
  3119  002BD2  C057  F068         	movff	_state_machine,display_state@state
  3120  002BD6  6B69               	clrf	(display_state@state+1)& (0+255),b
  3121  002BD8  ECA7  F012         	call	_display_state	;wreg free
  3122  002BDC                     
  3123                           ;FSM.c: 50:             time_checkout_HEATER = 0;
  3124  002BDC  0E00               	movlw	0
  3125  002BDE  0100               	movlb	0	; () banked
  3126  002BE0  6FD4               	movwf	(_time_checkout_HEATER+1)& (0+255),b
  3127  002BE2  0E00               	movlw	0
  3128  002BE4  6FD3               	movwf	_time_checkout_HEATER& (0+255),b
  3129  002BE6                     
  3130                           ; BSR set to: 0
  3131                           ;FSM.c: 51:             time_checkout_HEATPUMB = 0;
  3132  002BE6  0E00               	movlw	0
  3133  002BE8  6FD2               	movwf	(_time_checkout_HEATPUMB+1)& (0+255),b
  3134  002BEA  0E00               	movlw	0
  3135  002BEC  6FD1               	movwf	_time_checkout_HEATPUMB& (0+255),b
  3136  002BEE                     
  3137                           ; BSR set to: 0
  3138                           ;FSM.c: 52:             state_machine = IDLE;
  3139  002BEE  0E00               	movlw	0
  3140  002BF0  6E57               	movwf	_state_machine^0,c
  3141  002BF2  EF93  F015         	goto	l3627
  3142  002BF6                     l3665:
  3143                           
  3144                           ; BSR set to: 0
  3145                           ;FSM.c: 56:             switch_button_state();
  3146  002BF6  EC24  F016         	call	_switch_button_state	;wreg free
  3147  002BFA                     
  3148                           ;FSM.c: 57:             increaseButton();
  3149  002BFA  EC2C  F014         	call	_increaseButton	;wreg free
  3150                           
  3151                           ;FSM.c: 58:             break;
  3152  002BFE  EF23  F016         	goto	l635
  3153  002C02                     l3671:
  3154  002C02  5057               	movf	_state_machine^0,w,c
  3155  002C04  0100               	movlb	0	; () banked
  3156  002C06  6FA3               	movwf	??_FSM& (0+255),b
  3157  002C08  6BA4               	clrf	(??_FSM+1)& (0+255),b
  3158                           
  3159                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3160                           ; Switch size 1, requested type "simple"
  3161                           ; Number of cases is 1, Range of values is 0 to 0
  3162                           ; switch strategies available:
  3163                           ; Name         Instructions Cycles
  3164                           ; simple_byte            4     3 (average)
  3165                           ;	Chosen strategy is simple_byte
  3166  002C0A  51A4               	movf	(??_FSM+1)& (0+255),w,b
  3167  002C0C  0A00               	xorlw	0	; case 0
  3168  002C0E  B4D8               	btfsc	status,2,c
  3169  002C10  EF0C  F016         	goto	l4011
  3170  002C14  EF23  F016         	goto	l635
  3171  002C18                     l4011:
  3172                           
  3173                           ; BSR set to: 0
  3174                           ; Switch size 1, requested type "simple"
  3175                           ; Number of cases is 5, Range of values is 0 to 4
  3176                           ; switch strategies available:
  3177                           ; Name         Instructions Cycles
  3178                           ; simple_byte           16     9 (average)
  3179                           ;	Chosen strategy is simple_byte
  3180  002C18  51A3               	movf	??_FSM& (0+255),w,b
  3181  002C1A  0A00               	xorlw	0	; case 0
  3182  002C1C  B4D8               	btfsc	status,2,c
  3183  002C1E  EF34  F015         	goto	l3613
  3184  002C22  0A01               	xorlw	1	; case 1
  3185  002C24  B4D8               	btfsc	status,2,c
  3186  002C26  EF38  F015         	goto	l3615
  3187  002C2A  0A03               	xorlw	3	; case 2
  3188  002C2C  B4D8               	btfsc	status,2,c
  3189  002C2E  EF9B  F015         	goto	l3629
  3190  002C32  0A01               	xorlw	1	; case 3
  3191  002C34  B4D8               	btfsc	status,2,c
  3192  002C36  EFE9  F015         	goto	l3655
  3193  002C3A  0A07               	xorlw	7	; case 4
  3194  002C3C  B4D8               	btfsc	status,2,c
  3195  002C3E  EFFB  F015         	goto	l3665
  3196  002C42  EF23  F016         	goto	l635
  3197  002C46                     l635:
  3198  002C46  0012               	return		;funcret
  3199  002C48                     __end_of_FSM:
  3200                           	opt callstack 0
  3201                           
  3202 ;; *************** function _switch_button_state *****************
  3203 ;; Defined at:
  3204 ;;		line 35 in file "button.c"
  3205 ;; Parameters:    Size  Location     Type
  3206 ;;		None
  3207 ;; Auto vars:     Size  Location     Type
  3208 ;;		None
  3209 ;; Return value:  Size  Location     Type
  3210 ;;                  1    wreg      void 
  3211 ;; Registers used:
  3212 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3213 ;; Tracked objects:
  3214 ;;		On entry : 0/0
  3215 ;;		On exit  : 0/0
  3216 ;;		Unchanged: 0/0
  3217 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3218 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3219 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3220 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3221 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3222 ;;Total ram usage:        2 bytes
  3223 ;; Hardware stack levels used:    1
  3224 ;; Hardware stack levels required when called:    9
  3225 ;; This function calls:
  3226 ;;		_display_state
  3227 ;;		_remove_timer
  3228 ;; This function is called by:
  3229 ;;		_FSM
  3230 ;; This function uses a non-reentrant model
  3231 ;;
  3232                           
  3233                           	psect	text21
  3234  002C48                     __ptext21:
  3235                           	opt callstack 0
  3236  002C48                     _switch_button_state:
  3237                           	opt callstack 20
  3238  002C48                     
  3239                           ;button.c: 36:     switch(BUTTON_STATE){
  3240  002C48  EFF9  F016         	goto	l3425
  3241  002C4C                     l3337:
  3242                           
  3243                           ; BSR set to: 0
  3244                           ;button.c: 38:             if (button_A == 1) BUTTON_STATE = 2;
  3245  002C4C  05DE               	decf	_button_A& (0+255),w,b
  3246  002C4E  A4D8               	btfss	status,2,c
  3247  002C50  EF2C  F016         	goto	u1531
  3248  002C54  EF2E  F016         	goto	u1530
  3249  002C58                     u1531:
  3250  002C58  EF13  F017         	goto	l499
  3251  002C5C                     u1530:
  3252  002C5C                     
  3253                           ; BSR set to: 0
  3254  002C5C  0E02               	movlw	2
  3255  002C5E  6FE2               	movwf	_BUTTON_STATE& (0+255),b
  3256  002C60  EF13  F017         	goto	l499
  3257  002C64                     l3341:
  3258                           
  3259                           ; BSR set to: 0
  3260                           ;button.c: 41:             if (button_A == 1 && button_B == 1 && state_machine == IDLE) 
      +                          BUTTON_STATE = 3;
  3261  002C64  05DE               	decf	_button_A& (0+255),w,b
  3262  002C66  A4D8               	btfss	status,2,c
  3263  002C68  EF38  F016         	goto	u1541
  3264  002C6C  EF3A  F016         	goto	u1540
  3265  002C70                     u1541:
  3266  002C70  EF4C  F016         	goto	l3349
  3267  002C74                     u1540:
  3268  002C74                     
  3269                           ; BSR set to: 0
  3270  002C74  05DD               	decf	_button_B& (0+255),w,b
  3271  002C76  A4D8               	btfss	status,2,c
  3272  002C78  EF40  F016         	goto	u1551
  3273  002C7C  EF42  F016         	goto	u1550
  3274  002C80                     u1551:
  3275  002C80  EF4C  F016         	goto	l3349
  3276  002C84                     u1550:
  3277  002C84                     
  3278                           ; BSR set to: 0
  3279  002C84  5057               	movf	_state_machine^0,w,c
  3280  002C86  A4D8               	btfss	status,2,c
  3281  002C88  EF48  F016         	goto	u1561
  3282  002C8C  EF4A  F016         	goto	u1560
  3283  002C90                     u1561:
  3284  002C90  EF4C  F016         	goto	l3349
  3285  002C94                     u1560:
  3286  002C94                     
  3287                           ; BSR set to: 0
  3288  002C94  0E03               	movlw	3
  3289  002C96  6FE2               	movwf	_BUTTON_STATE& (0+255),b
  3290  002C98                     l3349:
  3291                           
  3292                           ; BSR set to: 0
  3293                           ;button.c: 42:             if (button_A == 2){
  3294  002C98  0E02               	movlw	2
  3295  002C9A  19DE               	xorwf	_button_A& (0+255),w,b
  3296  002C9C  A4D8               	btfss	status,2,c
  3297  002C9E  EF53  F016         	goto	u1571
  3298  002CA2  EF55  F016         	goto	u1570
  3299  002CA6                     u1571:
  3300  002CA6  EF13  F017         	goto	l499
  3301  002CAA                     u1570:
  3302  002CAA  EFBE  F016         	goto	l3405
  3303  002CAE                     l3353:
  3304                           
  3305                           ; BSR set to: 0
  3306                           ;button.c: 45:                         state_machine = HEAT_UP;
  3307  002CAE  0E01               	movlw	1
  3308  002CB0  6E57               	movwf	_state_machine^0,c
  3309  002CB2                     
  3310                           ; BSR set to: 0
  3311                           ;button.c: 46:                         display_state(state_machine);
  3312  002CB2  C057  F068         	movff	_state_machine,display_state@state
  3313  002CB6  6B69               	clrf	(display_state@state+1)& (0+255),b
  3314  002CB8  ECA7  F012         	call	_display_state	;wreg free
  3315  002CBC                     
  3316                           ;button.c: 47:                         LATDbits.LATD3 = 1;
  3317  002CBC  868C               	bsf	140,3,c	;volatile
  3318  002CBE                     
  3319                           ;button.c: 48:                         LATDbits.LATD4 = 1;
  3320  002CBE  888C               	bsf	140,4,c	;volatile
  3321  002CC0                     
  3322                           ;button.c: 49:                         temp_heat_up = 0;
  3323  002CC0  0E00               	movlw	0
  3324  002CC2  0100               	movlb	0	; () banked
  3325  002CC4  6FD6               	movwf	(_temp_heat_up+1)& (0+255),b
  3326  002CC6  0E00               	movlw	0
  3327  002CC8  6FD5               	movwf	_temp_heat_up& (0+255),b
  3328  002CCA                     
  3329                           ; BSR set to: 0
  3330                           ;button.c: 50:                         temp_humidity = 0;
  3331  002CCA  0E00               	movlw	0
  3332  002CCC  6E53               	movwf	(_temp_humidity+1)^0,c
  3333  002CCE  0E00               	movlw	0
  3334  002CD0  6E52               	movwf	_temp_humidity^0,c
  3335                           
  3336                           ;button.c: 51:                         break;
  3337  002CD2  EF7F  F016         	goto	l3375
  3338  002CD6                     l3365:
  3339                           
  3340                           ; BSR set to: 0
  3341                           ;button.c: 53:                         setting ++;
  3342  002CD6  2BDB               	incf	_setting& (0+255),f,b
  3343  002CD8                     
  3344                           ; BSR set to: 0
  3345                           ;button.c: 54:                         if (setting == 3){
  3346  002CD8  0E03               	movlw	3
  3347  002CDA  19DB               	xorwf	_setting& (0+255),w,b
  3348  002CDC  A4D8               	btfss	status,2,c
  3349  002CDE  EF73  F016         	goto	u1581
  3350  002CE2  EF75  F016         	goto	u1580
  3351  002CE6                     u1581:
  3352  002CE6  EF84  F016         	goto	l3379
  3353  002CEA                     u1580:
  3354  002CEA                     
  3355                           ; BSR set to: 0
  3356                           ;button.c: 55:                             state_machine = IDLE;
  3357  002CEA  0E00               	movlw	0
  3358  002CEC  6E57               	movwf	_state_machine^0,c
  3359  002CEE                     
  3360                           ; BSR set to: 0
  3361                           ;button.c: 56:                             display_state(state_machine);
  3362  002CEE  C057  F068         	movff	_state_machine,display_state@state
  3363  002CF2  6B69               	clrf	(display_state@state+1)& (0+255),b
  3364  002CF4  ECA7  F012         	call	_display_state	;wreg free
  3365  002CF8                     
  3366                           ;button.c: 57:                             setting = 0;
  3367  002CF8  0E00               	movlw	0
  3368  002CFA  0100               	movlb	0	; () banked
  3369  002CFC  6FDB               	movwf	_setting& (0+255),b
  3370  002CFE                     l3375:
  3371                           
  3372                           ;button.c: 58:                             BUTTON_STATE = 1;
  3373  002CFE  0E01               	movlw	1
  3374  002D00  0100               	movlb	0	; () banked
  3375  002D02  6FE2               	movwf	_BUTTON_STATE& (0+255),b
  3376  002D04  EF13  F017         	goto	l499
  3377  002D08                     l3379:
  3378                           
  3379                           ; BSR set to: 0
  3380                           ;button.c: 61:                         display_state(4);
  3381  002D08  0E00               	movlw	0
  3382  002D0A  6F69               	movwf	(display_state@state+1)& (0+255),b
  3383  002D0C  0E04               	movlw	4
  3384  002D0E  6F68               	movwf	display_state@state& (0+255),b
  3385  002D10  ECA7  F012         	call	_display_state	;wreg free
  3386                           
  3387                           ;button.c: 62:                         break;
  3388  002D14  EF7F  F016         	goto	l3375
  3389  002D18                     l3381:
  3390                           
  3391                           ; BSR set to: 0
  3392                           ;button.c: 64:                         time_checkout_HEATER = 0;
  3393  002D18  0E00               	movlw	0
  3394  002D1A  6FD4               	movwf	(_time_checkout_HEATER+1)& (0+255),b
  3395  002D1C  0E00               	movlw	0
  3396  002D1E  6FD3               	movwf	_time_checkout_HEATER& (0+255),b
  3397                           
  3398                           ;button.c: 65:                         time_checkout_HEATPUMB = 0;
  3399  002D20  0E00               	movlw	0
  3400  002D22  6FD2               	movwf	(_time_checkout_HEATPUMB+1)& (0+255),b
  3401  002D24  0E00               	movlw	0
  3402  002D26  6FD1               	movwf	_time_checkout_HEATPUMB& (0+255),b
  3403  002D28                     
  3404                           ; BSR set to: 0
  3405                           ;button.c: 66:                         if (state_machine != HEAT_UP && state_machine != 
      +                          SETTING)remove_timer(3);
  3406  002D28  0457               	decf	_state_machine^0,w,c
  3407  002D2A  B4D8               	btfsc	status,2,c
  3408  002D2C  EF9A  F016         	goto	u1591
  3409  002D30  EF9C  F016         	goto	u1590
  3410  002D34                     u1591:
  3411  002D34  EFAF  F016         	goto	l3389
  3412  002D38                     u1590:
  3413  002D38                     
  3414                           ; BSR set to: 0
  3415  002D38  0E04               	movlw	4
  3416  002D3A  1857               	xorwf	_state_machine^0,w,c
  3417  002D3C  B4D8               	btfsc	status,2,c
  3418  002D3E  EFA3  F016         	goto	u1601
  3419  002D42  EFA5  F016         	goto	u1600
  3420  002D46                     u1601:
  3421  002D46  EFAF  F016         	goto	l3389
  3422  002D4A                     u1600:
  3423  002D4A                     
  3424                           ; BSR set to: 0
  3425  002D4A  0E03               	movlw	3
  3426  002D4C  6F66               	movwf	remove_timer@id& (0+255),b
  3427  002D4E  0E00               	movlw	0
  3428  002D50  6F67               	movwf	(remove_timer@id+1)& (0+255),b
  3429  002D52  0E00               	movlw	0
  3430  002D54  6F68               	movwf	(remove_timer@id+2)& (0+255),b
  3431  002D56  0E00               	movlw	0
  3432  002D58  6F69               	movwf	(remove_timer@id+3)& (0+255),b
  3433  002D5A  EC71  F010         	call	_remove_timer	;wreg free
  3434  002D5E                     l3389:
  3435                           
  3436                           ;button.c: 67:                         LATDbits.LATD4 = 0;
  3437  002D5E  988C               	bcf	140,4,c	;volatile
  3438  002D60                     
  3439                           ;button.c: 68:                         LATDbits.LATD3 = 0;
  3440  002D60  968C               	bcf	140,3,c	;volatile
  3441  002D62                     
  3442                           ;button.c: 69:                         LATDbits.LATD7 = 0;
  3443  002D62  9E8C               	bcf	140,7,c	;volatile
  3444  002D64                     
  3445                           ;button.c: 70:                         LATDbits.LATD6 = 0;
  3446  002D64  9C8C               	bcf	140,6,c	;volatile
  3447  002D66                     
  3448                           ;button.c: 71:                         LATDbits.LATD0 = 0;
  3449  002D66  908C               	bcf	140,0,c	;volatile
  3450  002D68                     
  3451                           ;button.c: 72:                         state_machine = IDLE;
  3452  002D68  0E00               	movlw	0
  3453  002D6A  6E57               	movwf	_state_machine^0,c
  3454  002D6C                     
  3455                           ;button.c: 73:                         display_state(state_machine);
  3456  002D6C  C057  F068         	movff	_state_machine,display_state@state
  3457  002D70  0100               	movlb	0	; () banked
  3458  002D72  6B69               	clrf	(display_state@state+1)& (0+255),b
  3459  002D74  ECA7  F012         	call	_display_state	;wreg free
  3460                           
  3461                           ;button.c: 74:                         break;
  3462  002D78  EF7F  F016         	goto	l3375
  3463  002D7C                     l3405:
  3464                           
  3465                           ; BSR set to: 0
  3466  002D7C  5057               	movf	_state_machine^0,w,c
  3467  002D7E  6F76               	movwf	??_switch_button_state& (0+255),b
  3468  002D80  6B77               	clrf	(??_switch_button_state+1)& (0+255),b
  3469                           
  3470                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3471                           ; Switch size 1, requested type "simple"
  3472                           ; Number of cases is 1, Range of values is 0 to 0
  3473                           ; switch strategies available:
  3474                           ; Name         Instructions Cycles
  3475                           ; simple_byte            4     3 (average)
  3476                           ;	Chosen strategy is simple_byte
  3477  002D82  5177               	movf	(??_switch_button_state+1)& (0+255),w,b
  3478  002D84  0A00               	xorlw	0	; case 0
  3479  002D86  B4D8               	btfsc	status,2,c
  3480  002D88  EFC8  F016         	goto	l4013
  3481  002D8C  EF8C  F016         	goto	l3381
  3482  002D90                     l4013:
  3483                           
  3484                           ; BSR set to: 0
  3485                           ; Switch size 1, requested type "simple"
  3486                           ; Number of cases is 2, Range of values is 0 to 4
  3487                           ; switch strategies available:
  3488                           ; Name         Instructions Cycles
  3489                           ; simple_byte            7     4 (average)
  3490                           ;	Chosen strategy is simple_byte
  3491  002D90  5176               	movf	??_switch_button_state& (0+255),w,b
  3492  002D92  0A00               	xorlw	0	; case 0
  3493  002D94  B4D8               	btfsc	status,2,c
  3494  002D96  EF57  F016         	goto	l3353
  3495  002D9A  0A04               	xorlw	4	; case 4
  3496  002D9C  B4D8               	btfsc	status,2,c
  3497  002D9E  EF6B  F016         	goto	l3365
  3498  002DA2  EF8C  F016         	goto	l3381
  3499  002DA6                     l3409:
  3500                           
  3501                           ; BSR set to: 0
  3502                           ;button.c: 80:             if (button_A == 2 && button_B == 2){
  3503  002DA6  0E02               	movlw	2
  3504  002DA8  19DE               	xorwf	_button_A& (0+255),w,b
  3505  002DAA  A4D8               	btfss	status,2,c
  3506  002DAC  EFDA  F016         	goto	u1611
  3507  002DB0  EFDC  F016         	goto	u1610
  3508  002DB4                     u1611:
  3509  002DB4  EFEF  F016         	goto	l3419
  3510  002DB8                     u1610:
  3511  002DB8                     
  3512                           ; BSR set to: 0
  3513  002DB8  0E02               	movlw	2
  3514  002DBA  19DD               	xorwf	_button_B& (0+255),w,b
  3515  002DBC  A4D8               	btfss	status,2,c
  3516  002DBE  EFE3  F016         	goto	u1621
  3517  002DC2  EFE5  F016         	goto	u1620
  3518  002DC6                     u1621:
  3519  002DC6  EFEF  F016         	goto	l3419
  3520  002DCA                     u1620:
  3521  002DCA                     
  3522                           ; BSR set to: 0
  3523                           ;button.c: 81:                 state_machine = SETTING;
  3524  002DCA  0E04               	movlw	4
  3525  002DCC  6E57               	movwf	_state_machine^0,c
  3526  002DCE                     
  3527                           ; BSR set to: 0
  3528                           ;button.c: 82:                 display_state(state_machine);
  3529  002DCE  C057  F068         	movff	_state_machine,display_state@state
  3530  002DD2  6B69               	clrf	(display_state@state+1)& (0+255),b
  3531  002DD4  ECA7  F012         	call	_display_state	;wreg free
  3532  002DD8                     
  3533                           ;button.c: 83:                 BUTTON_STATE = 1;
  3534  002DD8  0E01               	movlw	1
  3535  002DDA  0100               	movlb	0	; () banked
  3536  002DDC  6FE2               	movwf	_BUTTON_STATE& (0+255),b
  3537  002DDE                     l3419:
  3538                           
  3539                           ; BSR set to: 0
  3540                           ;button.c: 85:             if (state_machine != IDLE) BUTTON_STATE = 1;
  3541  002DDE  5057               	movf	_state_machine^0,w,c
  3542  002DE0  B4D8               	btfsc	status,2,c
  3543  002DE2  EFF5  F016         	goto	u1631
  3544  002DE6  EFF7  F016         	goto	u1630
  3545  002DEA                     u1631:
  3546  002DEA  EF13  F017         	goto	l499
  3547  002DEE                     u1630:
  3548  002DEE  EF7F  F016         	goto	l3375
  3549  002DF2                     l3425:
  3550  002DF2  0100               	movlb	0	; () banked
  3551  002DF4  51E2               	movf	_BUTTON_STATE& (0+255),w,b
  3552  002DF6  6F76               	movwf	??_switch_button_state& (0+255),b
  3553  002DF8  6B77               	clrf	(??_switch_button_state+1)& (0+255),b
  3554                           
  3555                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3556                           ; Switch size 1, requested type "simple"
  3557                           ; Number of cases is 1, Range of values is 0 to 0
  3558                           ; switch strategies available:
  3559                           ; Name         Instructions Cycles
  3560                           ; simple_byte            4     3 (average)
  3561                           ;	Chosen strategy is simple_byte
  3562  002DFA  5177               	movf	(??_switch_button_state+1)& (0+255),w,b
  3563  002DFC  0A00               	xorlw	0	; case 0
  3564  002DFE  B4D8               	btfsc	status,2,c
  3565  002E00  EF04  F017         	goto	l4015
  3566  002E04  EF13  F017         	goto	l499
  3567  002E08                     l4015:
  3568                           
  3569                           ; BSR set to: 0
  3570                           ; Switch size 1, requested type "simple"
  3571                           ; Number of cases is 3, Range of values is 1 to 3
  3572                           ; switch strategies available:
  3573                           ; Name         Instructions Cycles
  3574                           ; simple_byte           10     6 (average)
  3575                           ;	Chosen strategy is simple_byte
  3576  002E08  5176               	movf	??_switch_button_state& (0+255),w,b
  3577  002E0A  0A01               	xorlw	1	; case 1
  3578  002E0C  B4D8               	btfsc	status,2,c
  3579  002E0E  EF26  F016         	goto	l3337
  3580  002E12  0A03               	xorlw	3	; case 2
  3581  002E14  B4D8               	btfsc	status,2,c
  3582  002E16  EF32  F016         	goto	l3341
  3583  002E1A  0A01               	xorlw	1	; case 3
  3584  002E1C  B4D8               	btfsc	status,2,c
  3585  002E1E  EFD3  F016         	goto	l3409
  3586  002E22  EF13  F017         	goto	l499
  3587  002E26                     l499:
  3588                           
  3589                           ; BSR set to: 0
  3590  002E26  0012               	return		;funcret
  3591  002E28                     __end_of_switch_button_state:
  3592                           	opt callstack 0
  3593                           
  3594 ;; *************** function _remove_timer *****************
  3595 ;; Defined at:
  3596 ;;		line 102 in file "driver.c"
  3597 ;; Parameters:    Size  Location     Type
  3598 ;;  id              4    6[BANK0 ] unsigned long 
  3599 ;; Auto vars:     Size  Location     Type
  3600 ;;  temp_index      2   20[BANK0 ] int 
  3601 ;; Return value:  Size  Location     Type
  3602 ;;                  2    6[BANK0 ] int 
  3603 ;; Registers used:
  3604 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3605 ;; Tracked objects:
  3606 ;;		On entry : 0/0
  3607 ;;		On exit  : 0/0
  3608 ;;		Unchanged: 0/0
  3609 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3610 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3611 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3612 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3613 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3614 ;;Total ram usage:       16 bytes
  3615 ;; Hardware stack levels used:    1
  3616 ;; Hardware stack levels required when called:    5
  3617 ;; This function calls:
  3618 ;;		___wmul
  3619 ;; This function is called by:
  3620 ;;		_switch_button_state
  3621 ;; This function uses a non-reentrant model
  3622 ;;
  3623                           
  3624                           	psect	text22
  3625  0020E2                     __ptext22:
  3626                           	opt callstack 0
  3627  0020E2                     _remove_timer:
  3628                           	opt callstack 23
  3629  0020E2                     
  3630                           ;driver.c: 103:     if (id == HEAD_QUEUE){
  3631  0020E2  C0C9  F06A         	movff	_HEAD_QUEUE,??_remove_timer
  3632  0020E6  C0CA  F06B         	movff	_HEAD_QUEUE+1,??_remove_timer+1
  3633  0020EA  0E00               	movlw	0
  3634  0020EC  0100               	movlb	0	; () banked
  3635  0020EE  BF6B               	btfsc	(??_remove_timer+1)& (0+255),7,b
  3636  0020F0  0EFF               	movlw	255
  3637  0020F2  6F6C               	movwf	(??_remove_timer+2)& (0+255),b
  3638  0020F4  6F6D               	movwf	(??_remove_timer+3)& (0+255),b
  3639  0020F6  5166               	movf	remove_timer@id& (0+255),w,b
  3640  0020F8  196A               	xorwf	??_remove_timer& (0+255),w,b
  3641  0020FA  E10D               	bnz	u1211
  3642  0020FC  5167               	movf	(remove_timer@id+1)& (0+255),w,b
  3643  0020FE  196B               	xorwf	(??_remove_timer+1)& (0+255),w,b
  3644  002100  E10A               	bnz	u1211
  3645  002102  5168               	movf	(remove_timer@id+2)& (0+255),w,b
  3646  002104  196C               	xorwf	(??_remove_timer+2)& (0+255),w,b
  3647  002106  E107               	bnz	u1211
  3648  002108  5169               	movf	(remove_timer@id+3)& (0+255),w,b
  3649  00210A  196D               	xorwf	(??_remove_timer+3)& (0+255),w,b
  3650  00210C  A4D8               	btfss	status,2,c
  3651  00210E  EF8B  F010         	goto	u1211
  3652  002112  EF8D  F010         	goto	u1210
  3653  002116                     u1211:
  3654  002116  EF69  F011         	goto	l365
  3655  00211A                     u1210:
  3656  00211A                     
  3657                           ; BSR set to: 0
  3658                           ;driver.c: 104:         tasks[HEAD_QUEUE].callback = ((void*)0);
  3659  00211A  C0C9  F060         	movff	_HEAD_QUEUE,___wmul@multiplier
  3660  00211E  C0CA  F061         	movff	_HEAD_QUEUE+1,___wmul@multiplier+1
  3661  002122  0E00               	movlw	0
  3662  002124  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  3663  002126  0E17               	movlw	23
  3664  002128  6F62               	movwf	___wmul@multiplicand& (0+255),b
  3665  00212A  ECCD  F01D         	call	___wmul	;wreg free
  3666  00212E  0E00               	movlw	low _tasks
  3667  002130  0100               	movlb	0	; () banked
  3668  002132  2560               	addwf	?___wmul& (0+255),w,b
  3669  002134  6ED9               	movwf	fsr2l,c
  3670  002136  0E01               	movlw	high _tasks
  3671  002138  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  3672  00213A  6EDA               	movwf	fsr2h,c
  3673  00213C  0E00               	movlw	0
  3674  00213E  6EDE               	movwf	postinc2,c
  3675  002140  0E00               	movlw	0
  3676  002142  6EDE               	movwf	postinc2,c
  3677  002144  0E00               	movlw	0
  3678  002146  6EDE               	movwf	postinc2,c
  3679                           
  3680                           ;driver.c: 105:         tasks[HEAD_QUEUE].period = 0;
  3681  002148  C0C9  F060         	movff	_HEAD_QUEUE,___wmul@multiplier
  3682  00214C  C0CA  F061         	movff	_HEAD_QUEUE+1,___wmul@multiplier+1
  3683  002150  0E00               	movlw	0
  3684  002152  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  3685  002154  0E17               	movlw	23
  3686  002156  6F62               	movwf	___wmul@multiplicand& (0+255),b
  3687  002158  ECCD  F01D         	call	___wmul	;wreg free
  3688  00215C  0E0B               	movlw	low (_tasks+11)
  3689  00215E  0100               	movlb	0	; () banked
  3690  002160  2560               	addwf	?___wmul& (0+255),w,b
  3691  002162  6ED9               	movwf	fsr2l,c
  3692  002164  0E01               	movlw	high (_tasks+11)
  3693  002166  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  3694  002168  6EDA               	movwf	fsr2h,c
  3695  00216A  0E07               	movlw	7
  3696  00216C                     u1221:
  3697  00216C  6ADE               	clrf	postinc2,c
  3698  00216E  06E8               	decf	wreg,f,c
  3699  002170  E2FD               	bc	u1221
  3700                           
  3701                           ;driver.c: 106:         tasks[tasks[HEAD_QUEUE].next].delay += tasks[HEAD_QUEUE].delay;
  3702  002172  C0C9  F060         	movff	_HEAD_QUEUE,___wmul@multiplier
  3703  002176  C0CA  F061         	movff	_HEAD_QUEUE+1,___wmul@multiplier+1
  3704  00217A  0E00               	movlw	0
  3705  00217C  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  3706  00217E  0E17               	movlw	23
  3707  002180  6F62               	movwf	___wmul@multiplicand& (0+255),b
  3708  002182  ECCD  F01D         	call	___wmul	;wreg free
  3709  002186  0E15               	movlw	low (_tasks+21)
  3710  002188  0100               	movlb	0	; () banked
  3711  00218A  2560               	addwf	?___wmul& (0+255),w,b
  3712  00218C  6ED9               	movwf	fsr2l,c
  3713  00218E  0E01               	movlw	high (_tasks+21)
  3714  002190  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  3715  002192  6EDA               	movwf	fsr2h,c
  3716  002194  CFDE F072          	movff	postinc2,_remove_timer$2312
  3717  002198  CFDD F073          	movff	postdec2,_remove_timer$2312+1
  3718                           
  3719                           ;driver.c: 106:         tasks[tasks[HEAD_QUEUE].next].delay += tasks[HEAD_QUEUE].delay;
  3720  00219C  C0C9  F060         	movff	_HEAD_QUEUE,___wmul@multiplier
  3721  0021A0  C0CA  F061         	movff	_HEAD_QUEUE+1,___wmul@multiplier+1
  3722  0021A4  0E00               	movlw	0
  3723  0021A6  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  3724  0021A8  0E17               	movlw	23
  3725  0021AA  6F62               	movwf	___wmul@multiplicand& (0+255),b
  3726  0021AC  ECCD  F01D         	call	___wmul	;wreg free
  3727  0021B0  0E03               	movlw	low (_tasks+3)
  3728  0021B2  0100               	movlb	0	; () banked
  3729  0021B4  2560               	addwf	?___wmul& (0+255),w,b
  3730  0021B6  6ED9               	movwf	fsr2l,c
  3731  0021B8  0E01               	movlw	high (_tasks+3)
  3732  0021BA  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  3733  0021BC  6EDA               	movwf	fsr2h,c
  3734  0021BE  CFDE F06A          	movff	postinc2,??_remove_timer
  3735  0021C2  CFDE F06B          	movff	postinc2,??_remove_timer+1
  3736  0021C6  CFDE F06C          	movff	postinc2,??_remove_timer+2
  3737  0021CA  CFDE F06D          	movff	postinc2,??_remove_timer+3
  3738  0021CE  CFDE F06E          	movff	postinc2,??_remove_timer+4
  3739  0021D2  CFDE F06F          	movff	postinc2,??_remove_timer+5
  3740  0021D6  CFDE F070          	movff	postinc2,??_remove_timer+6
  3741  0021DA  CFDE F071          	movff	postinc2,??_remove_timer+7
  3742  0021DE  C072  F060         	movff	_remove_timer$2312,___wmul@multiplier
  3743  0021E2  C073  F061         	movff	_remove_timer$2312+1,___wmul@multiplier+1
  3744  0021E6  0E00               	movlw	0
  3745  0021E8  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  3746  0021EA  0E17               	movlw	23
  3747  0021EC  6F62               	movwf	___wmul@multiplicand& (0+255),b
  3748  0021EE  ECCD  F01D         	call	___wmul	;wreg free
  3749  0021F2  0E03               	movlw	low (_tasks+3)
  3750  0021F4  0100               	movlb	0	; () banked
  3751  0021F6  2560               	addwf	?___wmul& (0+255),w,b
  3752  0021F8  6ED9               	movwf	fsr2l,c
  3753  0021FA  0E01               	movlw	high (_tasks+3)
  3754  0021FC  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  3755  0021FE  6EDA               	movwf	fsr2h,c
  3756  002200  516A               	movf	??_remove_timer& (0+255),w,b
  3757  002202  26DE               	addwf	postinc2,f,c
  3758  002204  516B               	movf	(??_remove_timer+1)& (0+255),w,b
  3759  002206  22DE               	addwfc	postinc2,f,c
  3760  002208  516C               	movf	(??_remove_timer+2)& (0+255),w,b
  3761  00220A  22DE               	addwfc	postinc2,f,c
  3762  00220C  516D               	movf	(??_remove_timer+3)& (0+255),w,b
  3763  00220E  22DE               	addwfc	postinc2,f,c
  3764  002210  516E               	movf	(??_remove_timer+4)& (0+255),w,b
  3765  002212  22DE               	addwfc	postinc2,f,c
  3766  002214  516F               	movf	(??_remove_timer+5)& (0+255),w,b
  3767  002216  22DE               	addwfc	postinc2,f,c
  3768  002218  5170               	movf	(??_remove_timer+6)& (0+255),w,b
  3769  00221A  22DE               	addwfc	postinc2,f,c
  3770  00221C  5171               	movf	(??_remove_timer+7)& (0+255),w,b
  3771  00221E  22DE               	addwfc	postinc2,f,c
  3772                           
  3773                           ;driver.c: 107:         tasks[HEAD_QUEUE].delay = 0;
  3774  002220  C0C9  F060         	movff	_HEAD_QUEUE,___wmul@multiplier
  3775  002224  C0CA  F061         	movff	_HEAD_QUEUE+1,___wmul@multiplier+1
  3776  002228  0E00               	movlw	0
  3777  00222A  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  3778  00222C  0E17               	movlw	23
  3779  00222E  6F62               	movwf	___wmul@multiplicand& (0+255),b
  3780  002230  ECCD  F01D         	call	___wmul	;wreg free
  3781  002234  0E03               	movlw	low (_tasks+3)
  3782  002236  0100               	movlb	0	; () banked
  3783  002238  2560               	addwf	?___wmul& (0+255),w,b
  3784  00223A  6ED9               	movwf	fsr2l,c
  3785  00223C  0E01               	movlw	high (_tasks+3)
  3786  00223E  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  3787  002240  6EDA               	movwf	fsr2h,c
  3788  002242  0E07               	movlw	7
  3789  002244                     u1231:
  3790  002244  6ADE               	clrf	postinc2,c
  3791  002246  06E8               	decf	wreg,f,c
  3792  002248  E2FD               	bc	u1231
  3793                           
  3794                           ;driver.c: 108:         tasks[HEAD_QUEUE].data = ((void*)0);
  3795  00224A  C0C9  F060         	movff	_HEAD_QUEUE,___wmul@multiplier
  3796  00224E  C0CA  F061         	movff	_HEAD_QUEUE+1,___wmul@multiplier+1
  3797  002252  0E00               	movlw	0
  3798  002254  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  3799  002256  0E17               	movlw	23
  3800  002258  6F62               	movwf	___wmul@multiplicand& (0+255),b
  3801  00225A  ECCD  F01D         	call	___wmul	;wreg free
  3802  00225E  0E13               	movlw	low (_tasks+19)
  3803  002260  0100               	movlb	0	; () banked
  3804  002262  2560               	addwf	?___wmul& (0+255),w,b
  3805  002264  6ED9               	movwf	fsr2l,c
  3806  002266  0E01               	movlw	high (_tasks+19)
  3807  002268  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  3808  00226A  6EDA               	movwf	fsr2h,c
  3809  00226C  0E00               	movlw	0
  3810  00226E  6EDE               	movwf	postinc2,c
  3811  002270  0E00               	movlw	0
  3812  002272  6EDD               	movwf	postdec2,c
  3813                           
  3814                           ;driver.c: 109:         HEAD_QUEUE = tasks[HEAD_QUEUE].next;
  3815  002274  C0C9  F060         	movff	_HEAD_QUEUE,___wmul@multiplier
  3816  002278  C0CA  F061         	movff	_HEAD_QUEUE+1,___wmul@multiplier+1
  3817  00227C  0E00               	movlw	0
  3818  00227E  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  3819  002280  0E17               	movlw	23
  3820  002282  6F62               	movwf	___wmul@multiplicand& (0+255),b
  3821  002284  ECCD  F01D         	call	___wmul	;wreg free
  3822  002288  0E15               	movlw	low (_tasks+21)
  3823  00228A  0100               	movlb	0	; () banked
  3824  00228C  2560               	addwf	?___wmul& (0+255),w,b
  3825  00228E  6ED9               	movwf	fsr2l,c
  3826  002290  0E01               	movlw	high (_tasks+21)
  3827  002292  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  3828  002294  6EDA               	movwf	fsr2h,c
  3829  002296  CFDE F0C9          	movff	postinc2,_HEAD_QUEUE
  3830  00229A  CFDD F0CA          	movff	postdec2,_HEAD_QUEUE+1
  3831                           
  3832                           ;driver.c: 110:         tasks[HEAD_QUEUE].next = -1;
  3833  00229E  C0C9  F060         	movff	_HEAD_QUEUE,___wmul@multiplier
  3834  0022A2  C0CA  F061         	movff	_HEAD_QUEUE+1,___wmul@multiplier+1
  3835  0022A6  0E00               	movlw	0
  3836  0022A8  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  3837  0022AA  0E17               	movlw	23
  3838  0022AC  6F62               	movwf	___wmul@multiplicand& (0+255),b
  3839  0022AE  ECCD  F01D         	call	___wmul	;wreg free
  3840  0022B2  0E15               	movlw	low (_tasks+21)
  3841  0022B4  0100               	movlb	0	; () banked
  3842  0022B6  2560               	addwf	?___wmul& (0+255),w,b
  3843  0022B8  6ED9               	movwf	fsr2l,c
  3844  0022BA  0E01               	movlw	high (_tasks+21)
  3845  0022BC  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  3846  0022BE  6EDA               	movwf	fsr2h,c
  3847  0022C0  0EFF               	movlw	255
  3848  0022C2  6EDE               	movwf	postinc2,c
  3849  0022C4  0EFF               	movlw	255
  3850  0022C6  6EDD               	movwf	postdec2,c
  3851  0022C8                     l2961:
  3852                           
  3853                           ; BSR set to: 0
  3854                           ;driver.c: 111:         NUMBER_EXIST_TASKS --;
  3855  0022C8  07CB               	decf	_NUMBER_EXIST_TASKS& (0+255),f,b
  3856  0022CA  A0D8               	btfss	status,0,c
  3857  0022CC  07CC               	decf	(_NUMBER_EXIST_TASKS+1)& (0+255),f,b
  3858  0022CE  EFA6  F012         	goto	l366
  3859  0022D2                     l365:
  3860                           
  3861                           ; BSR set to: 0
  3862                           ;driver.c: 114:     int temp_index = HEAD_QUEUE;
  3863  0022D2  C0C9  F074         	movff	_HEAD_QUEUE,remove_timer@temp_index
  3864  0022D6  C0CA  F075         	movff	_HEAD_QUEUE+1,remove_timer@temp_index+1
  3865  0022DA                     l2965:
  3866                           
  3867                           ; BSR set to: 0
  3868                           ;driver.c: 116:         if (tasks[temp_index].next == id){
  3869  0022DA  C074  F060         	movff	remove_timer@temp_index,___wmul@multiplier
  3870  0022DE  C075  F061         	movff	remove_timer@temp_index+1,___wmul@multiplier+1
  3871  0022E2  0E00               	movlw	0
  3872  0022E4  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  3873  0022E6  0E17               	movlw	23
  3874  0022E8  6F62               	movwf	___wmul@multiplicand& (0+255),b
  3875  0022EA  ECCD  F01D         	call	___wmul	;wreg free
  3876  0022EE  0E15               	movlw	low (_tasks+21)
  3877  0022F0  0100               	movlb	0	; () banked
  3878  0022F2  2560               	addwf	?___wmul& (0+255),w,b
  3879  0022F4  6ED9               	movwf	fsr2l,c
  3880  0022F6  0E01               	movlw	high (_tasks+21)
  3881  0022F8  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  3882  0022FA  6EDA               	movwf	fsr2h,c
  3883  0022FC  CFDE F06A          	movff	postinc2,??_remove_timer
  3884  002300  CFDD F06B          	movff	postdec2,??_remove_timer+1
  3885  002304  C06A  F06C         	movff	??_remove_timer,??_remove_timer+2
  3886  002308  C06B  F06D         	movff	??_remove_timer+1,??_remove_timer+3
  3887  00230C  0E00               	movlw	0
  3888  00230E  BF6D               	btfsc	(??_remove_timer+3)& (0+255),7,b
  3889  002310  0EFF               	movlw	255
  3890  002312  6F6E               	movwf	(??_remove_timer+4)& (0+255),b
  3891  002314  6F6F               	movwf	(??_remove_timer+5)& (0+255),b
  3892  002316  5166               	movf	remove_timer@id& (0+255),w,b
  3893  002318  196C               	xorwf	(??_remove_timer+2)& (0+255),w,b
  3894  00231A  E10D               	bnz	u1241
  3895  00231C  5167               	movf	(remove_timer@id+1)& (0+255),w,b
  3896  00231E  196D               	xorwf	(??_remove_timer+3)& (0+255),w,b
  3897  002320  E10A               	bnz	u1241
  3898  002322  5168               	movf	(remove_timer@id+2)& (0+255),w,b
  3899  002324  196E               	xorwf	(??_remove_timer+4)& (0+255),w,b
  3900  002326  E107               	bnz	u1241
  3901  002328  5169               	movf	(remove_timer@id+3)& (0+255),w,b
  3902  00232A  196F               	xorwf	(??_remove_timer+5)& (0+255),w,b
  3903  00232C  A4D8               	btfss	status,2,c
  3904  00232E  EF9B  F011         	goto	u1241
  3905  002332  EF9D  F011         	goto	u1240
  3906  002336                     u1241:
  3907  002336  EF87  F012         	goto	l2977
  3908  00233A                     u1240:
  3909  00233A                     
  3910                           ; BSR set to: 0
  3911                           ;driver.c: 117:             tasks[id].callback = ((void*)0);
  3912  00233A  C066  F060         	movff	remove_timer@id,___wmul@multiplier
  3913  00233E  C067  F061         	movff	remove_timer@id+1,___wmul@multiplier+1
  3914  002342  0E00               	movlw	0
  3915  002344  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  3916  002346  0E17               	movlw	23
  3917  002348  6F62               	movwf	___wmul@multiplicand& (0+255),b
  3918  00234A  ECCD  F01D         	call	___wmul	;wreg free
  3919  00234E  0E00               	movlw	low _tasks
  3920  002350  0100               	movlb	0	; () banked
  3921  002352  2560               	addwf	?___wmul& (0+255),w,b
  3922  002354  6ED9               	movwf	fsr2l,c
  3923  002356  0E01               	movlw	high _tasks
  3924  002358  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  3925  00235A  6EDA               	movwf	fsr2h,c
  3926  00235C  0E00               	movlw	0
  3927  00235E  6EDE               	movwf	postinc2,c
  3928  002360  0E00               	movlw	0
  3929  002362  6EDE               	movwf	postinc2,c
  3930  002364  0E00               	movlw	0
  3931  002366  6EDE               	movwf	postinc2,c
  3932                           
  3933                           ;driver.c: 118:             tasks[id].period = 0;
  3934  002368  C066  F060         	movff	remove_timer@id,___wmul@multiplier
  3935  00236C  C067  F061         	movff	remove_timer@id+1,___wmul@multiplier+1
  3936  002370  0E00               	movlw	0
  3937  002372  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  3938  002374  0E17               	movlw	23
  3939  002376  6F62               	movwf	___wmul@multiplicand& (0+255),b
  3940  002378  ECCD  F01D         	call	___wmul	;wreg free
  3941  00237C  0E0B               	movlw	low (_tasks+11)
  3942  00237E  0100               	movlb	0	; () banked
  3943  002380  2560               	addwf	?___wmul& (0+255),w,b
  3944  002382  6ED9               	movwf	fsr2l,c
  3945  002384  0E01               	movlw	high (_tasks+11)
  3946  002386  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  3947  002388  6EDA               	movwf	fsr2h,c
  3948  00238A  0E07               	movlw	7
  3949  00238C                     u1251:
  3950  00238C  6ADE               	clrf	postinc2,c
  3951  00238E  06E8               	decf	wreg,f,c
  3952  002390  E2FD               	bc	u1251
  3953                           
  3954                           ;driver.c: 119:             tasks[tasks[id].next].delay += tasks[id].delay;
  3955  002392  C066  F060         	movff	remove_timer@id,___wmul@multiplier
  3956  002396  C067  F061         	movff	remove_timer@id+1,___wmul@multiplier+1
  3957  00239A  0E00               	movlw	0
  3958  00239C  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  3959  00239E  0E17               	movlw	23
  3960  0023A0  6F62               	movwf	___wmul@multiplicand& (0+255),b
  3961  0023A2  ECCD  F01D         	call	___wmul	;wreg free
  3962  0023A6  0E15               	movlw	low (_tasks+21)
  3963  0023A8  0100               	movlb	0	; () banked
  3964  0023AA  2560               	addwf	?___wmul& (0+255),w,b
  3965  0023AC  6ED9               	movwf	fsr2l,c
  3966  0023AE  0E01               	movlw	high (_tasks+21)
  3967  0023B0  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  3968  0023B2  6EDA               	movwf	fsr2h,c
  3969  0023B4  CFDE F072          	movff	postinc2,_remove_timer$2312
  3970  0023B8  CFDD F073          	movff	postdec2,_remove_timer$2312+1
  3971                           
  3972                           ;driver.c: 119:             tasks[tasks[id].next].delay += tasks[id].delay;
  3973  0023BC  C066  F060         	movff	remove_timer@id,___wmul@multiplier
  3974  0023C0  C067  F061         	movff	remove_timer@id+1,___wmul@multiplier+1
  3975  0023C4  0E00               	movlw	0
  3976  0023C6  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  3977  0023C8  0E17               	movlw	23
  3978  0023CA  6F62               	movwf	___wmul@multiplicand& (0+255),b
  3979  0023CC  ECCD  F01D         	call	___wmul	;wreg free
  3980  0023D0  0E03               	movlw	low (_tasks+3)
  3981  0023D2  0100               	movlb	0	; () banked
  3982  0023D4  2560               	addwf	?___wmul& (0+255),w,b
  3983  0023D6  6ED9               	movwf	fsr2l,c
  3984  0023D8  0E01               	movlw	high (_tasks+3)
  3985  0023DA  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  3986  0023DC  6EDA               	movwf	fsr2h,c
  3987  0023DE  CFDE F06A          	movff	postinc2,??_remove_timer
  3988  0023E2  CFDE F06B          	movff	postinc2,??_remove_timer+1
  3989  0023E6  CFDE F06C          	movff	postinc2,??_remove_timer+2
  3990  0023EA  CFDE F06D          	movff	postinc2,??_remove_timer+3
  3991  0023EE  CFDE F06E          	movff	postinc2,??_remove_timer+4
  3992  0023F2  CFDE F06F          	movff	postinc2,??_remove_timer+5
  3993  0023F6  CFDE F070          	movff	postinc2,??_remove_timer+6
  3994  0023FA  CFDE F071          	movff	postinc2,??_remove_timer+7
  3995  0023FE  C072  F060         	movff	_remove_timer$2312,___wmul@multiplier
  3996  002402  C073  F061         	movff	_remove_timer$2312+1,___wmul@multiplier+1
  3997  002406  0E00               	movlw	0
  3998  002408  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  3999  00240A  0E17               	movlw	23
  4000  00240C  6F62               	movwf	___wmul@multiplicand& (0+255),b
  4001  00240E  ECCD  F01D         	call	___wmul	;wreg free
  4002  002412  0E03               	movlw	low (_tasks+3)
  4003  002414  0100               	movlb	0	; () banked
  4004  002416  2560               	addwf	?___wmul& (0+255),w,b
  4005  002418  6ED9               	movwf	fsr2l,c
  4006  00241A  0E01               	movlw	high (_tasks+3)
  4007  00241C  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  4008  00241E  6EDA               	movwf	fsr2h,c
  4009  002420  516A               	movf	??_remove_timer& (0+255),w,b
  4010  002422  26DE               	addwf	postinc2,f,c
  4011  002424  516B               	movf	(??_remove_timer+1)& (0+255),w,b
  4012  002426  22DE               	addwfc	postinc2,f,c
  4013  002428  516C               	movf	(??_remove_timer+2)& (0+255),w,b
  4014  00242A  22DE               	addwfc	postinc2,f,c
  4015  00242C  516D               	movf	(??_remove_timer+3)& (0+255),w,b
  4016  00242E  22DE               	addwfc	postinc2,f,c
  4017  002430  516E               	movf	(??_remove_timer+4)& (0+255),w,b
  4018  002432  22DE               	addwfc	postinc2,f,c
  4019  002434  516F               	movf	(??_remove_timer+5)& (0+255),w,b
  4020  002436  22DE               	addwfc	postinc2,f,c
  4021  002438  5170               	movf	(??_remove_timer+6)& (0+255),w,b
  4022  00243A  22DE               	addwfc	postinc2,f,c
  4023  00243C  5171               	movf	(??_remove_timer+7)& (0+255),w,b
  4024  00243E  22DE               	addwfc	postinc2,f,c
  4025                           
  4026                           ;driver.c: 120:             tasks[id].delay = 0;
  4027  002440  C066  F060         	movff	remove_timer@id,___wmul@multiplier
  4028  002444  C067  F061         	movff	remove_timer@id+1,___wmul@multiplier+1
  4029  002448  0E00               	movlw	0
  4030  00244A  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4031  00244C  0E17               	movlw	23
  4032  00244E  6F62               	movwf	___wmul@multiplicand& (0+255),b
  4033  002450  ECCD  F01D         	call	___wmul	;wreg free
  4034  002454  0E03               	movlw	low (_tasks+3)
  4035  002456  0100               	movlb	0	; () banked
  4036  002458  2560               	addwf	?___wmul& (0+255),w,b
  4037  00245A  6ED9               	movwf	fsr2l,c
  4038  00245C  0E01               	movlw	high (_tasks+3)
  4039  00245E  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  4040  002460  6EDA               	movwf	fsr2h,c
  4041  002462  0E07               	movlw	7
  4042  002464                     u1261:
  4043  002464  6ADE               	clrf	postinc2,c
  4044  002466  06E8               	decf	wreg,f,c
  4045  002468  E2FD               	bc	u1261
  4046                           
  4047                           ;driver.c: 121:             tasks[id].data = ((void*)0);
  4048  00246A  C066  F060         	movff	remove_timer@id,___wmul@multiplier
  4049  00246E  C067  F061         	movff	remove_timer@id+1,___wmul@multiplier+1
  4050  002472  0E00               	movlw	0
  4051  002474  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4052  002476  0E17               	movlw	23
  4053  002478  6F62               	movwf	___wmul@multiplicand& (0+255),b
  4054  00247A  ECCD  F01D         	call	___wmul	;wreg free
  4055  00247E  0E13               	movlw	low (_tasks+19)
  4056  002480  0100               	movlb	0	; () banked
  4057  002482  2560               	addwf	?___wmul& (0+255),w,b
  4058  002484  6ED9               	movwf	fsr2l,c
  4059  002486  0E01               	movlw	high (_tasks+19)
  4060  002488  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  4061  00248A  6EDA               	movwf	fsr2h,c
  4062  00248C  0E00               	movlw	0
  4063  00248E  6EDE               	movwf	postinc2,c
  4064  002490  0E00               	movlw	0
  4065  002492  6EDD               	movwf	postdec2,c
  4066  002494                     
  4067                           ; BSR set to: 0
  4068                           ;driver.c: 122:             tasks[temp_index].next = tasks[id].next;
  4069  002494  C066  F060         	movff	remove_timer@id,___wmul@multiplier
  4070  002498  C067  F061         	movff	remove_timer@id+1,___wmul@multiplier+1
  4071  00249C  0E00               	movlw	0
  4072  00249E  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4073  0024A0  0E17               	movlw	23
  4074  0024A2  6F62               	movwf	___wmul@multiplicand& (0+255),b
  4075  0024A4  ECCD  F01D         	call	___wmul	;wreg free
  4076  0024A8  0E15               	movlw	low (_tasks+21)
  4077  0024AA  0100               	movlb	0	; () banked
  4078  0024AC  2560               	addwf	?___wmul& (0+255),w,b
  4079  0024AE  6ED9               	movwf	fsr2l,c
  4080  0024B0  0E01               	movlw	high (_tasks+21)
  4081  0024B2  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  4082  0024B4  6EDA               	movwf	fsr2h,c
  4083  0024B6  C074  F060         	movff	remove_timer@temp_index,___wmul@multiplier
  4084  0024BA  C075  F061         	movff	remove_timer@temp_index+1,___wmul@multiplier+1
  4085  0024BE  0E00               	movlw	0
  4086  0024C0  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4087  0024C2  0E17               	movlw	23
  4088  0024C4  6F62               	movwf	___wmul@multiplicand& (0+255),b
  4089  0024C6  ECCD  F01D         	call	___wmul	;wreg free
  4090  0024CA  0E15               	movlw	low (_tasks+21)
  4091  0024CC  0100               	movlb	0	; () banked
  4092  0024CE  2560               	addwf	?___wmul& (0+255),w,b
  4093  0024D0  6EE1               	movwf	fsr1l,c
  4094  0024D2  0E01               	movlw	high (_tasks+21)
  4095  0024D4  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  4096  0024D6  6EE2               	movwf	fsr1h,c
  4097  0024D8  CFDE FFE6          	movff	postinc2,postinc1
  4098  0024DC  CFDD FFE5          	movff	postdec2,postdec1
  4099  0024E0                     
  4100                           ; BSR set to: 0
  4101                           ;driver.c: 123:             tasks[id].next = -1;
  4102  0024E0  C066  F060         	movff	remove_timer@id,___wmul@multiplier
  4103  0024E4  C067  F061         	movff	remove_timer@id+1,___wmul@multiplier+1
  4104  0024E8  0E00               	movlw	0
  4105  0024EA  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4106  0024EC  0E17               	movlw	23
  4107  0024EE  6F62               	movwf	___wmul@multiplicand& (0+255),b
  4108  0024F0  ECCD  F01D         	call	___wmul	;wreg free
  4109  0024F4  0E15               	movlw	low (_tasks+21)
  4110  0024F6  0100               	movlb	0	; () banked
  4111  0024F8  2560               	addwf	?___wmul& (0+255),w,b
  4112  0024FA  6ED9               	movwf	fsr2l,c
  4113  0024FC  0E01               	movlw	high (_tasks+21)
  4114  0024FE  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  4115  002500  6EDA               	movwf	fsr2h,c
  4116  002502  0EFF               	movlw	255
  4117  002504  6EDE               	movwf	postinc2,c
  4118  002506  0EFF               	movlw	255
  4119  002508  6EDD               	movwf	postdec2,c
  4120  00250A  EF64  F011         	goto	l2961
  4121  00250E                     l2977:
  4122                           
  4123                           ; BSR set to: 0
  4124                           ;driver.c: 127:         temp_index = tasks[temp_index].next;
  4125  00250E  C074  F060         	movff	remove_timer@temp_index,___wmul@multiplier
  4126  002512  C075  F061         	movff	remove_timer@temp_index+1,___wmul@multiplier+1
  4127  002516  0E00               	movlw	0
  4128  002518  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4129  00251A  0E17               	movlw	23
  4130  00251C  6F62               	movwf	___wmul@multiplicand& (0+255),b
  4131  00251E  ECCD  F01D         	call	___wmul	;wreg free
  4132  002522  0E15               	movlw	low (_tasks+21)
  4133  002524  0100               	movlb	0	; () banked
  4134  002526  2560               	addwf	?___wmul& (0+255),w,b
  4135  002528  6ED9               	movwf	fsr2l,c
  4136  00252A  0E01               	movlw	high (_tasks+21)
  4137  00252C  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  4138  00252E  6EDA               	movwf	fsr2h,c
  4139  002530  CFDE F074          	movff	postinc2,remove_timer@temp_index
  4140  002534  CFDD F075          	movff	postdec2,remove_timer@temp_index+1
  4141  002538                     
  4142                           ; BSR set to: 0
  4143                           ;driver.c: 128:         if (temp_index == -1) return -1;
  4144  002538  2974               	incf	remove_timer@temp_index& (0+255),w,b
  4145  00253A  E106               	bnz	u1271
  4146  00253C  2975               	incf	(remove_timer@temp_index+1)& (0+255),w,b
  4147  00253E  A4D8               	btfss	status,2,c
  4148  002540  EFA4  F012         	goto	u1271
  4149  002544  EFA6  F012         	goto	u1270
  4150  002548                     u1271:
  4151  002548  EF6D  F011         	goto	l2965
  4152  00254C                     u1270:
  4153  00254C                     l366:
  4154                           
  4155                           ; BSR set to: 0
  4156  00254C  0012               	return		;funcret
  4157  00254E                     __end_of_remove_timer:
  4158                           	opt callstack 0
  4159                           
  4160 ;; *************** function _register_timer *****************
  4161 ;; Defined at:
  4162 ;;		line 51 in file "driver.c"
  4163 ;; Parameters:    Size  Location     Type
  4164 ;;  delay           8    6[BANK0 ] unsigned long long 
  4165 ;;  period          8   14[BANK0 ] unsigned long long 
  4166 ;;  callback        3   22[BANK0 ] PTR FTN()void 
  4167 ;;		 -> read_button_B(1), readTempAndHumid(1), read_button_A(1), swap_machine(1), 
  4168 ;;  data            2   25[BANK0 ] PTR void 
  4169 ;;		 -> RAM(3935), NULL(0), 
  4170 ;; Auto vars:     Size  Location     Type
  4171 ;;  temp_delay      8   57[BANK0 ] unsigned long long 
  4172 ;;  temp_index      2   65[BANK0 ] int 
  4173 ;;  i               2   53[BANK0 ] int 
  4174 ;;  temp            2    0        unsigned int 
  4175 ;; Return value:  Size  Location     Type
  4176 ;;                  4    6[BANK0 ] unsigned long 
  4177 ;; Registers used:
  4178 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4179 ;; Tracked objects:
  4180 ;;		On entry : 0/0
  4181 ;;		On exit  : 0/0
  4182 ;;		Unchanged: 0/0
  4183 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4184 ;;      Params:         0      21       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4185 ;;      Locals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4186 ;;      Temps:          0      24       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4187 ;;      Totals:         0      61       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4188 ;;Total ram usage:       61 bytes
  4189 ;; Hardware stack levels used:    1
  4190 ;; Hardware stack levels required when called:    5
  4191 ;; This function calls:
  4192 ;;		___wmul
  4193 ;; This function is called by:
  4194 ;;		_initial_register
  4195 ;;		_FSM
  4196 ;; This function uses a non-reentrant model
  4197 ;;
  4198                           
  4199                           	psect	text23
  4200  0010A6                     __ptext23:
  4201                           	opt callstack 0
  4202  0010A6                     _register_timer:
  4203                           	opt callstack 24
  4204  0010A6                     
  4205                           ;driver.c: 52:     if (NUMBER_EXIST_TASKS >= 10 ) return 0;
  4206  0010A6  0100               	movlb	0	; () banked
  4207  0010A8  BFCC               	btfsc	(_NUMBER_EXIST_TASKS+1)& (0+255),7,b
  4208  0010AA  EF60  F008         	goto	u1401
  4209  0010AE  51CC               	movf	(_NUMBER_EXIST_TASKS+1)& (0+255),w,b
  4210  0010B0  E109               	bnz	u1400
  4211  0010B2  0E0A               	movlw	10
  4212  0010B4  5DCB               	subwf	_NUMBER_EXIST_TASKS& (0+255),w,b
  4213  0010B6  A0D8               	btfss	status,0,c
  4214  0010B8  EF60  F008         	goto	u1401
  4215  0010BC  EF62  F008         	goto	u1400
  4216  0010C0                     u1401:
  4217  0010C0  EF6C  F008         	goto	l3197
  4218  0010C4                     u1400:
  4219  0010C4                     
  4220                           ; BSR set to: 0
  4221  0010C4  0E00               	movlw	0
  4222  0010C6  6F66               	movwf	?_register_timer& (0+255),b
  4223  0010C8  0E00               	movlw	0
  4224  0010CA  6F67               	movwf	(?_register_timer+1)& (0+255),b
  4225  0010CC  0E00               	movlw	0
  4226  0010CE  6F68               	movwf	(?_register_timer+2)& (0+255),b
  4227  0010D0  0E00               	movlw	0
  4228  0010D2  6F69               	movwf	(?_register_timer+3)& (0+255),b
  4229  0010D4  EF8F  F00C         	goto	l351
  4230  0010D8                     l3197:
  4231                           
  4232                           ; BSR set to: 0
  4233                           ;driver.c: 53:     NUMBER_EXIST_TASKS ++;
  4234  0010D8  4BCB               	infsnz	_NUMBER_EXIST_TASKS& (0+255),f,b
  4235  0010DA  2BCC               	incf	(_NUMBER_EXIST_TASKS+1)& (0+255),f,b
  4236  0010DC                     
  4237                           ; BSR set to: 0
  4238                           ;driver.c: 54:     int i =0;
  4239  0010DC  0E00               	movlw	0
  4240  0010DE  6F96               	movwf	(register_timer@i+1)& (0+255),b
  4241  0010E0  0E00               	movlw	0
  4242  0010E2  6F95               	movwf	register_timer@i& (0+255),b
  4243  0010E4                     l3201:
  4244                           
  4245                           ; BSR set to: 0
  4246                           ;driver.c: 56:         if (tasks[i].period == 0) {
  4247  0010E4  C095  F060         	movff	register_timer@i,___wmul@multiplier
  4248  0010E8  C096  F061         	movff	register_timer@i+1,___wmul@multiplier+1
  4249  0010EC  0E00               	movlw	0
  4250  0010EE  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4251  0010F0  0E17               	movlw	23
  4252  0010F2  6F62               	movwf	___wmul@multiplicand& (0+255),b
  4253  0010F4  ECCD  F01D         	call	___wmul	;wreg free
  4254  0010F8  0E0B               	movlw	low (_tasks+11)
  4255  0010FA  0100               	movlb	0	; () banked
  4256  0010FC  2560               	addwf	?___wmul& (0+255),w,b
  4257  0010FE  6ED9               	movwf	fsr2l,c
  4258  001100  0E01               	movlw	high (_tasks+11)
  4259  001102  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  4260  001104  6EDA               	movwf	fsr2h,c
  4261  001106  50DE               	movf	postinc2,w,c
  4262  001108  10DE               	iorwf	postinc2,w,c
  4263  00110A  10DE               	iorwf	postinc2,w,c
  4264  00110C  10DE               	iorwf	postinc2,w,c
  4265  00110E  10DE               	iorwf	postinc2,w,c
  4266  001110  10DE               	iorwf	postinc2,w,c
  4267  001112  10DE               	iorwf	postinc2,w,c
  4268  001114  10DE               	iorwf	postinc2,w,c
  4269  001116  A4D8               	btfss	status,2,c
  4270  001118  EF90  F008         	goto	u1411
  4271  00111C  EF92  F008         	goto	u1410
  4272  001120                     u1411:
  4273  001120  EF98  F008         	goto	l3205
  4274  001124                     u1410:
  4275  001124                     
  4276                           ; BSR set to: 0
  4277                           ;driver.c: 57:             NUMBER_EXIST = i;
  4278  001124  C095  F0CD         	movff	register_timer@i,_NUMBER_EXIST
  4279  001128  C096  F0CE         	movff	register_timer@i+1,_NUMBER_EXIST+1
  4280                           
  4281                           ;driver.c: 58:             break;
  4282  00112C  EF9C  F008         	goto	l3207
  4283  001130                     l3205:
  4284                           
  4285                           ; BSR set to: 0
  4286                           ;driver.c: 60:         i++;
  4287  001130  4B95               	infsnz	register_timer@i& (0+255),f,b
  4288  001132  2B96               	incf	(register_timer@i+1)& (0+255),f,b
  4289  001134  EF72  F008         	goto	l3201
  4290  001138                     l3207:
  4291                           
  4292                           ; BSR set to: 0
  4293                           ;driver.c: 62:     tasks[NUMBER_EXIST].callback = callback;
  4294  001138  C0CD  F060         	movff	_NUMBER_EXIST,___wmul@multiplier
  4295  00113C  C0CE  F061         	movff	_NUMBER_EXIST+1,___wmul@multiplier+1
  4296  001140  0E00               	movlw	0
  4297  001142  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4298  001144  0E17               	movlw	23
  4299  001146  6F62               	movwf	___wmul@multiplicand& (0+255),b
  4300  001148  ECCD  F01D         	call	___wmul	;wreg free
  4301  00114C  0E00               	movlw	low _tasks
  4302  00114E  0100               	movlb	0	; () banked
  4303  001150  2560               	addwf	?___wmul& (0+255),w,b
  4304  001152  6ED9               	movwf	fsr2l,c
  4305  001154  0E01               	movlw	high _tasks
  4306  001156  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  4307  001158  6EDA               	movwf	fsr2h,c
  4308  00115A  C076  FFDE         	movff	register_timer@callback,postinc2
  4309  00115E  C077  FFDE         	movff	register_timer@callback+1,postinc2
  4310  001162  C078  FFDE         	movff	register_timer@callback+2,postinc2
  4311                           
  4312                           ;driver.c: 63:     tasks[NUMBER_EXIST].data = data;
  4313  001166  C0CD  F060         	movff	_NUMBER_EXIST,___wmul@multiplier
  4314  00116A  C0CE  F061         	movff	_NUMBER_EXIST+1,___wmul@multiplier+1
  4315  00116E  0E00               	movlw	0
  4316  001170  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4317  001172  0E17               	movlw	23
  4318  001174  6F62               	movwf	___wmul@multiplicand& (0+255),b
  4319  001176  ECCD  F01D         	call	___wmul	;wreg free
  4320  00117A  0E13               	movlw	low (_tasks+19)
  4321  00117C  0100               	movlb	0	; () banked
  4322  00117E  2560               	addwf	?___wmul& (0+255),w,b
  4323  001180  6ED9               	movwf	fsr2l,c
  4324  001182  0E01               	movlw	high (_tasks+19)
  4325  001184  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  4326  001186  6EDA               	movwf	fsr2h,c
  4327  001188  C079  FFDE         	movff	register_timer@data,postinc2
  4328  00118C  C07A  FFDD         	movff	register_timer@data+1,postdec2
  4329                           
  4330                           ;driver.c: 64:     tasks[NUMBER_EXIST].period = period;
  4331  001190  C0CD  F060         	movff	_NUMBER_EXIST,___wmul@multiplier
  4332  001194  C0CE  F061         	movff	_NUMBER_EXIST+1,___wmul@multiplier+1
  4333  001198  0E00               	movlw	0
  4334  00119A  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4335  00119C  0E17               	movlw	23
  4336  00119E  6F62               	movwf	___wmul@multiplicand& (0+255),b
  4337  0011A0  ECCD  F01D         	call	___wmul	;wreg free
  4338  0011A4  0E0B               	movlw	low (_tasks+11)
  4339  0011A6  0100               	movlb	0	; () banked
  4340  0011A8  2560               	addwf	?___wmul& (0+255),w,b
  4341  0011AA  6ED9               	movwf	fsr2l,c
  4342  0011AC  0E01               	movlw	high (_tasks+11)
  4343  0011AE  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  4344  0011B0  6EDA               	movwf	fsr2h,c
  4345  0011B2  C06E  FFDE         	movff	register_timer@period,postinc2
  4346  0011B6  C06F  FFDE         	movff	register_timer@period+1,postinc2
  4347  0011BA  C070  FFDE         	movff	register_timer@period+2,postinc2
  4348  0011BE  C071  FFDE         	movff	register_timer@period+3,postinc2
  4349  0011C2  C072  FFDE         	movff	register_timer@period+4,postinc2
  4350  0011C6  C073  FFDE         	movff	register_timer@period+5,postinc2
  4351  0011CA  C074  FFDE         	movff	register_timer@period+6,postinc2
  4352  0011CE  C075  FFDE         	movff	register_timer@period+7,postinc2
  4353  0011D2                     
  4354                           ; BSR set to: 0
  4355                           ;driver.c: 65:     if (NUMBER_EXIST == 0){
  4356  0011D2  51CD               	movf	_NUMBER_EXIST& (0+255),w,b
  4357  0011D4  11CE               	iorwf	(_NUMBER_EXIST+1)& (0+255),w,b
  4358  0011D6  A4D8               	btfss	status,2,c
  4359  0011D8  EFF0  F008         	goto	u1421
  4360  0011DC  EFF2  F008         	goto	u1420
  4361  0011E0                     u1421:
  4362  0011E0  EF37  F009         	goto	l3221
  4363  0011E4                     u1420:
  4364  0011E4                     
  4365                           ; BSR set to: 0
  4366                           ;driver.c: 66:         tasks[NUMBER_EXIST].next = -1;
  4367  0011E4  C0CD  F060         	movff	_NUMBER_EXIST,___wmul@multiplier
  4368  0011E8  C0CE  F061         	movff	_NUMBER_EXIST+1,___wmul@multiplier+1
  4369  0011EC  0E00               	movlw	0
  4370  0011EE  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4371  0011F0  0E17               	movlw	23
  4372  0011F2  6F62               	movwf	___wmul@multiplicand& (0+255),b
  4373  0011F4  ECCD  F01D         	call	___wmul	;wreg free
  4374  0011F8  0E15               	movlw	low (_tasks+21)
  4375  0011FA  0100               	movlb	0	; () banked
  4376  0011FC  2560               	addwf	?___wmul& (0+255),w,b
  4377  0011FE  6ED9               	movwf	fsr2l,c
  4378  001200  0E01               	movlw	high (_tasks+21)
  4379  001202  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  4380  001204  6EDA               	movwf	fsr2h,c
  4381  001206  0EFF               	movlw	255
  4382  001208  6EDE               	movwf	postinc2,c
  4383  00120A  0EFF               	movlw	255
  4384  00120C  6EDD               	movwf	postdec2,c
  4385  00120E                     
  4386                           ; BSR set to: 0
  4387                           ;driver.c: 67:         HEAD_QUEUE = 0;
  4388  00120E  0E00               	movlw	0
  4389  001210  6FCA               	movwf	(_HEAD_QUEUE+1)& (0+255),b
  4390  001212  0E00               	movlw	0
  4391  001214  6FC9               	movwf	_HEAD_QUEUE& (0+255),b
  4392  001216                     
  4393                           ; BSR set to: 0
  4394                           ;driver.c: 68:         tasks[NUMBER_EXIST].delay = delay;
  4395  001216  C0CD  F060         	movff	_NUMBER_EXIST,___wmul@multiplier
  4396  00121A  C0CE  F061         	movff	_NUMBER_EXIST+1,___wmul@multiplier+1
  4397  00121E  0E00               	movlw	0
  4398  001220  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4399  001222  0E17               	movlw	23
  4400  001224  6F62               	movwf	___wmul@multiplicand& (0+255),b
  4401  001226  ECCD  F01D         	call	___wmul	;wreg free
  4402  00122A  0E03               	movlw	low (_tasks+3)
  4403  00122C  0100               	movlb	0	; () banked
  4404  00122E  2560               	addwf	?___wmul& (0+255),w,b
  4405  001230  6ED9               	movwf	fsr2l,c
  4406  001232  0E01               	movlw	high (_tasks+3)
  4407  001234  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  4408  001236  6EDA               	movwf	fsr2h,c
  4409  001238  C066  FFDE         	movff	register_timer@delay,postinc2
  4410  00123C  C067  FFDE         	movff	register_timer@delay+1,postinc2
  4411  001240  C068  FFDE         	movff	register_timer@delay+2,postinc2
  4412  001244  C069  FFDE         	movff	register_timer@delay+3,postinc2
  4413  001248  C06A  FFDE         	movff	register_timer@delay+4,postinc2
  4414  00124C  C06B  FFDE         	movff	register_timer@delay+5,postinc2
  4415  001250  C06C  FFDE         	movff	register_timer@delay+6,postinc2
  4416  001254  C06D  FFDE         	movff	register_timer@delay+7,postinc2
  4417  001258                     l3217:
  4418                           
  4419                           ; BSR set to: 0
  4420                           ;driver.c: 69:         return NUMBER_EXIST;
  4421  001258  C0CD  F066         	movff	_NUMBER_EXIST,?_register_timer
  4422  00125C  C0CE  F067         	movff	_NUMBER_EXIST+1,?_register_timer+1
  4423  001260  0E00               	movlw	0
  4424  001262  BF67               	btfsc	(?_register_timer+1)& (0+255),7,b
  4425  001264  0EFF               	movlw	-1
  4426  001266  6F68               	movwf	(?_register_timer+2)& (0+255),b
  4427  001268  6F69               	movwf	(?_register_timer+3)& (0+255),b
  4428  00126A  EF8F  F00C         	goto	l351
  4429  00126E                     l3221:
  4430                           
  4431                           ; BSR set to: 0
  4432                           ;driver.c: 71:     unsigned int temp;;driver.c: 72:     if (tasks[HEAD_QUEUE].delay >= d
      +                          elay){
  4433  00126E  C0C9  F060         	movff	_HEAD_QUEUE,___wmul@multiplier
  4434  001272  C0CA  F061         	movff	_HEAD_QUEUE+1,___wmul@multiplier+1
  4435  001276  0E00               	movlw	0
  4436  001278  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4437  00127A  0E17               	movlw	23
  4438  00127C  6F62               	movwf	___wmul@multiplicand& (0+255),b
  4439  00127E  ECCD  F01D         	call	___wmul	;wreg free
  4440  001282  0E03               	movlw	low (_tasks+3)
  4441  001284  0100               	movlb	0	; () banked
  4442  001286  2560               	addwf	?___wmul& (0+255),w,b
  4443  001288  6ED9               	movwf	fsr2l,c
  4444  00128A  0E01               	movlw	high (_tasks+3)
  4445  00128C  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  4446  00128E  6EDA               	movwf	fsr2h,c
  4447  001290  5166               	movf	register_timer@delay& (0+255),w,b
  4448  001292  5CDE               	subwf	postinc2,w,c
  4449  001294  5167               	movf	(register_timer@delay+1)& (0+255),w,b
  4450  001296  58DE               	subwfb	postinc2,w,c
  4451  001298  5168               	movf	(register_timer@delay+2)& (0+255),w,b
  4452  00129A  58DE               	subwfb	postinc2,w,c
  4453  00129C  5169               	movf	(register_timer@delay+3)& (0+255),w,b
  4454  00129E  58DE               	subwfb	postinc2,w,c
  4455  0012A0  516A               	movf	(register_timer@delay+4)& (0+255),w,b
  4456  0012A2  58DE               	subwfb	postinc2,w,c
  4457  0012A4  516B               	movf	(register_timer@delay+5)& (0+255),w,b
  4458  0012A6  58DE               	subwfb	postinc2,w,c
  4459  0012A8  516C               	movf	(register_timer@delay+6)& (0+255),w,b
  4460  0012AA  58DE               	subwfb	postinc2,w,c
  4461  0012AC  516D               	movf	(register_timer@delay+7)& (0+255),w,b
  4462  0012AE  58DE               	subwfb	postinc2,w,c
  4463  0012B0  A0D8               	btfss	status,0,c
  4464  0012B2  EF5D  F009         	goto	u1431
  4465  0012B6  EF5F  F009         	goto	u1430
  4466  0012BA                     u1431:
  4467  0012BA  EFF5  F009         	goto	l357
  4468  0012BE                     u1430:
  4469  0012BE                     
  4470                           ; BSR set to: 0
  4471                           ;driver.c: 73:         tasks[NUMBER_EXIST].next = HEAD_QUEUE;
  4472  0012BE  C0CD  F060         	movff	_NUMBER_EXIST,___wmul@multiplier
  4473  0012C2  C0CE  F061         	movff	_NUMBER_EXIST+1,___wmul@multiplier+1
  4474  0012C6  0E00               	movlw	0
  4475  0012C8  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4476  0012CA  0E17               	movlw	23
  4477  0012CC  6F62               	movwf	___wmul@multiplicand& (0+255),b
  4478  0012CE  ECCD  F01D         	call	___wmul	;wreg free
  4479  0012D2  0E15               	movlw	low (_tasks+21)
  4480  0012D4  0100               	movlb	0	; () banked
  4481  0012D6  2560               	addwf	?___wmul& (0+255),w,b
  4482  0012D8  6ED9               	movwf	fsr2l,c
  4483  0012DA  0E01               	movlw	high (_tasks+21)
  4484  0012DC  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  4485  0012DE  6EDA               	movwf	fsr2h,c
  4486  0012E0  C0C9  FFDE         	movff	_HEAD_QUEUE,postinc2
  4487  0012E4  C0CA  FFDD         	movff	_HEAD_QUEUE+1,postdec2
  4488                           
  4489                           ;driver.c: 74:         tasks[HEAD_QUEUE].delay = tasks[HEAD_QUEUE].delay - delay;
  4490  0012E8  C0C9  F060         	movff	_HEAD_QUEUE,___wmul@multiplier
  4491  0012EC  C0CA  F061         	movff	_HEAD_QUEUE+1,___wmul@multiplier+1
  4492  0012F0  0E00               	movlw	0
  4493  0012F2  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4494  0012F4  0E17               	movlw	23
  4495  0012F6  6F62               	movwf	___wmul@multiplicand& (0+255),b
  4496  0012F8  ECCD  F01D         	call	___wmul	;wreg free
  4497  0012FC  0E03               	movlw	low (_tasks+3)
  4498  0012FE  0100               	movlb	0	; () banked
  4499  001300  2560               	addwf	?___wmul& (0+255),w,b
  4500  001302  6ED9               	movwf	fsr2l,c
  4501  001304  0E01               	movlw	high (_tasks+3)
  4502  001306  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  4503  001308  6EDA               	movwf	fsr2h,c
  4504  00130A  CFDE F07B          	movff	postinc2,??_register_timer
  4505  00130E  CFDE F07C          	movff	postinc2,??_register_timer+1
  4506  001312  CFDE F07D          	movff	postinc2,??_register_timer+2
  4507  001316  CFDE F07E          	movff	postinc2,??_register_timer+3
  4508  00131A  CFDE F07F          	movff	postinc2,??_register_timer+4
  4509  00131E  CFDE F080          	movff	postinc2,??_register_timer+5
  4510  001322  CFDE F081          	movff	postinc2,??_register_timer+6
  4511  001326  CFDE F082          	movff	postinc2,??_register_timer+7
  4512  00132A  5166               	movf	register_timer@delay& (0+255),w,b
  4513  00132C  5D7B               	subwf	??_register_timer& (0+255),w,b
  4514  00132E  6F83               	movwf	(??_register_timer+8)& (0+255),b
  4515  001330  5167               	movf	(register_timer@delay+1)& (0+255),w,b
  4516  001332  597C               	subwfb	(??_register_timer+1)& (0+255),w,b
  4517  001334  6F84               	movwf	(??_register_timer+9)& (0+255),b
  4518  001336  5168               	movf	(register_timer@delay+2)& (0+255),w,b
  4519  001338  597D               	subwfb	(??_register_timer+2)& (0+255),w,b
  4520  00133A  6F85               	movwf	(??_register_timer+10)& (0+255),b
  4521  00133C  5169               	movf	(register_timer@delay+3)& (0+255),w,b
  4522  00133E  597E               	subwfb	(??_register_timer+3)& (0+255),w,b
  4523  001340  6F86               	movwf	(??_register_timer+11)& (0+255),b
  4524  001342  516A               	movf	(register_timer@delay+4)& (0+255),w,b
  4525  001344  597F               	subwfb	(??_register_timer+4)& (0+255),w,b
  4526  001346  6F87               	movwf	(??_register_timer+12)& (0+255),b
  4527  001348  516B               	movf	(register_timer@delay+5)& (0+255),w,b
  4528  00134A  5980               	subwfb	(??_register_timer+5)& (0+255),w,b
  4529  00134C  6F88               	movwf	(??_register_timer+13)& (0+255),b
  4530  00134E  516C               	movf	(register_timer@delay+6)& (0+255),w,b
  4531  001350  5981               	subwfb	(??_register_timer+6)& (0+255),w,b
  4532  001352  6F89               	movwf	(??_register_timer+14)& (0+255),b
  4533  001354  516D               	movf	(register_timer@delay+7)& (0+255),w,b
  4534  001356  5982               	subwfb	(??_register_timer+7)& (0+255),w,b
  4535  001358  6F8A               	movwf	(??_register_timer+15)& (0+255),b
  4536  00135A  C0C9  F060         	movff	_HEAD_QUEUE,___wmul@multiplier
  4537  00135E  C0CA  F061         	movff	_HEAD_QUEUE+1,___wmul@multiplier+1
  4538  001362  0E00               	movlw	0
  4539  001364  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4540  001366  0E17               	movlw	23
  4541  001368  6F62               	movwf	___wmul@multiplicand& (0+255),b
  4542  00136A  ECCD  F01D         	call	___wmul	;wreg free
  4543  00136E  0E03               	movlw	low (_tasks+3)
  4544  001370  0100               	movlb	0	; () banked
  4545  001372  2560               	addwf	?___wmul& (0+255),w,b
  4546  001374  6ED9               	movwf	fsr2l,c
  4547  001376  0E01               	movlw	high (_tasks+3)
  4548  001378  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  4549  00137A  6EDA               	movwf	fsr2h,c
  4550  00137C  C083  FFDE         	movff	??_register_timer+8,postinc2
  4551  001380  C084  FFDE         	movff	??_register_timer+9,postinc2
  4552  001384  C085  FFDE         	movff	??_register_timer+10,postinc2
  4553  001388  C086  FFDE         	movff	??_register_timer+11,postinc2
  4554  00138C  C087  FFDE         	movff	??_register_timer+12,postinc2
  4555  001390  C088  FFDE         	movff	??_register_timer+13,postinc2
  4556  001394  C089  FFDE         	movff	??_register_timer+14,postinc2
  4557  001398  C08A  FFDE         	movff	??_register_timer+15,postinc2
  4558                           
  4559                           ;driver.c: 75:         tasks[NUMBER_EXIST].delay = delay;
  4560  00139C  C0CD  F060         	movff	_NUMBER_EXIST,___wmul@multiplier
  4561  0013A0  C0CE  F061         	movff	_NUMBER_EXIST+1,___wmul@multiplier+1
  4562  0013A4  0E00               	movlw	0
  4563  0013A6  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4564  0013A8  0E17               	movlw	23
  4565  0013AA  6F62               	movwf	___wmul@multiplicand& (0+255),b
  4566  0013AC  ECCD  F01D         	call	___wmul	;wreg free
  4567  0013B0  0E03               	movlw	low (_tasks+3)
  4568  0013B2  0100               	movlb	0	; () banked
  4569  0013B4  2560               	addwf	?___wmul& (0+255),w,b
  4570  0013B6  6ED9               	movwf	fsr2l,c
  4571  0013B8  0E01               	movlw	high (_tasks+3)
  4572  0013BA  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  4573  0013BC  6EDA               	movwf	fsr2h,c
  4574  0013BE  C066  FFDE         	movff	register_timer@delay,postinc2
  4575  0013C2  C067  FFDE         	movff	register_timer@delay+1,postinc2
  4576  0013C6  C068  FFDE         	movff	register_timer@delay+2,postinc2
  4577  0013CA  C069  FFDE         	movff	register_timer@delay+3,postinc2
  4578  0013CE  C06A  FFDE         	movff	register_timer@delay+4,postinc2
  4579  0013D2  C06B  FFDE         	movff	register_timer@delay+5,postinc2
  4580  0013D6  C06C  FFDE         	movff	register_timer@delay+6,postinc2
  4581  0013DA  C06D  FFDE         	movff	register_timer@delay+7,postinc2
  4582  0013DE                     
  4583                           ; BSR set to: 0
  4584                           ;driver.c: 76:         HEAD_QUEUE = NUMBER_EXIST;
  4585  0013DE  C0CD  F0C9         	movff	_NUMBER_EXIST,_HEAD_QUEUE
  4586  0013E2  C0CE  F0CA         	movff	_NUMBER_EXIST+1,_HEAD_QUEUE+1
  4587  0013E6  EF2C  F009         	goto	l3217
  4588  0013EA                     l357:
  4589                           
  4590                           ; BSR set to: 0
  4591                           ;driver.c: 80:     int temp_index = HEAD_QUEUE;
  4592  0013EA  C0C9  F0A1         	movff	_HEAD_QUEUE,register_timer@temp_index
  4593  0013EE  C0CA  F0A2         	movff	_HEAD_QUEUE+1,register_timer@temp_index+1
  4594  0013F2                     
  4595                           ; BSR set to: 0
  4596                           ;driver.c: 81:     unsigned long long int temp_delay = tasks[HEAD_QUEUE].delay;
  4597  0013F2  C0C9  F060         	movff	_HEAD_QUEUE,___wmul@multiplier
  4598  0013F6  C0CA  F061         	movff	_HEAD_QUEUE+1,___wmul@multiplier+1
  4599  0013FA  0E00               	movlw	0
  4600  0013FC  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4601  0013FE  0E17               	movlw	23
  4602  001400  6F62               	movwf	___wmul@multiplicand& (0+255),b
  4603  001402  ECCD  F01D         	call	___wmul	;wreg free
  4604  001406  0E03               	movlw	low (_tasks+3)
  4605  001408  0100               	movlb	0	; () banked
  4606  00140A  2560               	addwf	?___wmul& (0+255),w,b
  4607  00140C  6ED9               	movwf	fsr2l,c
  4608  00140E  0E01               	movlw	high (_tasks+3)
  4609  001410  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  4610  001412  6EDA               	movwf	fsr2h,c
  4611  001414  CFDE F07B          	movff	postinc2,??_register_timer
  4612  001418  CFDE F07C          	movff	postinc2,??_register_timer+1
  4613  00141C  CFDE F07D          	movff	postinc2,??_register_timer+2
  4614  001420  CFDE F07E          	movff	postinc2,??_register_timer+3
  4615  001424  CFDE F07F          	movff	postinc2,??_register_timer+4
  4616  001428  CFDE F080          	movff	postinc2,??_register_timer+5
  4617  00142C  CFDE F081          	movff	postinc2,??_register_timer+6
  4618  001430  CFDE F082          	movff	postinc2,??_register_timer+7
  4619  001434  C07B  F099         	movff	??_register_timer,register_timer@temp_delay
  4620  001438  C07C  F09A         	movff	??_register_timer+1,register_timer@temp_delay+1
  4621  00143C  C07D  F09B         	movff	??_register_timer+2,register_timer@temp_delay+2
  4622  001440  C07E  F09C         	movff	??_register_timer+3,register_timer@temp_delay+3
  4623  001444  C07F  F09D         	movff	??_register_timer+4,register_timer@temp_delay+4
  4624  001448  C080  F09E         	movff	??_register_timer+5,register_timer@temp_delay+5
  4625  00144C  C081  F09F         	movff	??_register_timer+6,register_timer@temp_delay+6
  4626  001450  C082  F0A0         	movff	??_register_timer+7,register_timer@temp_delay+7
  4627  001454                     l358:
  4628                           
  4629                           ; BSR set to: 0
  4630                           ;driver.c: 83:         if (tasks[temp_index].next == -1){
  4631  001454  C0A1  F060         	movff	register_timer@temp_index,___wmul@multiplier
  4632  001458  C0A2  F061         	movff	register_timer@temp_index+1,___wmul@multiplier+1
  4633  00145C  0E00               	movlw	0
  4634  00145E  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4635  001460  0E17               	movlw	23
  4636  001462  6F62               	movwf	___wmul@multiplicand& (0+255),b
  4637  001464  ECCD  F01D         	call	___wmul	;wreg free
  4638  001468  0E15               	movlw	low (_tasks+21)
  4639  00146A  0100               	movlb	0	; () banked
  4640  00146C  2560               	addwf	?___wmul& (0+255),w,b
  4641  00146E  6ED9               	movwf	fsr2l,c
  4642  001470  0E01               	movlw	high (_tasks+21)
  4643  001472  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  4644  001474  6EDA               	movwf	fsr2h,c
  4645  001476  28DE               	incf	postinc2,w,c
  4646  001478  E106               	bnz	u1441
  4647  00147A  28DE               	incf	postinc2,w,c
  4648  00147C  A4D8               	btfss	status,2,c
  4649  00147E  EF43  F00A         	goto	u1441
  4650  001482  EF45  F00A         	goto	u1440
  4651  001486                     u1441:
  4652  001486  EFAA  F00A         	goto	l3239
  4653  00148A                     u1440:
  4654  00148A                     
  4655                           ; BSR set to: 0
  4656                           ;driver.c: 84:             tasks[temp_index].next = NUMBER_EXIST;
  4657  00148A  C0A1  F060         	movff	register_timer@temp_index,___wmul@multiplier
  4658  00148E  C0A2  F061         	movff	register_timer@temp_index+1,___wmul@multiplier+1
  4659  001492  0E00               	movlw	0
  4660  001494  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4661  001496  0E17               	movlw	23
  4662  001498  6F62               	movwf	___wmul@multiplicand& (0+255),b
  4663  00149A  ECCD  F01D         	call	___wmul	;wreg free
  4664  00149E  0E15               	movlw	low (_tasks+21)
  4665  0014A0  0100               	movlb	0	; () banked
  4666  0014A2  2560               	addwf	?___wmul& (0+255),w,b
  4667  0014A4  6ED9               	movwf	fsr2l,c
  4668  0014A6  0E01               	movlw	high (_tasks+21)
  4669  0014A8  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  4670  0014AA  6EDA               	movwf	fsr2h,c
  4671  0014AC  C0CD  FFDE         	movff	_NUMBER_EXIST,postinc2
  4672  0014B0  C0CE  FFDD         	movff	_NUMBER_EXIST+1,postdec2
  4673                           
  4674                           ;driver.c: 85:             tasks[NUMBER_EXIST].next = -1;
  4675  0014B4  C0CD  F060         	movff	_NUMBER_EXIST,___wmul@multiplier
  4676  0014B8  C0CE  F061         	movff	_NUMBER_EXIST+1,___wmul@multiplier+1
  4677  0014BC  0E00               	movlw	0
  4678  0014BE  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4679  0014C0  0E17               	movlw	23
  4680  0014C2  6F62               	movwf	___wmul@multiplicand& (0+255),b
  4681  0014C4  ECCD  F01D         	call	___wmul	;wreg free
  4682  0014C8  0E15               	movlw	low (_tasks+21)
  4683  0014CA  0100               	movlb	0	; () banked
  4684  0014CC  2560               	addwf	?___wmul& (0+255),w,b
  4685  0014CE  6ED9               	movwf	fsr2l,c
  4686  0014D0  0E01               	movlw	high (_tasks+21)
  4687  0014D2  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  4688  0014D4  6EDA               	movwf	fsr2h,c
  4689  0014D6  0EFF               	movlw	255
  4690  0014D8  6EDE               	movwf	postinc2,c
  4691  0014DA  0EFF               	movlw	255
  4692  0014DC  6EDD               	movwf	postdec2,c
  4693                           
  4694                           ;driver.c: 86:             tasks[NUMBER_EXIST].delay = delay - temp_delay;
  4695  0014DE  5199               	movf	register_timer@temp_delay& (0+255),w,b
  4696  0014E0  5D66               	subwf	register_timer@delay& (0+255),w,b
  4697  0014E2  6F7B               	movwf	??_register_timer& (0+255),b
  4698  0014E4  519A               	movf	(register_timer@temp_delay+1)& (0+255),w,b
  4699  0014E6  5967               	subwfb	(register_timer@delay+1)& (0+255),w,b
  4700  0014E8  6F7C               	movwf	(??_register_timer+1)& (0+255),b
  4701  0014EA  519B               	movf	(register_timer@temp_delay+2)& (0+255),w,b
  4702  0014EC  5968               	subwfb	(register_timer@delay+2)& (0+255),w,b
  4703  0014EE  6F7D               	movwf	(??_register_timer+2)& (0+255),b
  4704  0014F0  519C               	movf	(register_timer@temp_delay+3)& (0+255),w,b
  4705  0014F2  5969               	subwfb	(register_timer@delay+3)& (0+255),w,b
  4706  0014F4  6F7E               	movwf	(??_register_timer+3)& (0+255),b
  4707  0014F6  519D               	movf	(register_timer@temp_delay+4)& (0+255),w,b
  4708  0014F8  596A               	subwfb	(register_timer@delay+4)& (0+255),w,b
  4709  0014FA  6F7F               	movwf	(??_register_timer+4)& (0+255),b
  4710  0014FC  519E               	movf	(register_timer@temp_delay+5)& (0+255),w,b
  4711  0014FE  596B               	subwfb	(register_timer@delay+5)& (0+255),w,b
  4712  001500  6F80               	movwf	(??_register_timer+5)& (0+255),b
  4713  001502  519F               	movf	(register_timer@temp_delay+6)& (0+255),w,b
  4714  001504  596C               	subwfb	(register_timer@delay+6)& (0+255),w,b
  4715  001506  6F81               	movwf	(??_register_timer+6)& (0+255),b
  4716  001508  51A0               	movf	(register_timer@temp_delay+7)& (0+255),w,b
  4717  00150A  596D               	subwfb	(register_timer@delay+7)& (0+255),w,b
  4718  00150C  6F82               	movwf	(??_register_timer+7)& (0+255),b
  4719  00150E  C0CD  F060         	movff	_NUMBER_EXIST,___wmul@multiplier
  4720  001512  C0CE  F061         	movff	_NUMBER_EXIST+1,___wmul@multiplier+1
  4721  001516  0E00               	movlw	0
  4722  001518  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4723  00151A  0E17               	movlw	23
  4724  00151C  6F62               	movwf	___wmul@multiplicand& (0+255),b
  4725  00151E  ECCD  F01D         	call	___wmul	;wreg free
  4726  001522  0E03               	movlw	low (_tasks+3)
  4727  001524  0100               	movlb	0	; () banked
  4728  001526  2560               	addwf	?___wmul& (0+255),w,b
  4729  001528  6ED9               	movwf	fsr2l,c
  4730  00152A  0E01               	movlw	high (_tasks+3)
  4731  00152C  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  4732  00152E  6EDA               	movwf	fsr2h,c
  4733  001530  C07B  FFDE         	movff	??_register_timer,postinc2
  4734  001534  C07C  FFDE         	movff	??_register_timer+1,postinc2
  4735  001538  C07D  FFDE         	movff	??_register_timer+2,postinc2
  4736  00153C  C07E  FFDE         	movff	??_register_timer+3,postinc2
  4737  001540  C07F  FFDE         	movff	??_register_timer+4,postinc2
  4738  001544  C080  FFDE         	movff	??_register_timer+5,postinc2
  4739  001548  C081  FFDE         	movff	??_register_timer+6,postinc2
  4740  00154C  C082  FFDE         	movff	??_register_timer+7,postinc2
  4741  001550  EF2C  F009         	goto	l3217
  4742  001554                     l3239:
  4743                           
  4744                           ; BSR set to: 0
  4745                           ;driver.c: 89:         temp_delay = temp_delay + tasks[tasks[temp_index].next].delay;
  4746  001554  C0A1  F060         	movff	register_timer@temp_index,___wmul@multiplier
  4747  001558  C0A2  F061         	movff	register_timer@temp_index+1,___wmul@multiplier+1
  4748  00155C  0E00               	movlw	0
  4749  00155E  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4750  001560  0E17               	movlw	23
  4751  001562  6F62               	movwf	___wmul@multiplicand& (0+255),b
  4752  001564  ECCD  F01D         	call	___wmul	;wreg free
  4753  001568  0E15               	movlw	low (_tasks+21)
  4754  00156A  0100               	movlb	0	; () banked
  4755  00156C  2560               	addwf	?___wmul& (0+255),w,b
  4756  00156E  6ED9               	movwf	fsr2l,c
  4757  001570  0E01               	movlw	high (_tasks+21)
  4758  001572  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  4759  001574  6EDA               	movwf	fsr2h,c
  4760  001576  CFDE F097          	movff	postinc2,_register_timer$2310
  4761  00157A  CFDD F098          	movff	postdec2,_register_timer$2310+1
  4762                           
  4763                           ;driver.c: 89:         temp_delay = temp_delay + tasks[tasks[temp_index].next].delay;
  4764  00157E  C097  F060         	movff	_register_timer$2310,___wmul@multiplier
  4765  001582  C098  F061         	movff	_register_timer$2310+1,___wmul@multiplier+1
  4766  001586  0E00               	movlw	0
  4767  001588  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4768  00158A  0E17               	movlw	23
  4769  00158C  6F62               	movwf	___wmul@multiplicand& (0+255),b
  4770  00158E  ECCD  F01D         	call	___wmul	;wreg free
  4771  001592  0E03               	movlw	low (_tasks+3)
  4772  001594  0100               	movlb	0	; () banked
  4773  001596  2560               	addwf	?___wmul& (0+255),w,b
  4774  001598  6ED9               	movwf	fsr2l,c
  4775  00159A  0E01               	movlw	high (_tasks+3)
  4776  00159C  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  4777  00159E  6EDA               	movwf	fsr2h,c
  4778  0015A0  CFDE F07B          	movff	postinc2,??_register_timer
  4779  0015A4  CFDE F07C          	movff	postinc2,??_register_timer+1
  4780  0015A8  CFDE F07D          	movff	postinc2,??_register_timer+2
  4781  0015AC  CFDE F07E          	movff	postinc2,??_register_timer+3
  4782  0015B0  CFDE F07F          	movff	postinc2,??_register_timer+4
  4783  0015B4  CFDE F080          	movff	postinc2,??_register_timer+5
  4784  0015B8  CFDE F081          	movff	postinc2,??_register_timer+6
  4785  0015BC  CFDE F082          	movff	postinc2,??_register_timer+7
  4786  0015C0  5199               	movf	register_timer@temp_delay& (0+255),w,b
  4787  0015C2  257B               	addwf	??_register_timer& (0+255),w,b
  4788  0015C4  6F99               	movwf	register_timer@temp_delay& (0+255),b
  4789  0015C6  519A               	movf	(register_timer@temp_delay+1)& (0+255),w,b
  4790  0015C8  217C               	addwfc	(??_register_timer+1)& (0+255),w,b
  4791  0015CA  6F9A               	movwf	(register_timer@temp_delay+1)& (0+255),b
  4792  0015CC  519B               	movf	(register_timer@temp_delay+2)& (0+255),w,b
  4793  0015CE  217D               	addwfc	(??_register_timer+2)& (0+255),w,b
  4794  0015D0  6F9B               	movwf	(register_timer@temp_delay+2)& (0+255),b
  4795  0015D2  519C               	movf	(register_timer@temp_delay+3)& (0+255),w,b
  4796  0015D4  217E               	addwfc	(??_register_timer+3)& (0+255),w,b
  4797  0015D6  6F9C               	movwf	(register_timer@temp_delay+3)& (0+255),b
  4798  0015D8  519D               	movf	(register_timer@temp_delay+4)& (0+255),w,b
  4799  0015DA  217F               	addwfc	(??_register_timer+4)& (0+255),w,b
  4800  0015DC  6F9D               	movwf	(register_timer@temp_delay+4)& (0+255),b
  4801  0015DE  519E               	movf	(register_timer@temp_delay+5)& (0+255),w,b
  4802  0015E0  2180               	addwfc	(??_register_timer+5)& (0+255),w,b
  4803  0015E2  6F9E               	movwf	(register_timer@temp_delay+5)& (0+255),b
  4804  0015E4  519F               	movf	(register_timer@temp_delay+6)& (0+255),w,b
  4805  0015E6  2181               	addwfc	(??_register_timer+6)& (0+255),w,b
  4806  0015E8  6F9F               	movwf	(register_timer@temp_delay+6)& (0+255),b
  4807  0015EA  51A0               	movf	(register_timer@temp_delay+7)& (0+255),w,b
  4808  0015EC  2182               	addwfc	(??_register_timer+7)& (0+255),w,b
  4809  0015EE  6FA0               	movwf	(register_timer@temp_delay+7)& (0+255),b
  4810  0015F0                     
  4811                           ; BSR set to: 0
  4812                           ;driver.c: 90:         if (temp_delay >= delay){
  4813  0015F0  5166               	movf	register_timer@delay& (0+255),w,b
  4814  0015F2  5D99               	subwf	register_timer@temp_delay& (0+255),w,b
  4815  0015F4  5167               	movf	(register_timer@delay+1)& (0+255),w,b
  4816  0015F6  599A               	subwfb	(register_timer@temp_delay+1)& (0+255),w,b
  4817  0015F8  5168               	movf	(register_timer@delay+2)& (0+255),w,b
  4818  0015FA  599B               	subwfb	(register_timer@temp_delay+2)& (0+255),w,b
  4819  0015FC  5169               	movf	(register_timer@delay+3)& (0+255),w,b
  4820  0015FE  599C               	subwfb	(register_timer@temp_delay+3)& (0+255),w,b
  4821  001600  516A               	movf	(register_timer@delay+4)& (0+255),w,b
  4822  001602  599D               	subwfb	(register_timer@temp_delay+4)& (0+255),w,b
  4823  001604  516B               	movf	(register_timer@delay+5)& (0+255),w,b
  4824  001606  599E               	subwfb	(register_timer@temp_delay+5)& (0+255),w,b
  4825  001608  516C               	movf	(register_timer@delay+6)& (0+255),w,b
  4826  00160A  599F               	subwfb	(register_timer@temp_delay+6)& (0+255),w,b
  4827  00160C  516D               	movf	(register_timer@delay+7)& (0+255),w,b
  4828  00160E  59A0               	subwfb	(register_timer@temp_delay+7)& (0+255),w,b
  4829  001610  A0D8               	btfss	status,0,c
  4830  001612  EF0D  F00B         	goto	u1451
  4831  001616  EF0F  F00B         	goto	u1450
  4832  00161A                     u1451:
  4833  00161A  EF78  F00C         	goto	l3259
  4834  00161E                     u1450:
  4835  00161E                     
  4836                           ; BSR set to: 0
  4837                           ;driver.c: 91:             temp_delay = temp_delay - tasks[tasks[temp_index].next].delay
      +                          ;
  4838  00161E  C0A1  F060         	movff	register_timer@temp_index,___wmul@multiplier
  4839  001622  C0A2  F061         	movff	register_timer@temp_index+1,___wmul@multiplier+1
  4840  001626  0E00               	movlw	0
  4841  001628  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4842  00162A  0E17               	movlw	23
  4843  00162C  6F62               	movwf	___wmul@multiplicand& (0+255),b
  4844  00162E  ECCD  F01D         	call	___wmul	;wreg free
  4845  001632  0E15               	movlw	low (_tasks+21)
  4846  001634  0100               	movlb	0	; () banked
  4847  001636  2560               	addwf	?___wmul& (0+255),w,b
  4848  001638  6ED9               	movwf	fsr2l,c
  4849  00163A  0E01               	movlw	high (_tasks+21)
  4850  00163C  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  4851  00163E  6EDA               	movwf	fsr2h,c
  4852  001640  CFDE F097          	movff	postinc2,_register_timer$2310
  4853  001644  CFDD F098          	movff	postdec2,_register_timer$2310+1
  4854                           
  4855                           ;driver.c: 91:             temp_delay = temp_delay - tasks[tasks[temp_index].next].delay
      +                          ;
  4856  001648  C097  F060         	movff	_register_timer$2310,___wmul@multiplier
  4857  00164C  C098  F061         	movff	_register_timer$2310+1,___wmul@multiplier+1
  4858  001650  0E00               	movlw	0
  4859  001652  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4860  001654  0E17               	movlw	23
  4861  001656  6F62               	movwf	___wmul@multiplicand& (0+255),b
  4862  001658  ECCD  F01D         	call	___wmul	;wreg free
  4863  00165C  0E03               	movlw	low (_tasks+3)
  4864  00165E  0100               	movlb	0	; () banked
  4865  001660  2560               	addwf	?___wmul& (0+255),w,b
  4866  001662  6ED9               	movwf	fsr2l,c
  4867  001664  0E01               	movlw	high (_tasks+3)
  4868  001666  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  4869  001668  6EDA               	movwf	fsr2h,c
  4870  00166A  CFDE F07B          	movff	postinc2,??_register_timer
  4871  00166E  CFDE F07C          	movff	postinc2,??_register_timer+1
  4872  001672  CFDE F07D          	movff	postinc2,??_register_timer+2
  4873  001676  CFDE F07E          	movff	postinc2,??_register_timer+3
  4874  00167A  CFDE F07F          	movff	postinc2,??_register_timer+4
  4875  00167E  CFDE F080          	movff	postinc2,??_register_timer+5
  4876  001682  CFDE F081          	movff	postinc2,??_register_timer+6
  4877  001686  CFDE F082          	movff	postinc2,??_register_timer+7
  4878  00168A  517B               	movf	??_register_timer& (0+255),w,b
  4879  00168C  5D99               	subwf	register_timer@temp_delay& (0+255),w,b
  4880  00168E  6F99               	movwf	register_timer@temp_delay& (0+255),b
  4881  001690  517C               	movf	(??_register_timer+1)& (0+255),w,b
  4882  001692  599A               	subwfb	(register_timer@temp_delay+1)& (0+255),w,b
  4883  001694  6F9A               	movwf	(register_timer@temp_delay+1)& (0+255),b
  4884  001696  517D               	movf	(??_register_timer+2)& (0+255),w,b
  4885  001698  599B               	subwfb	(register_timer@temp_delay+2)& (0+255),w,b
  4886  00169A  6F9B               	movwf	(register_timer@temp_delay+2)& (0+255),b
  4887  00169C  517E               	movf	(??_register_timer+3)& (0+255),w,b
  4888  00169E  599C               	subwfb	(register_timer@temp_delay+3)& (0+255),w,b
  4889  0016A0  6F9C               	movwf	(register_timer@temp_delay+3)& (0+255),b
  4890  0016A2  517F               	movf	(??_register_timer+4)& (0+255),w,b
  4891  0016A4  599D               	subwfb	(register_timer@temp_delay+4)& (0+255),w,b
  4892  0016A6  6F9D               	movwf	(register_timer@temp_delay+4)& (0+255),b
  4893  0016A8  5180               	movf	(??_register_timer+5)& (0+255),w,b
  4894  0016AA  599E               	subwfb	(register_timer@temp_delay+5)& (0+255),w,b
  4895  0016AC  6F9E               	movwf	(register_timer@temp_delay+5)& (0+255),b
  4896  0016AE  5181               	movf	(??_register_timer+6)& (0+255),w,b
  4897  0016B0  599F               	subwfb	(register_timer@temp_delay+6)& (0+255),w,b
  4898  0016B2  6F9F               	movwf	(register_timer@temp_delay+6)& (0+255),b
  4899  0016B4  5182               	movf	(??_register_timer+7)& (0+255),w,b
  4900  0016B6  59A0               	subwfb	(register_timer@temp_delay+7)& (0+255),w,b
  4901  0016B8  6FA0               	movwf	(register_timer@temp_delay+7)& (0+255),b
  4902                           
  4903                           ;driver.c: 92:             tasks[NUMBER_EXIST].delay = delay - temp_delay;
  4904  0016BA  5199               	movf	register_timer@temp_delay& (0+255),w,b
  4905  0016BC  5D66               	subwf	register_timer@delay& (0+255),w,b
  4906  0016BE  6F7B               	movwf	??_register_timer& (0+255),b
  4907  0016C0  519A               	movf	(register_timer@temp_delay+1)& (0+255),w,b
  4908  0016C2  5967               	subwfb	(register_timer@delay+1)& (0+255),w,b
  4909  0016C4  6F7C               	movwf	(??_register_timer+1)& (0+255),b
  4910  0016C6  519B               	movf	(register_timer@temp_delay+2)& (0+255),w,b
  4911  0016C8  5968               	subwfb	(register_timer@delay+2)& (0+255),w,b
  4912  0016CA  6F7D               	movwf	(??_register_timer+2)& (0+255),b
  4913  0016CC  519C               	movf	(register_timer@temp_delay+3)& (0+255),w,b
  4914  0016CE  5969               	subwfb	(register_timer@delay+3)& (0+255),w,b
  4915  0016D0  6F7E               	movwf	(??_register_timer+3)& (0+255),b
  4916  0016D2  519D               	movf	(register_timer@temp_delay+4)& (0+255),w,b
  4917  0016D4  596A               	subwfb	(register_timer@delay+4)& (0+255),w,b
  4918  0016D6  6F7F               	movwf	(??_register_timer+4)& (0+255),b
  4919  0016D8  519E               	movf	(register_timer@temp_delay+5)& (0+255),w,b
  4920  0016DA  596B               	subwfb	(register_timer@delay+5)& (0+255),w,b
  4921  0016DC  6F80               	movwf	(??_register_timer+5)& (0+255),b
  4922  0016DE  519F               	movf	(register_timer@temp_delay+6)& (0+255),w,b
  4923  0016E0  596C               	subwfb	(register_timer@delay+6)& (0+255),w,b
  4924  0016E2  6F81               	movwf	(??_register_timer+6)& (0+255),b
  4925  0016E4  51A0               	movf	(register_timer@temp_delay+7)& (0+255),w,b
  4926  0016E6  596D               	subwfb	(register_timer@delay+7)& (0+255),w,b
  4927  0016E8  6F82               	movwf	(??_register_timer+7)& (0+255),b
  4928  0016EA  C0CD  F060         	movff	_NUMBER_EXIST,___wmul@multiplier
  4929  0016EE  C0CE  F061         	movff	_NUMBER_EXIST+1,___wmul@multiplier+1
  4930  0016F2  0E00               	movlw	0
  4931  0016F4  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4932  0016F6  0E17               	movlw	23
  4933  0016F8  6F62               	movwf	___wmul@multiplicand& (0+255),b
  4934  0016FA  ECCD  F01D         	call	___wmul	;wreg free
  4935  0016FE  0E03               	movlw	low (_tasks+3)
  4936  001700  0100               	movlb	0	; () banked
  4937  001702  2560               	addwf	?___wmul& (0+255),w,b
  4938  001704  6ED9               	movwf	fsr2l,c
  4939  001706  0E01               	movlw	high (_tasks+3)
  4940  001708  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  4941  00170A  6EDA               	movwf	fsr2h,c
  4942  00170C  C07B  FFDE         	movff	??_register_timer,postinc2
  4943  001710  C07C  FFDE         	movff	??_register_timer+1,postinc2
  4944  001714  C07D  FFDE         	movff	??_register_timer+2,postinc2
  4945  001718  C07E  FFDE         	movff	??_register_timer+3,postinc2
  4946  00171C  C07F  FFDE         	movff	??_register_timer+4,postinc2
  4947  001720  C080  FFDE         	movff	??_register_timer+5,postinc2
  4948  001724  C081  FFDE         	movff	??_register_timer+6,postinc2
  4949  001728  C082  FFDE         	movff	??_register_timer+7,postinc2
  4950  00172C                     
  4951                           ; BSR set to: 0
  4952                           ;driver.c: 93:             tasks[NUMBER_EXIST].next = tasks[temp_index].next;
  4953  00172C  C0A1  F060         	movff	register_timer@temp_index,___wmul@multiplier
  4954  001730  C0A2  F061         	movff	register_timer@temp_index+1,___wmul@multiplier+1
  4955  001734  0E00               	movlw	0
  4956  001736  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4957  001738  0E17               	movlw	23
  4958  00173A  6F62               	movwf	___wmul@multiplicand& (0+255),b
  4959  00173C  ECCD  F01D         	call	___wmul	;wreg free
  4960  001740  0E15               	movlw	low (_tasks+21)
  4961  001742  0100               	movlb	0	; () banked
  4962  001744  2560               	addwf	?___wmul& (0+255),w,b
  4963  001746  6ED9               	movwf	fsr2l,c
  4964  001748  0E01               	movlw	high (_tasks+21)
  4965  00174A  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  4966  00174C  6EDA               	movwf	fsr2h,c
  4967  00174E  C0CD  F060         	movff	_NUMBER_EXIST,___wmul@multiplier
  4968  001752  C0CE  F061         	movff	_NUMBER_EXIST+1,___wmul@multiplier+1
  4969  001756  0E00               	movlw	0
  4970  001758  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4971  00175A  0E17               	movlw	23
  4972  00175C  6F62               	movwf	___wmul@multiplicand& (0+255),b
  4973  00175E  ECCD  F01D         	call	___wmul	;wreg free
  4974  001762  0E15               	movlw	low (_tasks+21)
  4975  001764  0100               	movlb	0	; () banked
  4976  001766  2560               	addwf	?___wmul& (0+255),w,b
  4977  001768  6EE1               	movwf	fsr1l,c
  4978  00176A  0E01               	movlw	high (_tasks+21)
  4979  00176C  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  4980  00176E  6EE2               	movwf	fsr1h,c
  4981  001770  CFDE FFE6          	movff	postinc2,postinc1
  4982  001774  CFDD FFE5          	movff	postdec2,postdec1
  4983  001778                     
  4984                           ; BSR set to: 0
  4985                           ;driver.c: 94:             tasks[tasks[NUMBER_EXIST].next].delay = tasks[tasks[NUMBER_EX
      +                          IST].next].delay - tasks[NUMBER_EXIST].delay;
  4986  001778  C0CD  F060         	movff	_NUMBER_EXIST,___wmul@multiplier
  4987  00177C  C0CE  F061         	movff	_NUMBER_EXIST+1,___wmul@multiplier+1
  4988  001780  0E00               	movlw	0
  4989  001782  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4990  001784  0E17               	movlw	23
  4991  001786  6F62               	movwf	___wmul@multiplicand& (0+255),b
  4992  001788  ECCD  F01D         	call	___wmul	;wreg free
  4993  00178C  0E15               	movlw	low (_tasks+21)
  4994  00178E  0100               	movlb	0	; () banked
  4995  001790  2560               	addwf	?___wmul& (0+255),w,b
  4996  001792  6ED9               	movwf	fsr2l,c
  4997  001794  0E01               	movlw	high (_tasks+21)
  4998  001796  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  4999  001798  6EDA               	movwf	fsr2h,c
  5000  00179A  CFDE F097          	movff	postinc2,_register_timer$2310
  5001  00179E  CFDD F098          	movff	postdec2,_register_timer$2310+1
  5002  0017A2                     
  5003                           ; BSR set to: 0
  5004                           ;driver.c: 94:             tasks[tasks[NUMBER_EXIST].next].delay = tasks[tasks[NUMBER_EX
      +                          IST].next].delay - tasks[NUMBER_EXIST].delay;
  5005  0017A2  C0CD  F060         	movff	_NUMBER_EXIST,___wmul@multiplier
  5006  0017A6  C0CE  F061         	movff	_NUMBER_EXIST+1,___wmul@multiplier+1
  5007  0017AA  0E00               	movlw	0
  5008  0017AC  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  5009  0017AE  0E17               	movlw	23
  5010  0017B0  6F62               	movwf	___wmul@multiplicand& (0+255),b
  5011  0017B2  ECCD  F01D         	call	___wmul	;wreg free
  5012  0017B6  0E15               	movlw	low (_tasks+21)
  5013  0017B8  0100               	movlb	0	; () banked
  5014  0017BA  2560               	addwf	?___wmul& (0+255),w,b
  5015  0017BC  6ED9               	movwf	fsr2l,c
  5016  0017BE  0E01               	movlw	high (_tasks+21)
  5017  0017C0  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  5018  0017C2  6EDA               	movwf	fsr2h,c
  5019  0017C4  CFDE F093          	movff	postinc2,_register_timer$2311
  5020  0017C8  CFDD F094          	movff	postdec2,_register_timer$2311+1
  5021  0017CC                     
  5022                           ; BSR set to: 0
  5023                           ;driver.c: 94:             tasks[tasks[NUMBER_EXIST].next].delay = tasks[tasks[NUMBER_EX
      +                          IST].next].delay - tasks[NUMBER_EXIST].delay;
  5024  0017CC  C0CD  F060         	movff	_NUMBER_EXIST,___wmul@multiplier
  5025  0017D0  C0CE  F061         	movff	_NUMBER_EXIST+1,___wmul@multiplier+1
  5026  0017D4  0E00               	movlw	0
  5027  0017D6  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  5028  0017D8  0E17               	movlw	23
  5029  0017DA  6F62               	movwf	___wmul@multiplicand& (0+255),b
  5030  0017DC  ECCD  F01D         	call	___wmul	;wreg free
  5031  0017E0  0E03               	movlw	low (_tasks+3)
  5032  0017E2  0100               	movlb	0	; () banked
  5033  0017E4  2560               	addwf	?___wmul& (0+255),w,b
  5034  0017E6  6ED9               	movwf	fsr2l,c
  5035  0017E8  0E01               	movlw	high (_tasks+3)
  5036  0017EA  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  5037  0017EC  6EDA               	movwf	fsr2h,c
  5038  0017EE  CFDE F07B          	movff	postinc2,??_register_timer
  5039  0017F2  CFDE F07C          	movff	postinc2,??_register_timer+1
  5040  0017F6  CFDE F07D          	movff	postinc2,??_register_timer+2
  5041  0017FA  CFDE F07E          	movff	postinc2,??_register_timer+3
  5042  0017FE  CFDE F07F          	movff	postinc2,??_register_timer+4
  5043  001802  CFDE F080          	movff	postinc2,??_register_timer+5
  5044  001806  CFDE F081          	movff	postinc2,??_register_timer+6
  5045  00180A  CFDE F082          	movff	postinc2,??_register_timer+7
  5046  00180E  C097  F060         	movff	_register_timer$2310,___wmul@multiplier
  5047  001812  C098  F061         	movff	_register_timer$2310+1,___wmul@multiplier+1
  5048  001816  0E00               	movlw	0
  5049  001818  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  5050  00181A  0E17               	movlw	23
  5051  00181C  6F62               	movwf	___wmul@multiplicand& (0+255),b
  5052  00181E  ECCD  F01D         	call	___wmul	;wreg free
  5053  001822  0E03               	movlw	low (_tasks+3)
  5054  001824  0100               	movlb	0	; () banked
  5055  001826  2560               	addwf	?___wmul& (0+255),w,b
  5056  001828  6ED9               	movwf	fsr2l,c
  5057  00182A  0E01               	movlw	high (_tasks+3)
  5058  00182C  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  5059  00182E  6EDA               	movwf	fsr2h,c
  5060  001830  CFDE F083          	movff	postinc2,??_register_timer+8
  5061  001834  CFDE F084          	movff	postinc2,??_register_timer+9
  5062  001838  CFDE F085          	movff	postinc2,??_register_timer+10
  5063  00183C  CFDE F086          	movff	postinc2,??_register_timer+11
  5064  001840  CFDE F087          	movff	postinc2,??_register_timer+12
  5065  001844  CFDE F088          	movff	postinc2,??_register_timer+13
  5066  001848  CFDE F089          	movff	postinc2,??_register_timer+14
  5067  00184C  CFDE F08A          	movff	postinc2,??_register_timer+15
  5068  001850  517B               	movf	??_register_timer& (0+255),w,b
  5069  001852  5D83               	subwf	(??_register_timer+8)& (0+255),w,b
  5070  001854  6F8B               	movwf	(??_register_timer+16)& (0+255),b
  5071  001856  517C               	movf	(??_register_timer+1)& (0+255),w,b
  5072  001858  5984               	subwfb	(??_register_timer+9)& (0+255),w,b
  5073  00185A  6F8C               	movwf	(??_register_timer+17)& (0+255),b
  5074  00185C  517D               	movf	(??_register_timer+2)& (0+255),w,b
  5075  00185E  5985               	subwfb	(??_register_timer+10)& (0+255),w,b
  5076  001860  6F8D               	movwf	(??_register_timer+18)& (0+255),b
  5077  001862  517E               	movf	(??_register_timer+3)& (0+255),w,b
  5078  001864  5986               	subwfb	(??_register_timer+11)& (0+255),w,b
  5079  001866  6F8E               	movwf	(??_register_timer+19)& (0+255),b
  5080  001868  517F               	movf	(??_register_timer+4)& (0+255),w,b
  5081  00186A  5987               	subwfb	(??_register_timer+12)& (0+255),w,b
  5082  00186C  6F8F               	movwf	(??_register_timer+20)& (0+255),b
  5083  00186E  5180               	movf	(??_register_timer+5)& (0+255),w,b
  5084  001870  5988               	subwfb	(??_register_timer+13)& (0+255),w,b
  5085  001872  6F90               	movwf	(??_register_timer+21)& (0+255),b
  5086  001874  5181               	movf	(??_register_timer+6)& (0+255),w,b
  5087  001876  5989               	subwfb	(??_register_timer+14)& (0+255),w,b
  5088  001878  6F91               	movwf	(??_register_timer+22)& (0+255),b
  5089  00187A  5182               	movf	(??_register_timer+7)& (0+255),w,b
  5090  00187C  598A               	subwfb	(??_register_timer+15)& (0+255),w,b
  5091  00187E  6F92               	movwf	(??_register_timer+23)& (0+255),b
  5092  001880  C093  F060         	movff	_register_timer$2311,___wmul@multiplier
  5093  001884  C094  F061         	movff	_register_timer$2311+1,___wmul@multiplier+1
  5094  001888  0E00               	movlw	0
  5095  00188A  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  5096  00188C  0E17               	movlw	23
  5097  00188E  6F62               	movwf	___wmul@multiplicand& (0+255),b
  5098  001890  ECCD  F01D         	call	___wmul	;wreg free
  5099  001894  0E03               	movlw	low (_tasks+3)
  5100  001896  0100               	movlb	0	; () banked
  5101  001898  2560               	addwf	?___wmul& (0+255),w,b
  5102  00189A  6ED9               	movwf	fsr2l,c
  5103  00189C  0E01               	movlw	high (_tasks+3)
  5104  00189E  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  5105  0018A0  6EDA               	movwf	fsr2h,c
  5106  0018A2  C08B  FFDE         	movff	??_register_timer+16,postinc2
  5107  0018A6  C08C  FFDE         	movff	??_register_timer+17,postinc2
  5108  0018AA  C08D  FFDE         	movff	??_register_timer+18,postinc2
  5109  0018AE  C08E  FFDE         	movff	??_register_timer+19,postinc2
  5110  0018B2  C08F  FFDE         	movff	??_register_timer+20,postinc2
  5111  0018B6  C090  FFDE         	movff	??_register_timer+21,postinc2
  5112  0018BA  C091  FFDE         	movff	??_register_timer+22,postinc2
  5113  0018BE  C092  FFDE         	movff	??_register_timer+23,postinc2
  5114  0018C2                     
  5115                           ; BSR set to: 0
  5116                           ;driver.c: 95:             tasks[temp_index].next = NUMBER_EXIST;
  5117  0018C2  C0A1  F060         	movff	register_timer@temp_index,___wmul@multiplier
  5118  0018C6  C0A2  F061         	movff	register_timer@temp_index+1,___wmul@multiplier+1
  5119  0018CA  0E00               	movlw	0
  5120  0018CC  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  5121  0018CE  0E17               	movlw	23
  5122  0018D0  6F62               	movwf	___wmul@multiplicand& (0+255),b
  5123  0018D2  ECCD  F01D         	call	___wmul	;wreg free
  5124  0018D6  0E15               	movlw	low (_tasks+21)
  5125  0018D8  0100               	movlb	0	; () banked
  5126  0018DA  2560               	addwf	?___wmul& (0+255),w,b
  5127  0018DC  6ED9               	movwf	fsr2l,c
  5128  0018DE  0E01               	movlw	high (_tasks+21)
  5129  0018E0  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  5130  0018E2  6EDA               	movwf	fsr2h,c
  5131  0018E4  C0CD  FFDE         	movff	_NUMBER_EXIST,postinc2
  5132  0018E8  C0CE  FFDD         	movff	_NUMBER_EXIST+1,postdec2
  5133  0018EC  EF2C  F009         	goto	l3217
  5134  0018F0                     l3259:
  5135                           
  5136                           ; BSR set to: 0
  5137                           ;driver.c: 98:         temp_index = tasks[temp_index].next;
  5138  0018F0  C0A1  F060         	movff	register_timer@temp_index,___wmul@multiplier
  5139  0018F4  C0A2  F061         	movff	register_timer@temp_index+1,___wmul@multiplier+1
  5140  0018F8  0E00               	movlw	0
  5141  0018FA  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  5142  0018FC  0E17               	movlw	23
  5143  0018FE  6F62               	movwf	___wmul@multiplicand& (0+255),b
  5144  001900  ECCD  F01D         	call	___wmul	;wreg free
  5145  001904  0E15               	movlw	low (_tasks+21)
  5146  001906  0100               	movlb	0	; () banked
  5147  001908  2560               	addwf	?___wmul& (0+255),w,b
  5148  00190A  6ED9               	movwf	fsr2l,c
  5149  00190C  0E01               	movlw	high (_tasks+21)
  5150  00190E  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  5151  001910  6EDA               	movwf	fsr2h,c
  5152  001912  CFDE F0A1          	movff	postinc2,register_timer@temp_index
  5153  001916  CFDD F0A2          	movff	postdec2,register_timer@temp_index+1
  5154  00191A  EF2A  F00A         	goto	l358
  5155  00191E                     l351:
  5156                           
  5157                           ; BSR set to: 0
  5158  00191E  0012               	return		;funcret
  5159  001920                     __end_of_register_timer:
  5160                           	opt callstack 0
  5161                           
  5162 ;; *************** function ___wmul *****************
  5163 ;; Defined at:
  5164 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\Umul16.c"
  5165 ;; Parameters:    Size  Location     Type
  5166 ;;  multiplier      2    0[BANK0 ] unsigned int 
  5167 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  5168 ;; Auto vars:     Size  Location     Type
  5169 ;;  product         2    4[BANK0 ] unsigned int 
  5170 ;; Return value:  Size  Location     Type
  5171 ;;                  2    0[BANK0 ] unsigned int 
  5172 ;; Registers used:
  5173 ;;		wreg, status,2, status,0, prodl, prodh
  5174 ;; Tracked objects:
  5175 ;;		On entry : 0/0
  5176 ;;		On exit  : 0/0
  5177 ;;		Unchanged: 0/0
  5178 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5179 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5180 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5181 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5182 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5183 ;;Total ram usage:        6 bytes
  5184 ;; Hardware stack levels used:    1
  5185 ;; Hardware stack levels required when called:    4
  5186 ;; This function calls:
  5187 ;;		Nothing
  5188 ;; This function is called by:
  5189 ;;		_register_timer
  5190 ;;		_remove_timer
  5191 ;;		_dispatch
  5192 ;;		_FSM
  5193 ;; This function uses a non-reentrant model
  5194 ;;
  5195                           
  5196                           	psect	text24
  5197  003B9A                     __ptext24:
  5198                           	opt callstack 0
  5199  003B9A                     ___wmul:
  5200                           	opt callstack 24
  5201  003B9A  0100               	movlb	0	; () banked
  5202  003B9C  5160               	movf	___wmul@multiplier& (0+255),w,b
  5203  003B9E  0362               	mulwf	___wmul@multiplicand& (0+255),b
  5204  003BA0  CFF3 F064          	movff	prodl,___wmul@product
  5205  003BA4  CFF4 F065          	movff	prodh,___wmul@product+1
  5206  003BA8  5160               	movf	___wmul@multiplier& (0+255),w,b
  5207  003BAA  0363               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  5208  003BAC  50F3               	movf	243,w,c
  5209  003BAE  2765               	addwf	(___wmul@product+1)& (0+255),f,b
  5210  003BB0  5161               	movf	(___wmul@multiplier+1)& (0+255),w,b
  5211  003BB2  0362               	mulwf	___wmul@multiplicand& (0+255),b
  5212  003BB4  50F3               	movf	243,w,c
  5213  003BB6  2765               	addwf	(___wmul@product+1)& (0+255),f,b
  5214  003BB8                     
  5215                           ; BSR set to: 0
  5216  003BB8  C064  F060         	movff	___wmul@product,?___wmul
  5217  003BBC  C065  F061         	movff	___wmul@product+1,?___wmul+1
  5218  003BC0                     
  5219                           ; BSR set to: 0
  5220  003BC0  0012               	return		;funcret
  5221  003BC2                     __end_of___wmul:
  5222                           	opt callstack 0
  5223                           
  5224 ;; *************** function _increaseButton *****************
  5225 ;; Defined at:
  5226 ;;		line 90 in file "button.c"
  5227 ;; Parameters:    Size  Location     Type
  5228 ;;		None
  5229 ;; Auto vars:     Size  Location     Type
  5230 ;;		None
  5231 ;; Return value:  Size  Location     Type
  5232 ;;                  1    wreg      void 
  5233 ;; Registers used:
  5234 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5235 ;; Tracked objects:
  5236 ;;		On entry : 0/0
  5237 ;;		On exit  : 0/0
  5238 ;;		Unchanged: 0/0
  5239 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5240 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5241 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5242 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5243 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5244 ;;Total ram usage:        2 bytes
  5245 ;; Hardware stack levels used:    1
  5246 ;; Hardware stack levels required when called:    9
  5247 ;; This function calls:
  5248 ;;		___awmod
  5249 ;;		_display_state
  5250 ;; This function is called by:
  5251 ;;		_FSM
  5252 ;; This function uses a non-reentrant model
  5253 ;;
  5254                           
  5255                           	psect	text25
  5256  002858                     __ptext25:
  5257                           	opt callstack 0
  5258  002858                     _increaseButton:
  5259                           	opt callstack 20
  5260  002858                     
  5261                           ;button.c: 91:     switch(BUTTON_INC_STATE){
  5262  002858  EF15  F015         	goto	l3493
  5263  00285C                     l3441:
  5264                           
  5265                           ; BSR set to: 0
  5266                           ;button.c: 93:             if (button_B == 1) {
  5267  00285C  05DD               	decf	_button_B& (0+255),w,b
  5268  00285E  A4D8               	btfss	status,2,c
  5269  002860  EF34  F014         	goto	u1641
  5270  002864  EF36  F014         	goto	u1640
  5271  002868                     u1641:
  5272  002868  EF2F  F015         	goto	l527
  5273  00286C                     u1640:
  5274  00286C                     
  5275                           ; BSR set to: 0
  5276                           ;button.c: 94:                 BUTTON_INC_STATE = 2;
  5277  00286C  0E02               	movlw	2
  5278  00286E  6E5B               	movwf	_BUTTON_INC_STATE^0,c
  5279  002870  EF2F  F015         	goto	l527
  5280  002874                     l3445:
  5281                           
  5282                           ; BSR set to: 0
  5283                           ;button.c: 98:             if (button_B == 2){
  5284  002874  0E02               	movlw	2
  5285  002876  19DD               	xorwf	_button_B& (0+255),w,b
  5286  002878  A4D8               	btfss	status,2,c
  5287  00287A  EF41  F014         	goto	u1651
  5288  00287E  EF43  F014         	goto	u1650
  5289  002882                     u1651:
  5290  002882  EF99  F014         	goto	l3463
  5291  002886                     u1650:
  5292  002886  EF78  F014         	goto	l3457
  5293  00288A                     l3449:
  5294                           
  5295                           ; BSR set to: 0
  5296                           ;button.c: 101:                         TIME_SWAP= (TIME_SWAP+1)%21;
  5297  00288A  0E01               	movlw	1
  5298  00288C  25E1               	addwf	_TIME_SWAP& (0+255),w,b
  5299  00288E  6F60               	movwf	___awmod@dividend& (0+255),b
  5300  002890  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  5301  002892  0E00               	movlw	0
  5302  002894  2361               	addwfc	(___awmod@dividend+1)& (0+255),f,b
  5303  002896  0E00               	movlw	0
  5304  002898  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  5305  00289A  0E15               	movlw	21
  5306  00289C  6F62               	movwf	___awmod@divisor& (0+255),b
  5307  00289E  EC55  F01B         	call	___awmod	;wreg free
  5308  0028A2  0100               	movlb	0	; () banked
  5309  0028A4  5160               	movf	?___awmod& (0+255),w,b
  5310  0028A6  6FE1               	movwf	_TIME_SWAP& (0+255),b
  5311                           
  5312                           ;button.c: 102:                         break;
  5313  0028A8  EF91  F014         	goto	l3459
  5314  0028AC                     l3451:
  5315                           
  5316                           ; BSR set to: 0
  5317                           ;button.c: 104:                         TEMP_SWAP = (TEMP_SWAP+1)%50;
  5318  0028AC  0E01               	movlw	1
  5319  0028AE  25E0               	addwf	_TEMP_SWAP& (0+255),w,b
  5320  0028B0  6F60               	movwf	___awmod@dividend& (0+255),b
  5321  0028B2  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  5322  0028B4  0E00               	movlw	0
  5323  0028B6  2361               	addwfc	(___awmod@dividend+1)& (0+255),f,b
  5324  0028B8  0E00               	movlw	0
  5325  0028BA  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  5326  0028BC  0E32               	movlw	50
  5327  0028BE  6F62               	movwf	___awmod@divisor& (0+255),b
  5328  0028C0  EC55  F01B         	call	___awmod	;wreg free
  5329  0028C4  0100               	movlb	0	; () banked
  5330  0028C6  5160               	movf	?___awmod& (0+255),w,b
  5331  0028C8  6FE0               	movwf	_TEMP_SWAP& (0+255),b
  5332                           
  5333                           ;button.c: 105:                         break;
  5334  0028CA  EF91  F014         	goto	l3459
  5335  0028CE                     l3453:
  5336                           
  5337                           ; BSR set to: 0
  5338                           ;button.c: 107:                         HUMI_SWAP = (HUMI_SWAP+1)%100;
  5339  0028CE  0E01               	movlw	1
  5340  0028D0  245A               	addwf	_HUMI_SWAP^0,w,c
  5341  0028D2  6F60               	movwf	___awmod@dividend& (0+255),b
  5342  0028D4  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  5343  0028D6  0E00               	movlw	0
  5344  0028D8  2361               	addwfc	(___awmod@dividend+1)& (0+255),f,b
  5345  0028DA  0E00               	movlw	0
  5346  0028DC  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  5347  0028DE  0E64               	movlw	100
  5348  0028E0  6F62               	movwf	___awmod@divisor& (0+255),b
  5349  0028E2  EC55  F01B         	call	___awmod	;wreg free
  5350  0028E6  0100               	movlb	0	; () banked
  5351  0028E8  5160               	movf	?___awmod& (0+255),w,b
  5352  0028EA  6E5A               	movwf	_HUMI_SWAP^0,c
  5353                           
  5354                           ;button.c: 108:                         break;
  5355  0028EC  EF91  F014         	goto	l3459
  5356  0028F0                     l3457:
  5357                           
  5358                           ; BSR set to: 0
  5359  0028F0  51DB               	movf	_setting& (0+255),w,b
  5360  0028F2  6F6C               	movwf	??_increaseButton& (0+255),b
  5361  0028F4  6B6D               	clrf	(??_increaseButton+1)& (0+255),b
  5362                           
  5363                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5364                           ; Switch size 1, requested type "simple"
  5365                           ; Number of cases is 1, Range of values is 0 to 0
  5366                           ; switch strategies available:
  5367                           ; Name         Instructions Cycles
  5368                           ; simple_byte            4     3 (average)
  5369                           ;	Chosen strategy is simple_byte
  5370  0028F6  516D               	movf	(??_increaseButton+1)& (0+255),w,b
  5371  0028F8  0A00               	xorlw	0	; case 0
  5372  0028FA  B4D8               	btfsc	status,2,c
  5373  0028FC  EF82  F014         	goto	l4017
  5374  002900  EF91  F014         	goto	l3459
  5375  002904                     l4017:
  5376                           
  5377                           ; BSR set to: 0
  5378                           ; Switch size 1, requested type "simple"
  5379                           ; Number of cases is 3, Range of values is 0 to 2
  5380                           ; switch strategies available:
  5381                           ; Name         Instructions Cycles
  5382                           ; simple_byte           10     6 (average)
  5383                           ;	Chosen strategy is simple_byte
  5384  002904  516C               	movf	??_increaseButton& (0+255),w,b
  5385  002906  0A00               	xorlw	0	; case 0
  5386  002908  B4D8               	btfsc	status,2,c
  5387  00290A  EF45  F014         	goto	l3449
  5388  00290E  0A01               	xorlw	1	; case 1
  5389  002910  B4D8               	btfsc	status,2,c
  5390  002912  EF56  F014         	goto	l3451
  5391  002916  0A03               	xorlw	3	; case 2
  5392  002918  B4D8               	btfsc	status,2,c
  5393  00291A  EF67  F014         	goto	l3453
  5394  00291E  EF91  F014         	goto	l3459
  5395  002922                     l3459:
  5396                           
  5397                           ; BSR set to: 0
  5398                           ;button.c: 110:                 display_state(5);
  5399  002922  0E00               	movlw	0
  5400  002924  6F69               	movwf	(display_state@state+1)& (0+255),b
  5401  002926  0E05               	movlw	5
  5402  002928  6F68               	movwf	display_state@state& (0+255),b
  5403  00292A  ECA7  F012         	call	_display_state	;wreg free
  5404  00292E                     
  5405                           ;button.c: 111:                 BUTTON_INC_STATE = 1;
  5406  00292E  0E01               	movlw	1
  5407  002930  6E5B               	movwf	_BUTTON_INC_STATE^0,c
  5408  002932                     l3463:
  5409                           
  5410                           ;button.c: 113:             if (hold_but_B >= 150){
  5411  002932  0E95               	movlw	149
  5412  002934  0100               	movlb	0	; () banked
  5413  002936  65DC               	cpfsgt	_hold_but_B& (0+255),b
  5414  002938  EFA0  F014         	goto	u1661
  5415  00293C  EFA2  F014         	goto	u1660
  5416  002940                     u1661:
  5417  002940  EF2F  F015         	goto	l527
  5418  002944                     u1660:
  5419  002944                     
  5420                           ; BSR set to: 0
  5421                           ;button.c: 114:                 hold_but_B = 0;
  5422  002944  0E00               	movlw	0
  5423  002946  6FDC               	movwf	_hold_but_B& (0+255),b
  5424  002948                     
  5425                           ; BSR set to: 0
  5426                           ;button.c: 115:                 BUTTON_INC_STATE++;
  5427  002948  2A5B               	incf	_BUTTON_INC_STATE^0,f,c
  5428  00294A  EF2F  F015         	goto	l527
  5429  00294E                     l3469:
  5430                           
  5431                           ; BSR set to: 0
  5432                           ;button.c: 119:             if (button_B == 2){
  5433  00294E  0E02               	movlw	2
  5434  002950  19DD               	xorwf	_button_B& (0+255),w,b
  5435  002952  A4D8               	btfss	status,2,c
  5436  002954  EFAE  F014         	goto	u1671
  5437  002958  EFB0  F014         	goto	u1670
  5438  00295C                     u1671:
  5439  00295C  EFB4  F014         	goto	l3473
  5440  002960                     u1670:
  5441  002960                     
  5442                           ; BSR set to: 0
  5443                           ;button.c: 120:                 BUTTON_INC_STATE = 1;
  5444  002960  0E01               	movlw	1
  5445  002962  6E5B               	movwf	_BUTTON_INC_STATE^0,c
  5446                           
  5447                           ;button.c: 121:                 hold_but_B = 0;
  5448  002964  0E00               	movlw	0
  5449  002966  6FDC               	movwf	_hold_but_B& (0+255),b
  5450  002968                     l3473:
  5451                           
  5452                           ; BSR set to: 0
  5453                           ;button.c: 123:             if (hold_but_B >= 20 ){
  5454  002968  0E13               	movlw	19
  5455  00296A  65DC               	cpfsgt	_hold_but_B& (0+255),b
  5456  00296C  EFBA  F014         	goto	u1681
  5457  002970  EFBC  F014         	goto	u1680
  5458  002974                     u1681:
  5459  002974  EF2F  F015         	goto	l527
  5460  002978                     u1680:
  5461  002978  EFF1  F014         	goto	l3485
  5462  00297C                     l3477:
  5463                           
  5464                           ; BSR set to: 0
  5465                           ;button.c: 126:                         TIME_SWAP= (TIME_SWAP+1)%21;
  5466  00297C  0E01               	movlw	1
  5467  00297E  25E1               	addwf	_TIME_SWAP& (0+255),w,b
  5468  002980  6F60               	movwf	___awmod@dividend& (0+255),b
  5469  002982  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  5470  002984  0E00               	movlw	0
  5471  002986  2361               	addwfc	(___awmod@dividend+1)& (0+255),f,b
  5472  002988  0E00               	movlw	0
  5473  00298A  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  5474  00298C  0E15               	movlw	21
  5475  00298E  6F62               	movwf	___awmod@divisor& (0+255),b
  5476  002990  EC55  F01B         	call	___awmod	;wreg free
  5477  002994  0100               	movlb	0	; () banked
  5478  002996  5160               	movf	?___awmod& (0+255),w,b
  5479  002998  6FE1               	movwf	_TIME_SWAP& (0+255),b
  5480                           
  5481                           ;button.c: 127:                         break;
  5482  00299A  EF0A  F015         	goto	l3487
  5483  00299E                     l3479:
  5484                           
  5485                           ; BSR set to: 0
  5486                           ;button.c: 129:                         TEMP_SWAP = (TEMP_SWAP+1)%50;
  5487  00299E  0E01               	movlw	1
  5488  0029A0  25E0               	addwf	_TEMP_SWAP& (0+255),w,b
  5489  0029A2  6F60               	movwf	___awmod@dividend& (0+255),b
  5490  0029A4  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  5491  0029A6  0E00               	movlw	0
  5492  0029A8  2361               	addwfc	(___awmod@dividend+1)& (0+255),f,b
  5493  0029AA  0E00               	movlw	0
  5494  0029AC  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  5495  0029AE  0E32               	movlw	50
  5496  0029B0  6F62               	movwf	___awmod@divisor& (0+255),b
  5497  0029B2  EC55  F01B         	call	___awmod	;wreg free
  5498  0029B6  0100               	movlb	0	; () banked
  5499  0029B8  5160               	movf	?___awmod& (0+255),w,b
  5500  0029BA  6FE0               	movwf	_TEMP_SWAP& (0+255),b
  5501                           
  5502                           ;button.c: 130:                         break;
  5503  0029BC  EF0A  F015         	goto	l3487
  5504  0029C0                     l3481:
  5505                           
  5506                           ; BSR set to: 0
  5507                           ;button.c: 132:                         HUMI_SWAP = (HUMI_SWAP+1)%100;
  5508  0029C0  0E01               	movlw	1
  5509  0029C2  245A               	addwf	_HUMI_SWAP^0,w,c
  5510  0029C4  6F60               	movwf	___awmod@dividend& (0+255),b
  5511  0029C6  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  5512  0029C8  0E00               	movlw	0
  5513  0029CA  2361               	addwfc	(___awmod@dividend+1)& (0+255),f,b
  5514  0029CC  0E00               	movlw	0
  5515  0029CE  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  5516  0029D0  0E64               	movlw	100
  5517  0029D2  6F62               	movwf	___awmod@divisor& (0+255),b
  5518  0029D4  EC55  F01B         	call	___awmod	;wreg free
  5519  0029D8  0100               	movlb	0	; () banked
  5520  0029DA  5160               	movf	?___awmod& (0+255),w,b
  5521  0029DC  6E5A               	movwf	_HUMI_SWAP^0,c
  5522                           
  5523                           ;button.c: 133:                         break;
  5524  0029DE  EF0A  F015         	goto	l3487
  5525  0029E2                     l3485:
  5526                           
  5527                           ; BSR set to: 0
  5528  0029E2  51DB               	movf	_setting& (0+255),w,b
  5529  0029E4  6F6C               	movwf	??_increaseButton& (0+255),b
  5530  0029E6  6B6D               	clrf	(??_increaseButton+1)& (0+255),b
  5531                           
  5532                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5533                           ; Switch size 1, requested type "simple"
  5534                           ; Number of cases is 1, Range of values is 0 to 0
  5535                           ; switch strategies available:
  5536                           ; Name         Instructions Cycles
  5537                           ; simple_byte            4     3 (average)
  5538                           ;	Chosen strategy is simple_byte
  5539  0029E8  516D               	movf	(??_increaseButton+1)& (0+255),w,b
  5540  0029EA  0A00               	xorlw	0	; case 0
  5541  0029EC  B4D8               	btfsc	status,2,c
  5542  0029EE  EFFB  F014         	goto	l4019
  5543  0029F2  EF0A  F015         	goto	l3487
  5544  0029F6                     l4019:
  5545                           
  5546                           ; BSR set to: 0
  5547                           ; Switch size 1, requested type "simple"
  5548                           ; Number of cases is 3, Range of values is 0 to 2
  5549                           ; switch strategies available:
  5550                           ; Name         Instructions Cycles
  5551                           ; simple_byte           10     6 (average)
  5552                           ;	Chosen strategy is simple_byte
  5553  0029F6  516C               	movf	??_increaseButton& (0+255),w,b
  5554  0029F8  0A00               	xorlw	0	; case 0
  5555  0029FA  B4D8               	btfsc	status,2,c
  5556  0029FC  EFBE  F014         	goto	l3477
  5557  002A00  0A01               	xorlw	1	; case 1
  5558  002A02  B4D8               	btfsc	status,2,c
  5559  002A04  EFCF  F014         	goto	l3479
  5560  002A08  0A03               	xorlw	3	; case 2
  5561  002A0A  B4D8               	btfsc	status,2,c
  5562  002A0C  EFE0  F014         	goto	l3481
  5563  002A10  EF0A  F015         	goto	l3487
  5564  002A14                     l3487:
  5565                           
  5566                           ; BSR set to: 0
  5567                           ;button.c: 135:                 display_state(5);
  5568  002A14  0E00               	movlw	0
  5569  002A16  6F69               	movwf	(display_state@state+1)& (0+255),b
  5570  002A18  0E05               	movlw	5
  5571  002A1A  6F68               	movwf	display_state@state& (0+255),b
  5572  002A1C  ECA7  F012         	call	_display_state	;wreg free
  5573  002A20                     
  5574                           ;button.c: 136:                 hold_but_B = 0;
  5575  002A20  0E00               	movlw	0
  5576  002A22  0100               	movlb	0	; () banked
  5577  002A24  6FDC               	movwf	_hold_but_B& (0+255),b
  5578  002A26  EF2F  F015         	goto	l527
  5579  002A2A                     l3493:
  5580  002A2A  505B               	movf	_BUTTON_INC_STATE^0,w,c
  5581  002A2C  0100               	movlb	0	; () banked
  5582  002A2E  6F6C               	movwf	??_increaseButton& (0+255),b
  5583  002A30  6B6D               	clrf	(??_increaseButton+1)& (0+255),b
  5584                           
  5585                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5586                           ; Switch size 1, requested type "simple"
  5587                           ; Number of cases is 1, Range of values is 0 to 0
  5588                           ; switch strategies available:
  5589                           ; Name         Instructions Cycles
  5590                           ; simple_byte            4     3 (average)
  5591                           ;	Chosen strategy is simple_byte
  5592  002A32  516D               	movf	(??_increaseButton+1)& (0+255),w,b
  5593  002A34  0A00               	xorlw	0	; case 0
  5594  002A36  B4D8               	btfsc	status,2,c
  5595  002A38  EF20  F015         	goto	l4021
  5596  002A3C  EF2F  F015         	goto	l527
  5597  002A40                     l4021:
  5598                           
  5599                           ; BSR set to: 0
  5600                           ; Switch size 1, requested type "simple"
  5601                           ; Number of cases is 3, Range of values is 1 to 3
  5602                           ; switch strategies available:
  5603                           ; Name         Instructions Cycles
  5604                           ; simple_byte           10     6 (average)
  5605                           ;	Chosen strategy is simple_byte
  5606  002A40  516C               	movf	??_increaseButton& (0+255),w,b
  5607  002A42  0A01               	xorlw	1	; case 1
  5608  002A44  B4D8               	btfsc	status,2,c
  5609  002A46  EF2E  F014         	goto	l3441
  5610  002A4A  0A03               	xorlw	3	; case 2
  5611  002A4C  B4D8               	btfsc	status,2,c
  5612  002A4E  EF3A  F014         	goto	l3445
  5613  002A52  0A01               	xorlw	1	; case 3
  5614  002A54  B4D8               	btfsc	status,2,c
  5615  002A56  EFA7  F014         	goto	l3469
  5616  002A5A  EF2F  F015         	goto	l527
  5617  002A5E                     l527:
  5618                           
  5619                           ; BSR set to: 0
  5620  002A5E  0012               	return		;funcret
  5621  002A60                     __end_of_increaseButton:
  5622                           	opt callstack 0
  5623                           
  5624 ;; *************** function _display_state *****************
  5625 ;; Defined at:
  5626 ;;		line 49 in file "display.c"
  5627 ;; Parameters:    Size  Location     Type
  5628 ;;  state           2    8[BANK0 ] int 
  5629 ;; Auto vars:     Size  Location     Type
  5630 ;;		None
  5631 ;; Return value:  Size  Location     Type
  5632 ;;                  1    wreg      void 
  5633 ;; Registers used:
  5634 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5635 ;; Tracked objects:
  5636 ;;		On entry : 0/0
  5637 ;;		On exit  : 0/0
  5638 ;;		Unchanged: 0/0
  5639 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5640 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5641 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5642 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5643 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5644 ;;Total ram usage:        4 bytes
  5645 ;; Hardware stack levels used:    1
  5646 ;; Hardware stack levels required when called:    8
  5647 ;; This function calls:
  5648 ;;		_LCDPutChar
  5649 ;;		_LCDPutInst
  5650 ;;		_LCDPutStr
  5651 ;;		___awdiv
  5652 ;;		___awmod
  5653 ;; This function is called by:
  5654 ;;		_switch_button_state
  5655 ;;		_increaseButton
  5656 ;;		_FSM
  5657 ;; This function uses a non-reentrant model
  5658 ;;
  5659                           
  5660                           	psect	text26
  5661  00254E                     __ptext26:
  5662                           	opt callstack 0
  5663  00254E                     _display_state:
  5664                           	opt callstack 20
  5665  00254E                     
  5666                           ;display.c: 50:     switch (state){
  5667  00254E  EF04  F014         	goto	l3053
  5668  002552                     l2985:
  5669                           
  5670                           ; BSR set to: 0
  5671                           ;display.c: 52:             LCDPutInst(0x80);
  5672  002552  0E80               	movlw	128
  5673  002554  EC8A  F01C         	call	_LCDPutInst
  5674  002558                     
  5675                           ;display.c: 53:             LCDPutStr("    SLEEPING    ");
  5676  002558  0E45               	movlw	low STR_3
  5677  00255A  0100               	movlb	0	; () banked
  5678  00255C  6F66               	movwf	LCDPutStr@ptr& (0+255),b
  5679  00255E  0E10               	movlw	high STR_3
  5680  002560  6F67               	movwf	(LCDPutStr@ptr+1)& (0+255),b
  5681  002562  EC4D  F01D         	call	_LCDPutStr	;wreg free
  5682                           
  5683                           ;display.c: 54:             break;
  5684  002566  EF2B  F014         	goto	l810
  5685  00256A                     l2989:
  5686                           
  5687                           ; BSR set to: 0
  5688                           ;display.c: 56:             LCDPutInst(0x80);
  5689  00256A  0E80               	movlw	128
  5690  00256C  EC8A  F01C         	call	_LCDPutInst
  5691  002570                     
  5692                           ;display.c: 57:             LCDPutStr("    HEAT UP     ");
  5693  002570  0E34               	movlw	low STR_6
  5694  002572  0100               	movlb	0	; () banked
  5695  002574  6F66               	movwf	LCDPutStr@ptr& (0+255),b
  5696  002576  0E10               	movlw	high STR_6
  5697  002578  6F67               	movwf	(LCDPutStr@ptr+1)& (0+255),b
  5698  00257A  EC4D  F01D         	call	_LCDPutStr	;wreg free
  5699                           
  5700                           ;display.c: 58:             break;
  5701  00257E  EF2B  F014         	goto	l810
  5702  002582                     l2993:
  5703                           
  5704                           ; BSR set to: 0
  5705                           ;display.c: 60:             LCDPutInst(0x80);
  5706  002582  0E80               	movlw	128
  5707  002584  EC8A  F01C         	call	_LCDPutInst
  5708  002588                     
  5709                           ;display.c: 61:             LCDPutStr("    WORKING     ");
  5710  002588  0E23               	movlw	low STR_7
  5711  00258A  0100               	movlb	0	; () banked
  5712  00258C  6F66               	movwf	LCDPutStr@ptr& (0+255),b
  5713  00258E  0E10               	movlw	high STR_7
  5714  002590  6F67               	movwf	(LCDPutStr@ptr+1)& (0+255),b
  5715  002592  EC4D  F01D         	call	_LCDPutStr	;wreg free
  5716                           
  5717                           ;display.c: 62:             break;
  5718  002596  EF2B  F014         	goto	l810
  5719  00259A                     l2997:
  5720                           
  5721                           ; BSR set to: 0
  5722                           ;display.c: 64:             LCDPutInst(0x80);
  5723  00259A  0E80               	movlw	128
  5724  00259C  EC8A  F01C         	call	_LCDPutInst
  5725  0025A0                     
  5726                           ;display.c: 65:             LCDPutStr("    TIME OUT    ");
  5727  0025A0  0E56               	movlw	low STR_8
  5728  0025A2  0100               	movlb	0	; () banked
  5729  0025A4  6F66               	movwf	LCDPutStr@ptr& (0+255),b
  5730  0025A6  0E10               	movlw	high STR_8
  5731  0025A8  6F67               	movwf	(LCDPutStr@ptr+1)& (0+255),b
  5732  0025AA  EC4D  F01D         	call	_LCDPutStr	;wreg free
  5733                           
  5734                           ;display.c: 66:             break;
  5735  0025AE  EF2B  F014         	goto	l810
  5736  0025B2                     l3001:
  5737                           
  5738                           ; BSR set to: 0
  5739                           ;display.c: 70:                     LCDPutInst(0x80);
  5740  0025B2  0E80               	movlw	128
  5741  0025B4  EC8A  F01C         	call	_LCDPutInst
  5742  0025B8                     
  5743                           ;display.c: 71:                     LCDPutStr("Set TIME:       ");
  5744  0025B8  0E01               	movlw	low STR_9
  5745  0025BA  0100               	movlb	0	; () banked
  5746  0025BC  6F66               	movwf	LCDPutStr@ptr& (0+255),b
  5747  0025BE  0E10               	movlw	high STR_9
  5748  0025C0  6F67               	movwf	(LCDPutStr@ptr+1)& (0+255),b
  5749  0025C2  EC4D  F01D         	call	_LCDPutStr	;wreg free
  5750  0025C6                     
  5751                           ;display.c: 72:                     LCDPutInst(0x8B);
  5752  0025C6  0E8B               	movlw	139
  5753  0025C8  EC8A  F01C         	call	_LCDPutInst
  5754  0025CC                     
  5755                           ;display.c: 73:                     LCDPutChar(TIME_SWAP/10 + '0');
  5756  0025CC  C0E1  F060         	movff	_TIME_SWAP,___awdiv@dividend
  5757  0025D0  0100               	movlb	0	; () banked
  5758  0025D2  6B61               	clrf	(___awdiv@dividend+1)& (0+255),b
  5759  0025D4  0E00               	movlw	0
  5760  0025D6  6F63               	movwf	(___awdiv@divisor+1)& (0+255),b
  5761  0025D8  0E0A               	movlw	10
  5762  0025DA  6F62               	movwf	___awdiv@divisor& (0+255),b
  5763  0025DC  EC97  F01A         	call	___awdiv	;wreg free
  5764  0025E0  0100               	movlb	0	; () banked
  5765  0025E2  5160               	movf	?___awdiv& (0+255),w,b
  5766  0025E4  0F30               	addlw	48
  5767  0025E6  ECB4  F01C         	call	_LCDPutChar
  5768  0025EA                     
  5769                           ;display.c: 74:                     LCDPutChar(TIME_SWAP%10 + '0');
  5770  0025EA  C0E1  F060         	movff	_TIME_SWAP,___awmod@dividend
  5771  0025EE  0100               	movlb	0	; () banked
  5772  0025F0  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  5773  0025F2  0E00               	movlw	0
  5774  0025F4  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  5775  0025F6  0E0A               	movlw	10
  5776  0025F8  6F62               	movwf	___awmod@divisor& (0+255),b
  5777  0025FA  EC55  F01B         	call	___awmod	;wreg free
  5778  0025FE  0100               	movlb	0	; () banked
  5779  002600  5160               	movf	?___awmod& (0+255),w,b
  5780  002602  0F30               	addlw	48
  5781  002604  ECB4  F01C         	call	_LCDPutChar
  5782  002608                     
  5783                           ;display.c: 75:                     LCDPutChar('s');
  5784  002608  0E73               	movlw	115
  5785  00260A  ECB4  F01C         	call	_LCDPutChar
  5786                           
  5787                           ;display.c: 76:                     break;
  5788  00260E  EF2B  F014         	goto	l810
  5789  002612                     l3013:
  5790                           
  5791                           ; BSR set to: 0
  5792                           ;display.c: 78:                     LCDPutInst(0x80);
  5793  002612  0E80               	movlw	128
  5794  002614  EC8A  F01C         	call	_LCDPutInst
  5795  002618                     
  5796                           ;display.c: 79:                     LCDPutStr("Set TEMP: ");
  5797  002618  0E9A               	movlw	low STR_10
  5798  00261A  0100               	movlb	0	; () banked
  5799  00261C  6F66               	movwf	LCDPutStr@ptr& (0+255),b
  5800  00261E  0E10               	movlw	high STR_10
  5801  002620  6F67               	movwf	(LCDPutStr@ptr+1)& (0+255),b
  5802  002622  EC4D  F01D         	call	_LCDPutStr	;wreg free
  5803  002626                     
  5804                           ;display.c: 80:                     LCDPutInst(0x8B);
  5805  002626  0E8B               	movlw	139
  5806  002628  EC8A  F01C         	call	_LCDPutInst
  5807  00262C                     
  5808                           ;display.c: 81:                     LCDPutChar(TEMP_SWAP/10 + '0');
  5809  00262C  C0E0  F060         	movff	_TEMP_SWAP,___awdiv@dividend
  5810  002630  0100               	movlb	0	; () banked
  5811  002632  6B61               	clrf	(___awdiv@dividend+1)& (0+255),b
  5812  002634  0E00               	movlw	0
  5813  002636  6F63               	movwf	(___awdiv@divisor+1)& (0+255),b
  5814  002638  0E0A               	movlw	10
  5815  00263A  6F62               	movwf	___awdiv@divisor& (0+255),b
  5816  00263C  EC97  F01A         	call	___awdiv	;wreg free
  5817  002640  0100               	movlb	0	; () banked
  5818  002642  5160               	movf	?___awdiv& (0+255),w,b
  5819  002644  0F30               	addlw	48
  5820  002646  ECB4  F01C         	call	_LCDPutChar
  5821  00264A                     
  5822                           ;display.c: 82:                     LCDPutChar(TEMP_SWAP%10 + '0');
  5823  00264A  C0E0  F060         	movff	_TEMP_SWAP,___awmod@dividend
  5824  00264E  0100               	movlb	0	; () banked
  5825  002650  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  5826  002652  0E00               	movlw	0
  5827  002654  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  5828  002656  0E0A               	movlw	10
  5829  002658  6F62               	movwf	___awmod@divisor& (0+255),b
  5830  00265A  EC55  F01B         	call	___awmod	;wreg free
  5831  00265E  0100               	movlb	0	; () banked
  5832  002660  5160               	movf	?___awmod& (0+255),w,b
  5833  002662  0F30               	addlw	48
  5834  002664  ECB4  F01C         	call	_LCDPutChar
  5835  002668                     
  5836                           ;display.c: 83:                     LCDPutChar('C');
  5837  002668  0E43               	movlw	67
  5838  00266A  ECB4  F01C         	call	_LCDPutChar
  5839                           
  5840                           ;display.c: 84:                     break;
  5841  00266E  EF2B  F014         	goto	l810
  5842  002672                     l3025:
  5843                           
  5844                           ; BSR set to: 0
  5845                           ;display.c: 86:                     LCDPutInst(0x80);
  5846  002672  0E80               	movlw	128
  5847  002674  EC8A  F01C         	call	_LCDPutInst
  5848  002678                     
  5849                           ;display.c: 87:                     LCDPutStr("Set HUMI:       ");
  5850  002678  0E12               	movlw	low STR_11
  5851  00267A  0100               	movlb	0	; () banked
  5852  00267C  6F66               	movwf	LCDPutStr@ptr& (0+255),b
  5853  00267E  0E10               	movlw	high STR_11
  5854  002680  6F67               	movwf	(LCDPutStr@ptr+1)& (0+255),b
  5855  002682  EC4D  F01D         	call	_LCDPutStr	;wreg free
  5856  002686                     
  5857                           ;display.c: 88:                     LCDPutInst(0x8B);
  5858  002686  0E8B               	movlw	139
  5859  002688  EC8A  F01C         	call	_LCDPutInst
  5860  00268C                     
  5861                           ;display.c: 89:                     LCDPutChar(HUMI_SWAP/10 + '0');
  5862  00268C  C05A  F060         	movff	_HUMI_SWAP,___awdiv@dividend
  5863  002690  0100               	movlb	0	; () banked
  5864  002692  6B61               	clrf	(___awdiv@dividend+1)& (0+255),b
  5865  002694  0E00               	movlw	0
  5866  002696  6F63               	movwf	(___awdiv@divisor+1)& (0+255),b
  5867  002698  0E0A               	movlw	10
  5868  00269A  6F62               	movwf	___awdiv@divisor& (0+255),b
  5869  00269C  EC97  F01A         	call	___awdiv	;wreg free
  5870  0026A0  0100               	movlb	0	; () banked
  5871  0026A2  5160               	movf	?___awdiv& (0+255),w,b
  5872  0026A4  0F30               	addlw	48
  5873  0026A6  ECB4  F01C         	call	_LCDPutChar
  5874  0026AA                     
  5875                           ;display.c: 90:                     LCDPutChar(HUMI_SWAP%10 + '0');
  5876  0026AA  C05A  F060         	movff	_HUMI_SWAP,___awmod@dividend
  5877  0026AE  0100               	movlb	0	; () banked
  5878  0026B0  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  5879  0026B2  0E00               	movlw	0
  5880  0026B4  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  5881  0026B6  0E0A               	movlw	10
  5882  0026B8  6F62               	movwf	___awmod@divisor& (0+255),b
  5883  0026BA  EC55  F01B         	call	___awmod	;wreg free
  5884  0026BE  0100               	movlb	0	; () banked
  5885  0026C0  5160               	movf	?___awmod& (0+255),w,b
  5886  0026C2  0F30               	addlw	48
  5887  0026C4  ECB4  F01C         	call	_LCDPutChar
  5888  0026C8                     
  5889                           ;display.c: 91:                     LCDPutChar('%');
  5890  0026C8  0E25               	movlw	37
  5891  0026CA  ECB4  F01C         	call	_LCDPutChar
  5892                           
  5893                           ;display.c: 92:                     break;
  5894  0026CE  EF2B  F014         	goto	l810
  5895  0026D2                     l3039:
  5896                           
  5897                           ; BSR set to: 0
  5898  0026D2  51DB               	movf	_setting& (0+255),w,b
  5899  0026D4  6F6A               	movwf	??_display_state& (0+255),b
  5900  0026D6  6B6B               	clrf	(??_display_state+1)& (0+255),b
  5901                           
  5902                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5903                           ; Switch size 1, requested type "simple"
  5904                           ; Number of cases is 1, Range of values is 0 to 0
  5905                           ; switch strategies available:
  5906                           ; Name         Instructions Cycles
  5907                           ; simple_byte            4     3 (average)
  5908                           ;	Chosen strategy is simple_byte
  5909  0026D8  516B               	movf	(??_display_state+1)& (0+255),w,b
  5910  0026DA  0A00               	xorlw	0	; case 0
  5911  0026DC  B4D8               	btfsc	status,2,c
  5912  0026DE  EF73  F013         	goto	l4023
  5913  0026E2  EF2B  F014         	goto	l810
  5914  0026E6                     l4023:
  5915                           
  5916                           ; BSR set to: 0
  5917                           ; Switch size 1, requested type "simple"
  5918                           ; Number of cases is 3, Range of values is 0 to 2
  5919                           ; switch strategies available:
  5920                           ; Name         Instructions Cycles
  5921                           ; simple_byte           10     6 (average)
  5922                           ;	Chosen strategy is simple_byte
  5923  0026E6  516A               	movf	??_display_state& (0+255),w,b
  5924  0026E8  0A00               	xorlw	0	; case 0
  5925  0026EA  B4D8               	btfsc	status,2,c
  5926  0026EC  EFD9  F012         	goto	l3001
  5927  0026F0  0A01               	xorlw	1	; case 1
  5928  0026F2  B4D8               	btfsc	status,2,c
  5929  0026F4  EF09  F013         	goto	l3013
  5930  0026F8  0A03               	xorlw	3	; case 2
  5931  0026FA  B4D8               	btfsc	status,2,c
  5932  0026FC  EF39  F013         	goto	l3025
  5933  002700  EF2B  F014         	goto	l810
  5934  002704                     l3041:
  5935                           
  5936                           ; BSR set to: 0
  5937                           ;display.c: 98:                     LCDPutInst(0x8B);
  5938  002704  0E8B               	movlw	139
  5939  002706  EC8A  F01C         	call	_LCDPutInst
  5940                           
  5941                           ;display.c: 99:                     LCDPutChar(TIME_SWAP/10 + '0');
  5942  00270A  C0E1  F060         	movff	_TIME_SWAP,___awdiv@dividend
  5943  00270E  0100               	movlb	0	; () banked
  5944  002710  6B61               	clrf	(___awdiv@dividend+1)& (0+255),b
  5945  002712  0E00               	movlw	0
  5946  002714  6F63               	movwf	(___awdiv@divisor+1)& (0+255),b
  5947  002716  0E0A               	movlw	10
  5948  002718  6F62               	movwf	___awdiv@divisor& (0+255),b
  5949  00271A  EC97  F01A         	call	___awdiv	;wreg free
  5950  00271E  0100               	movlb	0	; () banked
  5951  002720  5160               	movf	?___awdiv& (0+255),w,b
  5952  002722  0F30               	addlw	48
  5953  002724  ECB4  F01C         	call	_LCDPutChar
  5954                           
  5955                           ;display.c: 100:                     LCDPutChar(TIME_SWAP%10 + '0');
  5956  002728  C0E1  F060         	movff	_TIME_SWAP,___awmod@dividend
  5957  00272C  0100               	movlb	0	; () banked
  5958  00272E  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  5959  002730  0E00               	movlw	0
  5960  002732  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  5961  002734  0E0A               	movlw	10
  5962  002736  6F62               	movwf	___awmod@divisor& (0+255),b
  5963  002738  EC55  F01B         	call	___awmod	;wreg free
  5964  00273C  0100               	movlb	0	; () banked
  5965  00273E  5160               	movf	?___awmod& (0+255),w,b
  5966  002740  0F30               	addlw	48
  5967  002742  ECB4  F01C         	call	_LCDPutChar
  5968                           
  5969                           ;display.c: 101:                     break;
  5970  002746  EF2B  F014         	goto	l810
  5971  00274A                     l3043:
  5972                           
  5973                           ; BSR set to: 0
  5974                           ;display.c: 103:                     LCDPutInst(0x8B);
  5975  00274A  0E8B               	movlw	139
  5976  00274C  EC8A  F01C         	call	_LCDPutInst
  5977                           
  5978                           ;display.c: 104:                     LCDPutChar(TEMP_SWAP/10 + '0');
  5979  002750  C0E0  F060         	movff	_TEMP_SWAP,___awdiv@dividend
  5980  002754  0100               	movlb	0	; () banked
  5981  002756  6B61               	clrf	(___awdiv@dividend+1)& (0+255),b
  5982  002758  0E00               	movlw	0
  5983  00275A  6F63               	movwf	(___awdiv@divisor+1)& (0+255),b
  5984  00275C  0E0A               	movlw	10
  5985  00275E  6F62               	movwf	___awdiv@divisor& (0+255),b
  5986  002760  EC97  F01A         	call	___awdiv	;wreg free
  5987  002764  0100               	movlb	0	; () banked
  5988  002766  5160               	movf	?___awdiv& (0+255),w,b
  5989  002768  0F30               	addlw	48
  5990  00276A  ECB4  F01C         	call	_LCDPutChar
  5991                           
  5992                           ;display.c: 105:                     LCDPutChar(TEMP_SWAP%10 + '0');
  5993  00276E  C0E0  F060         	movff	_TEMP_SWAP,___awmod@dividend
  5994  002772  0100               	movlb	0	; () banked
  5995  002774  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  5996  002776  0E00               	movlw	0
  5997  002778  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  5998  00277A  0E0A               	movlw	10
  5999  00277C  6F62               	movwf	___awmod@divisor& (0+255),b
  6000  00277E  EC55  F01B         	call	___awmod	;wreg free
  6001  002782  0100               	movlb	0	; () banked
  6002  002784  5160               	movf	?___awmod& (0+255),w,b
  6003  002786  0F30               	addlw	48
  6004  002788  ECB4  F01C         	call	_LCDPutChar
  6005                           
  6006                           ;display.c: 106:                     break;
  6007  00278C  EF2B  F014         	goto	l810
  6008  002790                     l3045:
  6009                           
  6010                           ; BSR set to: 0
  6011                           ;display.c: 108:                     LCDPutInst(0x8B);
  6012  002790  0E8B               	movlw	139
  6013  002792  EC8A  F01C         	call	_LCDPutInst
  6014                           
  6015                           ;display.c: 109:                     LCDPutChar(HUMI_SWAP/10 + '0');
  6016  002796  C05A  F060         	movff	_HUMI_SWAP,___awdiv@dividend
  6017  00279A  0100               	movlb	0	; () banked
  6018  00279C  6B61               	clrf	(___awdiv@dividend+1)& (0+255),b
  6019  00279E  0E00               	movlw	0
  6020  0027A0  6F63               	movwf	(___awdiv@divisor+1)& (0+255),b
  6021  0027A2  0E0A               	movlw	10
  6022  0027A4  6F62               	movwf	___awdiv@divisor& (0+255),b
  6023  0027A6  EC97  F01A         	call	___awdiv	;wreg free
  6024  0027AA  0100               	movlb	0	; () banked
  6025  0027AC  5160               	movf	?___awdiv& (0+255),w,b
  6026  0027AE  0F30               	addlw	48
  6027  0027B0  ECB4  F01C         	call	_LCDPutChar
  6028                           
  6029                           ;display.c: 110:                     LCDPutChar(HUMI_SWAP%10 + '0');
  6030  0027B4  C05A  F060         	movff	_HUMI_SWAP,___awmod@dividend
  6031  0027B8  0100               	movlb	0	; () banked
  6032  0027BA  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  6033  0027BC  0E00               	movlw	0
  6034  0027BE  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  6035  0027C0  0E0A               	movlw	10
  6036  0027C2  6F62               	movwf	___awmod@divisor& (0+255),b
  6037  0027C4  EC55  F01B         	call	___awmod	;wreg free
  6038  0027C8  0100               	movlb	0	; () banked
  6039  0027CA  5160               	movf	?___awmod& (0+255),w,b
  6040  0027CC  0F30               	addlw	48
  6041  0027CE  ECB4  F01C         	call	_LCDPutChar
  6042                           
  6043                           ;display.c: 111:                     break;
  6044  0027D2  EF2B  F014         	goto	l810
  6045  0027D6                     l3049:
  6046                           
  6047                           ; BSR set to: 0
  6048  0027D6  51DB               	movf	_setting& (0+255),w,b
  6049  0027D8  6F6A               	movwf	??_display_state& (0+255),b
  6050  0027DA  6B6B               	clrf	(??_display_state+1)& (0+255),b
  6051                           
  6052                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6053                           ; Switch size 1, requested type "simple"
  6054                           ; Number of cases is 1, Range of values is 0 to 0
  6055                           ; switch strategies available:
  6056                           ; Name         Instructions Cycles
  6057                           ; simple_byte            4     3 (average)
  6058                           ;	Chosen strategy is simple_byte
  6059  0027DC  516B               	movf	(??_display_state+1)& (0+255),w,b
  6060  0027DE  0A00               	xorlw	0	; case 0
  6061  0027E0  B4D8               	btfsc	status,2,c
  6062  0027E2  EFF5  F013         	goto	l4025
  6063  0027E6  EF2B  F014         	goto	l810
  6064  0027EA                     l4025:
  6065                           
  6066                           ; BSR set to: 0
  6067                           ; Switch size 1, requested type "simple"
  6068                           ; Number of cases is 3, Range of values is 0 to 2
  6069                           ; switch strategies available:
  6070                           ; Name         Instructions Cycles
  6071                           ; simple_byte           10     6 (average)
  6072                           ;	Chosen strategy is simple_byte
  6073  0027EA  516A               	movf	??_display_state& (0+255),w,b
  6074  0027EC  0A00               	xorlw	0	; case 0
  6075  0027EE  B4D8               	btfsc	status,2,c
  6076  0027F0  EF82  F013         	goto	l3041
  6077  0027F4  0A01               	xorlw	1	; case 1
  6078  0027F6  B4D8               	btfsc	status,2,c
  6079  0027F8  EFA5  F013         	goto	l3043
  6080  0027FC  0A03               	xorlw	3	; case 2
  6081  0027FE  B4D8               	btfsc	status,2,c
  6082  002800  EFC8  F013         	goto	l3045
  6083  002804  EF2B  F014         	goto	l810
  6084  002808                     l3053:
  6085  002808  C068  F06A         	movff	display_state@state,??_display_state
  6086  00280C  C069  F06B         	movff	display_state@state+1,??_display_state+1
  6087                           
  6088                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6089                           ; Switch size 1, requested type "simple"
  6090                           ; Number of cases is 1, Range of values is 0 to 0
  6091                           ; switch strategies available:
  6092                           ; Name         Instructions Cycles
  6093                           ; simple_byte            4     3 (average)
  6094                           ;	Chosen strategy is simple_byte
  6095  002810  0100               	movlb	0	; () banked
  6096  002812  516B               	movf	(??_display_state+1)& (0+255),w,b
  6097  002814  0A00               	xorlw	0	; case 0
  6098  002816  B4D8               	btfsc	status,2,c
  6099  002818  EF10  F014         	goto	l4027
  6100  00281C  EF2B  F014         	goto	l810
  6101  002820                     l4027:
  6102                           
  6103                           ; BSR set to: 0
  6104                           ; Switch size 1, requested type "simple"
  6105                           ; Number of cases is 6, Range of values is 0 to 5
  6106                           ; switch strategies available:
  6107                           ; Name         Instructions Cycles
  6108                           ; simple_byte           19    10 (average)
  6109                           ;	Chosen strategy is simple_byte
  6110  002820  516A               	movf	??_display_state& (0+255),w,b
  6111  002822  0A00               	xorlw	0	; case 0
  6112  002824  B4D8               	btfsc	status,2,c
  6113  002826  EFA9  F012         	goto	l2985
  6114  00282A  0A01               	xorlw	1	; case 1
  6115  00282C  B4D8               	btfsc	status,2,c
  6116  00282E  EFB5  F012         	goto	l2989
  6117  002832  0A03               	xorlw	3	; case 2
  6118  002834  B4D8               	btfsc	status,2,c
  6119  002836  EFC1  F012         	goto	l2993
  6120  00283A  0A01               	xorlw	1	; case 3
  6121  00283C  B4D8               	btfsc	status,2,c
  6122  00283E  EFCD  F012         	goto	l2997
  6123  002842  0A07               	xorlw	7	; case 4
  6124  002844  B4D8               	btfsc	status,2,c
  6125  002846  EF69  F013         	goto	l3039
  6126  00284A  0A01               	xorlw	1	; case 5
  6127  00284C  B4D8               	btfsc	status,2,c
  6128  00284E  EFEB  F013         	goto	l3049
  6129  002852  EF2B  F014         	goto	l810
  6130  002856                     l810:
  6131  002856  0012               	return		;funcret
  6132  002858                     __end_of_display_state:
  6133                           	opt callstack 0
  6134                           
  6135 ;; *************** function _LCDPutStr *****************
  6136 ;; Defined at:
  6137 ;;		line 199 in file "BBSPI_LCD.c"
  6138 ;; Parameters:    Size  Location     Type
  6139 ;;  ptr             2    6[BANK0 ] PTR const unsigned char 
  6140 ;;		 -> STR_11(17), STR_10(11), STR_9(17), STR_8(17), 
  6141 ;;		 -> STR_7(17), STR_6(17), STR_5(17), STR_4(17), 
  6142 ;;		 -> STR_3(17), STR_2(17), STR_1(17), 
  6143 ;; Auto vars:     Size  Location     Type
  6144 ;;		None
  6145 ;; Return value:  Size  Location     Type
  6146 ;;                  1    wreg      void 
  6147 ;; Registers used:
  6148 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6149 ;; Tracked objects:
  6150 ;;		On entry : 0/0
  6151 ;;		On exit  : 0/0
  6152 ;;		Unchanged: 0/0
  6153 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6154 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6155 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6156 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6157 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6158 ;;Total ram usage:        2 bytes
  6159 ;; Hardware stack levels used:    1
  6160 ;; Hardware stack levels required when called:    7
  6161 ;; This function calls:
  6162 ;;		_LCDPutChar
  6163 ;; This function is called by:
  6164 ;;		_initial_display
  6165 ;;		_initDisplayDHT
  6166 ;;		_display_state
  6167 ;; This function uses a non-reentrant model
  6168 ;;
  6169                           
  6170                           	psect	text27
  6171  003A9A                     __ptext27:
  6172                           	opt callstack 0
  6173  003A9A                     _LCDPutStr:
  6174                           	opt callstack 21
  6175  003A9A                     
  6176                           ;BBSPI_LCD.c: 199: void LCDPutStr (const char *ptr);BBSPI_LCD.c: 200: {;BBSPI_LCD.c: 201
      +                          :     while(*ptr) LCDPutChar(*(ptr++));
  6177  003A9A  EF5C  F01D         	goto	l2833
  6178  003A9E                     l2829:
  6179  003A9E  C066  FFF6         	movff	LCDPutStr@ptr,tblptrl
  6180  003AA2  C067  FFF7         	movff	LCDPutStr@ptr+1,tblptrh
  6181  003AA6                     	if	0	;tblptru may be non-zero
  6182  003AA6                     	endif
  6183  003AA6                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  6184  003AA6  0E00               	movlw	low (__mediumconst shr (0+16))
  6185  003AA8  6EF8               	movwf	tblptru,c
  6186  003AAA                     	endif
  6187  003AAA  0008               	tblrd		*
  6188  003AAC  50F5               	movf	tablat,w,c
  6189  003AAE  ECB4  F01C         	call	_LCDPutChar
  6190  003AB2  0100               	movlb	0	; () banked
  6191  003AB4  4B66               	infsnz	LCDPutStr@ptr& (0+255),f,b
  6192  003AB6  2B67               	incf	(LCDPutStr@ptr+1)& (0+255),f,b
  6193  003AB8                     l2833:
  6194  003AB8  C066  FFF6         	movff	LCDPutStr@ptr,tblptrl
  6195  003ABC  C067  FFF7         	movff	LCDPutStr@ptr+1,tblptrh
  6196  003AC0                     	if	0	;tblptru may be non-zero
  6197  003AC0                     	endif
  6198  003AC0                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  6199  003AC0  0E00               	movlw	low (__mediumconst shr (0+16))
  6200  003AC2  6EF8               	movwf	tblptru,c
  6201  003AC4                     	endif
  6202  003AC4  0008               	tblrd		*
  6203  003AC6  50F5               	movf	tablat,w,c
  6204  003AC8  0900               	iorlw	0
  6205  003ACA  A4D8               	btfss	status,2,c
  6206  003ACC  EF6A  F01D         	goto	u1001
  6207  003AD0  EF6C  F01D         	goto	u1000
  6208  003AD4                     u1001:
  6209  003AD4  EF4F  F01D         	goto	l2829
  6210  003AD8                     u1000:
  6211  003AD8  0012               	return		;funcret
  6212  003ADA                     __end_of_LCDPutStr:
  6213                           	opt callstack 0
  6214                           
  6215 ;; *************** function _displayDHT *****************
  6216 ;; Defined at:
  6217 ;;		line 32 in file "display.c"
  6218 ;; Parameters:    Size  Location     Type
  6219 ;;		None
  6220 ;; Auto vars:     Size  Location     Type
  6221 ;;		None
  6222 ;; Return value:  Size  Location     Type
  6223 ;;                  1    wreg      void 
  6224 ;; Registers used:
  6225 ;;		wreg, status,2, status,0, cstack
  6226 ;; Tracked objects:
  6227 ;;		On entry : 0/0
  6228 ;;		On exit  : 0/0
  6229 ;;		Unchanged: 0/0
  6230 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6231 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6232 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6233 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6234 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6235 ;;Total ram usage:        0 bytes
  6236 ;; Hardware stack levels used:    1
  6237 ;; Hardware stack levels required when called:    7
  6238 ;; This function calls:
  6239 ;;		_LCDPutChar
  6240 ;;		_LCDPutInst
  6241 ;;		___awdiv
  6242 ;;		___awmod
  6243 ;; This function is called by:
  6244 ;;		_FSM
  6245 ;; This function uses a non-reentrant model
  6246 ;;
  6247                           
  6248                           	psect	text28
  6249  0035F4                     __ptext28:
  6250                           	opt callstack 0
  6251  0035F4                     _displayDHT:
  6252                           	opt callstack 22
  6253  0035F4                     
  6254                           ;display.c: 33:     if (temperature != temperature_old ){
  6255  0035F4  0100               	movlb	0	; () banked
  6256  0035F6  51D8               	movf	_temperature_old& (0+255),w,b
  6257  0035F8  19DA               	xorwf	_temperature& (0+255),w,b
  6258  0035FA  B4D8               	btfsc	status,2,c
  6259  0035FC  EF02  F01B         	goto	u1691
  6260  003600  EF04  F01B         	goto	u1690
  6261  003604                     u1691:
  6262  003604  EF27  F01B         	goto	l3513
  6263  003608                     u1690:
  6264  003608                     
  6265                           ; BSR set to: 0
  6266                           ;display.c: 34:         LCDPutInst(0xC5);
  6267  003608  0EC5               	movlw	197
  6268  00360A  EC8A  F01C         	call	_LCDPutInst
  6269                           
  6270                           ;display.c: 35:         LCDPutChar(temperature_dht11[0]/10 + '0');
  6271  00360E  C0C7  F060         	movff	_temperature_dht11,___awdiv@dividend
  6272  003612  0100               	movlb	0	; () banked
  6273  003614  6B61               	clrf	(___awdiv@dividend+1)& (0+255),b
  6274  003616  0E00               	movlw	0
  6275  003618  6F63               	movwf	(___awdiv@divisor+1)& (0+255),b
  6276  00361A  0E0A               	movlw	10
  6277  00361C  6F62               	movwf	___awdiv@divisor& (0+255),b
  6278  00361E  EC97  F01A         	call	___awdiv	;wreg free
  6279  003622  0100               	movlb	0	; () banked
  6280  003624  5160               	movf	?___awdiv& (0+255),w,b
  6281  003626  0F30               	addlw	48
  6282  003628  ECB4  F01C         	call	_LCDPutChar
  6283                           
  6284                           ;display.c: 36:         LCDPutChar(temperature_dht11[0]%10 + '0');
  6285  00362C  C0C7  F060         	movff	_temperature_dht11,___awmod@dividend
  6286  003630  0100               	movlb	0	; () banked
  6287  003632  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  6288  003634  0E00               	movlw	0
  6289  003636  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  6290  003638  0E0A               	movlw	10
  6291  00363A  6F62               	movwf	___awmod@divisor& (0+255),b
  6292  00363C  EC55  F01B         	call	___awmod	;wreg free
  6293  003640  0100               	movlb	0	; () banked
  6294  003642  5160               	movf	?___awmod& (0+255),w,b
  6295  003644  0F30               	addlw	48
  6296  003646  ECB4  F01C         	call	_LCDPutChar
  6297  00364A                     
  6298                           ;display.c: 37:         temperature_old = temperature;
  6299  00364A  C0DA  F0D8         	movff	_temperature,_temperature_old
  6300  00364E                     l3513:
  6301                           
  6302                           ;display.c: 40:     if (humidity != humidity_old ){
  6303  00364E  0100               	movlb	0	; () banked
  6304  003650  51D7               	movf	_humidity_old& (0+255),w,b
  6305  003652  19D9               	xorwf	_humidity& (0+255),w,b
  6306  003654  B4D8               	btfsc	status,2,c
  6307  003656  EF2F  F01B         	goto	u1701
  6308  00365A  EF31  F01B         	goto	u1700
  6309  00365E                     u1701:
  6310  00365E  EF54  F01B         	goto	l789
  6311  003662                     u1700:
  6312  003662                     
  6313                           ; BSR set to: 0
  6314                           ;display.c: 41:         LCDPutInst(0xCE);
  6315  003662  0ECE               	movlw	206
  6316  003664  EC8A  F01C         	call	_LCDPutInst
  6317                           
  6318                           ;display.c: 42:         LCDPutChar(humidity_dht11[0]/10 + '0');
  6319  003668  C0C5  F060         	movff	_humidity_dht11,___awdiv@dividend
  6320  00366C  0100               	movlb	0	; () banked
  6321  00366E  6B61               	clrf	(___awdiv@dividend+1)& (0+255),b
  6322  003670  0E00               	movlw	0
  6323  003672  6F63               	movwf	(___awdiv@divisor+1)& (0+255),b
  6324  003674  0E0A               	movlw	10
  6325  003676  6F62               	movwf	___awdiv@divisor& (0+255),b
  6326  003678  EC97  F01A         	call	___awdiv	;wreg free
  6327  00367C  0100               	movlb	0	; () banked
  6328  00367E  5160               	movf	?___awdiv& (0+255),w,b
  6329  003680  0F30               	addlw	48
  6330  003682  ECB4  F01C         	call	_LCDPutChar
  6331                           
  6332                           ;display.c: 43:         LCDPutChar(humidity_dht11[0]%10 + '0');
  6333  003686  C0C5  F060         	movff	_humidity_dht11,___awmod@dividend
  6334  00368A  0100               	movlb	0	; () banked
  6335  00368C  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  6336  00368E  0E00               	movlw	0
  6337  003690  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  6338  003692  0E0A               	movlw	10
  6339  003694  6F62               	movwf	___awmod@divisor& (0+255),b
  6340  003696  EC55  F01B         	call	___awmod	;wreg free
  6341  00369A  0100               	movlb	0	; () banked
  6342  00369C  5160               	movf	?___awmod& (0+255),w,b
  6343  00369E  0F30               	addlw	48
  6344  0036A0  ECB4  F01C         	call	_LCDPutChar
  6345  0036A4                     
  6346                           ;display.c: 44:         humidity_old = humidity;
  6347  0036A4  C0D9  F0D7         	movff	_humidity,_humidity_old
  6348  0036A8                     l789:
  6349  0036A8  0012               	return		;funcret
  6350  0036AA                     __end_of_displayDHT:
  6351                           	opt callstack 0
  6352                           
  6353 ;; *************** function ___awmod *****************
  6354 ;; Defined at:
  6355 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\awmod.c"
  6356 ;; Parameters:    Size  Location     Type
  6357 ;;  dividend        2    0[BANK0 ] int 
  6358 ;;  divisor         2    2[BANK0 ] int 
  6359 ;; Auto vars:     Size  Location     Type
  6360 ;;  sign            1    5[BANK0 ] unsigned char 
  6361 ;;  counter         1    4[BANK0 ] unsigned char 
  6362 ;; Return value:  Size  Location     Type
  6363 ;;                  2    0[BANK0 ] int 
  6364 ;; Registers used:
  6365 ;;		wreg, status,2, status,0
  6366 ;; Tracked objects:
  6367 ;;		On entry : 0/0
  6368 ;;		On exit  : 0/0
  6369 ;;		Unchanged: 0/0
  6370 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6371 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6372 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6373 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6374 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6375 ;;Total ram usage:        6 bytes
  6376 ;; Hardware stack levels used:    1
  6377 ;; Hardware stack levels required when called:    4
  6378 ;; This function calls:
  6379 ;;		Nothing
  6380 ;; This function is called by:
  6381 ;;		_increaseButton
  6382 ;;		_displayDHT
  6383 ;;		_display_state
  6384 ;; This function uses a non-reentrant model
  6385 ;;
  6386                           
  6387                           	psect	text29
  6388  0036AA                     __ptext29:
  6389                           	opt callstack 0
  6390  0036AA                     ___awmod:
  6391                           	opt callstack 23
  6392  0036AA  0E00               	movlw	0
  6393  0036AC  0100               	movlb	0	; () banked
  6394  0036AE  6F65               	movwf	___awmod@sign& (0+255),b
  6395  0036B0                     
  6396                           ; BSR set to: 0
  6397  0036B0  BF61               	btfsc	(___awmod@dividend+1)& (0+255),7,b
  6398  0036B2  EF5F  F01B         	goto	u1150
  6399  0036B6  EF5D  F01B         	goto	u1151
  6400  0036BA                     u1151:
  6401  0036BA  EF65  F01B         	goto	l2929
  6402  0036BE                     u1150:
  6403  0036BE                     
  6404                           ; BSR set to: 0
  6405  0036BE  6D60               	negf	___awmod@dividend& (0+255),b
  6406  0036C0  1F61               	comf	(___awmod@dividend+1)& (0+255),f,b
  6407  0036C2  B0D8               	btfsc	status,0,c
  6408  0036C4  2B61               	incf	(___awmod@dividend+1)& (0+255),f,b
  6409  0036C6                     
  6410                           ; BSR set to: 0
  6411  0036C6  0E01               	movlw	1
  6412  0036C8  6F65               	movwf	___awmod@sign& (0+255),b
  6413  0036CA                     l2929:
  6414                           
  6415                           ; BSR set to: 0
  6416  0036CA  BF63               	btfsc	(___awmod@divisor+1)& (0+255),7,b
  6417  0036CC  EF6C  F01B         	goto	u1160
  6418  0036D0  EF6A  F01B         	goto	u1161
  6419  0036D4                     u1161:
  6420  0036D4  EF70  F01B         	goto	l2933
  6421  0036D8                     u1160:
  6422  0036D8                     
  6423                           ; BSR set to: 0
  6424  0036D8  6D62               	negf	___awmod@divisor& (0+255),b
  6425  0036DA  1F63               	comf	(___awmod@divisor+1)& (0+255),f,b
  6426  0036DC  B0D8               	btfsc	status,0,c
  6427  0036DE  2B63               	incf	(___awmod@divisor+1)& (0+255),f,b
  6428  0036E0                     l2933:
  6429                           
  6430                           ; BSR set to: 0
  6431  0036E0  5162               	movf	___awmod@divisor& (0+255),w,b
  6432  0036E2  1163               	iorwf	(___awmod@divisor+1)& (0+255),w,b
  6433  0036E4  B4D8               	btfsc	status,2,c
  6434  0036E6  EF77  F01B         	goto	u1171
  6435  0036EA  EF79  F01B         	goto	u1170
  6436  0036EE                     u1171:
  6437  0036EE  EF9D  F01B         	goto	l2949
  6438  0036F2                     u1170:
  6439  0036F2                     
  6440                           ; BSR set to: 0
  6441  0036F2  0E01               	movlw	1
  6442  0036F4  6F64               	movwf	___awmod@counter& (0+255),b
  6443  0036F6  EF81  F01B         	goto	l2939
  6444  0036FA                     l2937:
  6445                           
  6446                           ; BSR set to: 0
  6447  0036FA  90D8               	bcf	status,0,c
  6448  0036FC  3762               	rlcf	___awmod@divisor& (0+255),f,b
  6449  0036FE  3763               	rlcf	(___awmod@divisor+1)& (0+255),f,b
  6450  003700  2B64               	incf	___awmod@counter& (0+255),f,b
  6451  003702                     l2939:
  6452                           
  6453                           ; BSR set to: 0
  6454  003702  AF63               	btfss	(___awmod@divisor+1)& (0+255),7,b
  6455  003704  EF86  F01B         	goto	u1181
  6456  003708  EF88  F01B         	goto	u1180
  6457  00370C                     u1181:
  6458  00370C  EF7D  F01B         	goto	l2937
  6459  003710                     u1180:
  6460  003710                     l2941:
  6461                           
  6462                           ; BSR set to: 0
  6463  003710  5162               	movf	___awmod@divisor& (0+255),w,b
  6464  003712  5D60               	subwf	___awmod@dividend& (0+255),w,b
  6465  003714  5163               	movf	(___awmod@divisor+1)& (0+255),w,b
  6466  003716  5961               	subwfb	(___awmod@dividend+1)& (0+255),w,b
  6467  003718  A0D8               	btfss	status,0,c
  6468  00371A  EF91  F01B         	goto	u1191
  6469  00371E  EF93  F01B         	goto	u1190
  6470  003722                     u1191:
  6471  003722  EF97  F01B         	goto	l2945
  6472  003726                     u1190:
  6473  003726                     
  6474                           ; BSR set to: 0
  6475  003726  5162               	movf	___awmod@divisor& (0+255),w,b
  6476  003728  5F60               	subwf	___awmod@dividend& (0+255),f,b
  6477  00372A  5163               	movf	(___awmod@divisor+1)& (0+255),w,b
  6478  00372C  5B61               	subwfb	(___awmod@dividend+1)& (0+255),f,b
  6479  00372E                     l2945:
  6480                           
  6481                           ; BSR set to: 0
  6482  00372E  90D8               	bcf	status,0,c
  6483  003730  3363               	rrcf	(___awmod@divisor+1)& (0+255),f,b
  6484  003732  3362               	rrcf	___awmod@divisor& (0+255),f,b
  6485  003734                     
  6486                           ; BSR set to: 0
  6487  003734  2F64               	decfsz	___awmod@counter& (0+255),f,b
  6488  003736  EF88  F01B         	goto	l2941
  6489  00373A                     l2949:
  6490                           
  6491                           ; BSR set to: 0
  6492  00373A  5165               	movf	___awmod@sign& (0+255),w,b
  6493  00373C  B4D8               	btfsc	status,2,c
  6494  00373E  EFA3  F01B         	goto	u1201
  6495  003742  EFA5  F01B         	goto	u1200
  6496  003746                     u1201:
  6497  003746  EFA9  F01B         	goto	l2953
  6498  00374A                     u1200:
  6499  00374A                     
  6500                           ; BSR set to: 0
  6501  00374A  6D60               	negf	___awmod@dividend& (0+255),b
  6502  00374C  1F61               	comf	(___awmod@dividend+1)& (0+255),f,b
  6503  00374E  B0D8               	btfsc	status,0,c
  6504  003750  2B61               	incf	(___awmod@dividend+1)& (0+255),f,b
  6505  003752                     l2953:
  6506                           
  6507                           ; BSR set to: 0
  6508  003752  C060  F060         	movff	___awmod@dividend,?___awmod
  6509  003756  C061  F061         	movff	___awmod@dividend+1,?___awmod+1
  6510  00375A                     
  6511                           ; BSR set to: 0
  6512  00375A  0012               	return		;funcret
  6513  00375C                     __end_of___awmod:
  6514                           	opt callstack 0
  6515                           
  6516 ;; *************** function ___awdiv *****************
  6517 ;; Defined at:
  6518 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\awdiv.c"
  6519 ;; Parameters:    Size  Location     Type
  6520 ;;  dividend        2    0[BANK0 ] int 
  6521 ;;  divisor         2    2[BANK0 ] int 
  6522 ;; Auto vars:     Size  Location     Type
  6523 ;;  quotient        2    6[BANK0 ] int 
  6524 ;;  sign            1    5[BANK0 ] unsigned char 
  6525 ;;  counter         1    4[BANK0 ] unsigned char 
  6526 ;; Return value:  Size  Location     Type
  6527 ;;                  2    0[BANK0 ] int 
  6528 ;; Registers used:
  6529 ;;		wreg, status,2, status,0
  6530 ;; Tracked objects:
  6531 ;;		On entry : 0/0
  6532 ;;		On exit  : 0/0
  6533 ;;		Unchanged: 0/0
  6534 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6535 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6536 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6537 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6538 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6539 ;;Total ram usage:        8 bytes
  6540 ;; Hardware stack levels used:    1
  6541 ;; Hardware stack levels required when called:    4
  6542 ;; This function calls:
  6543 ;;		Nothing
  6544 ;; This function is called by:
  6545 ;;		_displayDHT
  6546 ;;		_display_state
  6547 ;; This function uses a non-reentrant model
  6548 ;;
  6549                           
  6550                           	psect	text30
  6551  00352E                     __ptext30:
  6552                           	opt callstack 0
  6553  00352E                     ___awdiv:
  6554                           	opt callstack 23
  6555  00352E  0E00               	movlw	0
  6556  003530  0100               	movlb	0	; () banked
  6557  003532  6F65               	movwf	___awdiv@sign& (0+255),b
  6558  003534                     
  6559                           ; BSR set to: 0
  6560  003534  BF63               	btfsc	(___awdiv@divisor+1)& (0+255),7,b
  6561  003536  EFA1  F01A         	goto	u1090
  6562  00353A  EF9F  F01A         	goto	u1091
  6563  00353E                     u1091:
  6564  00353E  EFA7  F01A         	goto	l2885
  6565  003542                     u1090:
  6566  003542                     
  6567                           ; BSR set to: 0
  6568  003542  6D62               	negf	___awdiv@divisor& (0+255),b
  6569  003544  1F63               	comf	(___awdiv@divisor+1)& (0+255),f,b
  6570  003546  B0D8               	btfsc	status,0,c
  6571  003548  2B63               	incf	(___awdiv@divisor+1)& (0+255),f,b
  6572  00354A                     
  6573                           ; BSR set to: 0
  6574  00354A  0E01               	movlw	1
  6575  00354C  6F65               	movwf	___awdiv@sign& (0+255),b
  6576  00354E                     l2885:
  6577                           
  6578                           ; BSR set to: 0
  6579  00354E  BF61               	btfsc	(___awdiv@dividend+1)& (0+255),7,b
  6580  003550  EFAE  F01A         	goto	u1100
  6581  003554  EFAC  F01A         	goto	u1101
  6582  003558                     u1101:
  6583  003558  EFB4  F01A         	goto	l2891
  6584  00355C                     u1100:
  6585  00355C                     
  6586                           ; BSR set to: 0
  6587  00355C  6D60               	negf	___awdiv@dividend& (0+255),b
  6588  00355E  1F61               	comf	(___awdiv@dividend+1)& (0+255),f,b
  6589  003560  B0D8               	btfsc	status,0,c
  6590  003562  2B61               	incf	(___awdiv@dividend+1)& (0+255),f,b
  6591  003564                     
  6592                           ; BSR set to: 0
  6593  003564  0E01               	movlw	1
  6594  003566  1B65               	xorwf	___awdiv@sign& (0+255),f,b
  6595  003568                     l2891:
  6596                           
  6597                           ; BSR set to: 0
  6598  003568  0E00               	movlw	0
  6599  00356A  6F67               	movwf	(___awdiv@quotient+1)& (0+255),b
  6600  00356C  0E00               	movlw	0
  6601  00356E  6F66               	movwf	___awdiv@quotient& (0+255),b
  6602  003570                     
  6603                           ; BSR set to: 0
  6604  003570  5162               	movf	___awdiv@divisor& (0+255),w,b
  6605  003572  1163               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  6606  003574  B4D8               	btfsc	status,2,c
  6607  003576  EFBF  F01A         	goto	u1111
  6608  00357A  EFC1  F01A         	goto	u1110
  6609  00357E                     u1111:
  6610  00357E  EFE9  F01A         	goto	l2913
  6611  003582                     u1110:
  6612  003582                     
  6613                           ; BSR set to: 0
  6614  003582  0E01               	movlw	1
  6615  003584  6F64               	movwf	___awdiv@counter& (0+255),b
  6616  003586  EFC9  F01A         	goto	l2899
  6617  00358A                     l2897:
  6618                           
  6619                           ; BSR set to: 0
  6620  00358A  90D8               	bcf	status,0,c
  6621  00358C  3762               	rlcf	___awdiv@divisor& (0+255),f,b
  6622  00358E  3763               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  6623  003590  2B64               	incf	___awdiv@counter& (0+255),f,b
  6624  003592                     l2899:
  6625                           
  6626                           ; BSR set to: 0
  6627  003592  AF63               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  6628  003594  EFCE  F01A         	goto	u1121
  6629  003598  EFD0  F01A         	goto	u1120
  6630  00359C                     u1121:
  6631  00359C  EFC5  F01A         	goto	l2897
  6632  0035A0                     u1120:
  6633  0035A0                     l2901:
  6634                           
  6635                           ; BSR set to: 0
  6636  0035A0  90D8               	bcf	status,0,c
  6637  0035A2  3766               	rlcf	___awdiv@quotient& (0+255),f,b
  6638  0035A4  3767               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  6639  0035A6                     
  6640                           ; BSR set to: 0
  6641  0035A6  5162               	movf	___awdiv@divisor& (0+255),w,b
  6642  0035A8  5D60               	subwf	___awdiv@dividend& (0+255),w,b
  6643  0035AA  5163               	movf	(___awdiv@divisor+1)& (0+255),w,b
  6644  0035AC  5961               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  6645  0035AE  A0D8               	btfss	status,0,c
  6646  0035B0  EFDC  F01A         	goto	u1131
  6647  0035B4  EFDE  F01A         	goto	u1130
  6648  0035B8                     u1131:
  6649  0035B8  EFE3  F01A         	goto	l2909
  6650  0035BC                     u1130:
  6651  0035BC                     
  6652                           ; BSR set to: 0
  6653  0035BC  5162               	movf	___awdiv@divisor& (0+255),w,b
  6654  0035BE  5F60               	subwf	___awdiv@dividend& (0+255),f,b
  6655  0035C0  5163               	movf	(___awdiv@divisor+1)& (0+255),w,b
  6656  0035C2  5B61               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  6657  0035C4                     
  6658                           ; BSR set to: 0
  6659  0035C4  8166               	bsf	___awdiv@quotient& (0+255),0,b
  6660  0035C6                     l2909:
  6661                           
  6662                           ; BSR set to: 0
  6663  0035C6  90D8               	bcf	status,0,c
  6664  0035C8  3363               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  6665  0035CA  3362               	rrcf	___awdiv@divisor& (0+255),f,b
  6666  0035CC                     
  6667                           ; BSR set to: 0
  6668  0035CC  2F64               	decfsz	___awdiv@counter& (0+255),f,b
  6669  0035CE  EFD0  F01A         	goto	l2901
  6670  0035D2                     l2913:
  6671                           
  6672                           ; BSR set to: 0
  6673  0035D2  5165               	movf	___awdiv@sign& (0+255),w,b
  6674  0035D4  B4D8               	btfsc	status,2,c
  6675  0035D6  EFEF  F01A         	goto	u1141
  6676  0035DA  EFF1  F01A         	goto	u1140
  6677  0035DE                     u1141:
  6678  0035DE  EFF5  F01A         	goto	l2917
  6679  0035E2                     u1140:
  6680  0035E2                     
  6681                           ; BSR set to: 0
  6682  0035E2  6D66               	negf	___awdiv@quotient& (0+255),b
  6683  0035E4  1F67               	comf	(___awdiv@quotient+1)& (0+255),f,b
  6684  0035E6  B0D8               	btfsc	status,0,c
  6685  0035E8  2B67               	incf	(___awdiv@quotient+1)& (0+255),f,b
  6686  0035EA                     l2917:
  6687                           
  6688                           ; BSR set to: 0
  6689  0035EA  C066  F060         	movff	___awdiv@quotient,?___awdiv
  6690  0035EE  C067  F061         	movff	___awdiv@quotient+1,?___awdiv+1
  6691  0035F2                     
  6692                           ; BSR set to: 0
  6693  0035F2  0012               	return		;funcret
  6694  0035F4                     __end_of___awdiv:
  6695                           	opt callstack 0
  6696                           
  6697 ;; *************** function _LCDPutInst *****************
  6698 ;; Defined at:
  6699 ;;		line 180 in file "BBSPI_LCD.c"
  6700 ;; Parameters:    Size  Location     Type
  6701 ;;  ch              1    wreg     unsigned char 
  6702 ;; Auto vars:     Size  Location     Type
  6703 ;;  ch              1    5[BANK0 ] unsigned char 
  6704 ;; Return value:  Size  Location     Type
  6705 ;;                  1    wreg      void 
  6706 ;; Registers used:
  6707 ;;		wreg, status,2, status,0, cstack
  6708 ;; Tracked objects:
  6709 ;;		On entry : 0/0
  6710 ;;		On exit  : 0/0
  6711 ;;		Unchanged: 0/0
  6712 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6713 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6714 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6715 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6716 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6717 ;;Total ram usage:        1 bytes
  6718 ;; Hardware stack levels used:    1
  6719 ;; Hardware stack levels required when called:    6
  6720 ;; This function calls:
  6721 ;;		_WritePort_BBSPI
  6722 ;; This function is called by:
  6723 ;;		_LCDInit
  6724 ;;		_initial_display
  6725 ;;		_initDisplayDHT
  6726 ;;		_displayDHT
  6727 ;;		_display_state
  6728 ;; This function uses a non-reentrant model
  6729 ;;
  6730                           
  6731                           	psect	text31
  6732  003914                     __ptext31:
  6733                           	opt callstack 0
  6734  003914                     _LCDPutInst:
  6735                           	opt callstack 22
  6736                           
  6737                           ; BSR set to: 0
  6738                           ;incstack = 0
  6739                           ;LCDPutInst@ch stored from wreg
  6740  003914  0100               	movlb	0	; () banked
  6741  003916  6F65               	movwf	LCDPutInst@ch& (0+255),b
  6742  003918                     
  6743                           ;BBSPI_LCD.c: 180: void LCDPutInst (unsigned char ch);BBSPI_LCD.c: 181: {;BBSPI_LCD.c: 1
      +                          82:     _delay((unsigned long)((50)*(10000000/4000000.0)));
  6744  003918  0E29               	movlw	41
  6745  00391A                     u1997:
  6746  00391A  2EE8               	decfsz	wreg,f,c
  6747  00391C  D7FE               	bra	u1997
  6748  00391E  D000               	nop2	
  6749  003920                     
  6750                           ;BBSPI_LCD.c: 183:     WritePort_BBSPI (0x12, 0x00);
  6751  003920  0E00               	movlw	0
  6752  003922  0100               	movlb	0	; () banked
  6753  003924  6F63               	movwf	WritePort_BBSPI@a& (0+255),b
  6754  003926  0E12               	movlw	18
  6755  003928  ECF4  F01D         	call	_WritePort_BBSPI
  6756  00392C                     
  6757                           ;BBSPI_LCD.c: 184:     _delay((unsigned long)((10)*(10000000/4000000.0)));
  6758  00392C  0E08               	movlw	8
  6759  00392E                     u2007:
  6760  00392E  2EE8               	decfsz	wreg,f,c
  6761  003930  D7FE               	bra	u2007
  6762  003932  F000               	nop	
  6763  003934                     
  6764                           ;BBSPI_LCD.c: 185:     WritePort_BBSPI (0x13, ch);
  6765  003934  C065  F063         	movff	LCDPutInst@ch,WritePort_BBSPI@a
  6766  003938  0E13               	movlw	19
  6767  00393A  ECF4  F01D         	call	_WritePort_BBSPI
  6768  00393E                     
  6769                           ;BBSPI_LCD.c: 186:     _delay((unsigned long)((10)*(10000000/4000000.0)));
  6770  00393E  0E08               	movlw	8
  6771  003940                     u2017:
  6772  003940  2EE8               	decfsz	wreg,f,c
  6773  003942  D7FE               	bra	u2017
  6774  003944  F000               	nop	
  6775  003946                     
  6776                           ;BBSPI_LCD.c: 187:     WritePort_BBSPI (0x12,0x40);
  6777  003946  0E40               	movlw	64
  6778  003948  0100               	movlb	0	; () banked
  6779  00394A  6F63               	movwf	WritePort_BBSPI@a& (0+255),b
  6780  00394C  0E12               	movlw	18
  6781  00394E  ECF4  F01D         	call	_WritePort_BBSPI
  6782  003952                     
  6783                           ;BBSPI_LCD.c: 188:     _delay((unsigned long)((10)*(10000000/4000000.0)));
  6784  003952  0E08               	movlw	8
  6785  003954                     u2027:
  6786  003954  2EE8               	decfsz	wreg,f,c
  6787  003956  D7FE               	bra	u2027
  6788  003958  F000               	nop	
  6789  00395A                     
  6790                           ;BBSPI_LCD.c: 189:     WritePort_BBSPI (0x12, 0x00);
  6791  00395A  0E00               	movlw	0
  6792  00395C  0100               	movlb	0	; () banked
  6793  00395E  6F63               	movwf	WritePort_BBSPI@a& (0+255),b
  6794  003960  0E12               	movlw	18
  6795  003962  ECF4  F01D         	call	_WritePort_BBSPI
  6796  003966  0012               	return		;funcret
  6797  003968                     __end_of_LCDPutInst:
  6798                           	opt callstack 0
  6799                           
  6800 ;; *************** function _LCDPutChar *****************
  6801 ;; Defined at:
  6802 ;;		line 161 in file "BBSPI_LCD.c"
  6803 ;; Parameters:    Size  Location     Type
  6804 ;;  ch              1    wreg     unsigned char 
  6805 ;; Auto vars:     Size  Location     Type
  6806 ;;  ch              1    5[BANK0 ] unsigned char 
  6807 ;; Return value:  Size  Location     Type
  6808 ;;                  1    wreg      void 
  6809 ;; Registers used:
  6810 ;;		wreg, status,2, status,0, cstack
  6811 ;; Tracked objects:
  6812 ;;		On entry : 0/0
  6813 ;;		On exit  : 0/0
  6814 ;;		Unchanged: 0/0
  6815 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6816 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6817 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6818 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6819 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6820 ;;Total ram usage:        1 bytes
  6821 ;; Hardware stack levels used:    1
  6822 ;; Hardware stack levels required when called:    6
  6823 ;; This function calls:
  6824 ;;		_WritePort_BBSPI
  6825 ;; This function is called by:
  6826 ;;		_LCDPutStr
  6827 ;;		_displayDHT
  6828 ;;		_display_state
  6829 ;; This function uses a non-reentrant model
  6830 ;;
  6831                           
  6832                           	psect	text32
  6833  003968                     __ptext32:
  6834                           	opt callstack 0
  6835  003968                     _LCDPutChar:
  6836                           	opt callstack 21
  6837                           
  6838                           ;incstack = 0
  6839                           ;LCDPutChar@ch stored from wreg
  6840  003968  0100               	movlb	0	; () banked
  6841  00396A  6F65               	movwf	LCDPutChar@ch& (0+255),b
  6842  00396C                     
  6843                           ;BBSPI_LCD.c: 161: void LCDPutChar (unsigned char ch);BBSPI_LCD.c: 162: {;BBSPI_LCD.c: 1
      +                          63:     _delay((unsigned long)((50)*(10000000/4000000.0)));
  6844  00396C  0E29               	movlw	41
  6845  00396E                     u2037:
  6846  00396E  2EE8               	decfsz	wreg,f,c
  6847  003970  D7FE               	bra	u2037
  6848  003972  D000               	nop2	
  6849  003974                     
  6850                           ;BBSPI_LCD.c: 164:     WritePort_BBSPI (0x12, 0x80);
  6851  003974  0E80               	movlw	128
  6852  003976  0100               	movlb	0	; () banked
  6853  003978  6F63               	movwf	WritePort_BBSPI@a& (0+255),b
  6854  00397A  0E12               	movlw	18
  6855  00397C  ECF4  F01D         	call	_WritePort_BBSPI
  6856  003980                     
  6857                           ;BBSPI_LCD.c: 165:     _delay((unsigned long)((10)*(10000000/4000000.0)));
  6858  003980  0E08               	movlw	8
  6859  003982                     u2047:
  6860  003982  2EE8               	decfsz	wreg,f,c
  6861  003984  D7FE               	bra	u2047
  6862  003986  F000               	nop	
  6863  003988                     
  6864                           ;BBSPI_LCD.c: 166:     WritePort_BBSPI (0x13, ch);
  6865  003988  C065  F063         	movff	LCDPutChar@ch,WritePort_BBSPI@a
  6866  00398C  0E13               	movlw	19
  6867  00398E  ECF4  F01D         	call	_WritePort_BBSPI
  6868  003992                     
  6869                           ;BBSPI_LCD.c: 167:     _delay((unsigned long)((10)*(10000000/4000000.0)));
  6870  003992  0E08               	movlw	8
  6871  003994                     u2057:
  6872  003994  2EE8               	decfsz	wreg,f,c
  6873  003996  D7FE               	bra	u2057
  6874  003998  F000               	nop	
  6875  00399A                     
  6876                           ;BBSPI_LCD.c: 168:     WritePort_BBSPI (0x12, 0xC0);
  6877  00399A  0EC0               	movlw	192
  6878  00399C  0100               	movlb	0	; () banked
  6879  00399E  6F63               	movwf	WritePort_BBSPI@a& (0+255),b
  6880  0039A0  0E12               	movlw	18
  6881  0039A2  ECF4  F01D         	call	_WritePort_BBSPI
  6882  0039A6                     
  6883                           ;BBSPI_LCD.c: 169:     _delay((unsigned long)((10)*(10000000/4000000.0)));
  6884  0039A6  0E08               	movlw	8
  6885  0039A8                     u2067:
  6886  0039A8  2EE8               	decfsz	wreg,f,c
  6887  0039AA  D7FE               	bra	u2067
  6888  0039AC  F000               	nop	
  6889  0039AE                     
  6890                           ;BBSPI_LCD.c: 170:     WritePort_BBSPI (0x12, 0x00);
  6891  0039AE  0E00               	movlw	0
  6892  0039B0  0100               	movlb	0	; () banked
  6893  0039B2  6F63               	movwf	WritePort_BBSPI@a& (0+255),b
  6894  0039B4  0E12               	movlw	18
  6895  0039B6  ECF4  F01D         	call	_WritePort_BBSPI
  6896  0039BA  0012               	return		;funcret
  6897  0039BC                     __end_of_LCDPutChar:
  6898                           	opt callstack 0
  6899                           
  6900 ;; *************** function _WritePort_BBSPI *****************
  6901 ;; Defined at:
  6902 ;;		line 145 in file "BBSPI_LCD.c"
  6903 ;; Parameters:    Size  Location     Type
  6904 ;;  port_add        1    wreg     unsigned char 
  6905 ;;  a               1    3[BANK0 ] unsigned char 
  6906 ;; Auto vars:     Size  Location     Type
  6907 ;;  port_add        1    4[BANK0 ] unsigned char 
  6908 ;; Return value:  Size  Location     Type
  6909 ;;                  1    wreg      void 
  6910 ;; Registers used:
  6911 ;;		wreg, status,2, status,0, cstack
  6912 ;; Tracked objects:
  6913 ;;		On entry : 0/0
  6914 ;;		On exit  : 0/0
  6915 ;;		Unchanged: 0/0
  6916 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6917 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6918 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6919 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6920 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6921 ;;Total ram usage:        2 bytes
  6922 ;; Hardware stack levels used:    1
  6923 ;; Hardware stack levels required when called:    5
  6924 ;; This function calls:
  6925 ;;		_SendByteBBSPI
  6926 ;; This function is called by:
  6927 ;;		_LCDInit
  6928 ;;		_LCDPutChar
  6929 ;;		_LCDPutInst
  6930 ;; This function uses a non-reentrant model
  6931 ;;
  6932                           
  6933                           	psect	text33
  6934  003BE8                     __ptext33:
  6935                           	opt callstack 0
  6936  003BE8                     _WritePort_BBSPI:
  6937                           	opt callstack 21
  6938                           
  6939                           ;incstack = 0
  6940                           ;WritePort_BBSPI@port_add stored from wreg
  6941  003BE8  0100               	movlb	0	; () banked
  6942  003BEA  6F64               	movwf	WritePort_BBSPI@port_add& (0+255),b
  6943  003BEC                     
  6944                           ;BBSPI_LCD.c: 145: void WritePort_BBSPI (unsigned char port_add, unsigned char a);BBSPI_
      +                          LCD.c: 146: {;BBSPI_LCD.c: 147:     LATAbits.LATA2 = 0;
  6945  003BEC  9489               	bcf	137,2,c	;volatile
  6946  003BEE                     
  6947                           ;BBSPI_LCD.c: 148:     SendByteBBSPI(0x40);
  6948  003BEE  0E40               	movlw	64
  6949  003BF0  EC22  F01C         	call	_SendByteBBSPI
  6950                           
  6951                           ;BBSPI_LCD.c: 149:     SendByteBBSPI(port_add);
  6952  003BF4  0100               	movlb	0	; () banked
  6953  003BF6  5164               	movf	WritePort_BBSPI@port_add& (0+255),w,b
  6954  003BF8  EC22  F01C         	call	_SendByteBBSPI
  6955                           
  6956                           ;BBSPI_LCD.c: 150:     SendByteBBSPI(a);
  6957  003BFC  0100               	movlb	0	; () banked
  6958  003BFE  5163               	movf	WritePort_BBSPI@a& (0+255),w,b
  6959  003C00  EC22  F01C         	call	_SendByteBBSPI
  6960  003C04                     
  6961                           ;BBSPI_LCD.c: 151:     LATAbits.LATA2 = 1;
  6962  003C04  8489               	bsf	137,2,c	;volatile
  6963  003C06  0012               	return		;funcret
  6964  003C08                     __end_of_WritePort_BBSPI:
  6965                           	opt callstack 0
  6966                           
  6967 ;; *************** function _SendByteBBSPI *****************
  6968 ;; Defined at:
  6969 ;;		line 92 in file "BBSPI_LCD.c"
  6970 ;; Parameters:    Size  Location     Type
  6971 ;;  output          1    wreg     unsigned char 
  6972 ;; Auto vars:     Size  Location     Type
  6973 ;;  output          1    0[BANK0 ] unsigned char 
  6974 ;;  input           1    2[BANK0 ] unsigned char 
  6975 ;;  bitcount        1    1[BANK0 ] unsigned char 
  6976 ;; Return value:  Size  Location     Type
  6977 ;;                  1    wreg      void 
  6978 ;; Registers used:
  6979 ;;		wreg, status,2, status,0
  6980 ;; Tracked objects:
  6981 ;;		On entry : 0/0
  6982 ;;		On exit  : 0/0
  6983 ;;		Unchanged: 0/0
  6984 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6985 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6986 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6987 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6988 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6989 ;;Total ram usage:        3 bytes
  6990 ;; Hardware stack levels used:    1
  6991 ;; Hardware stack levels required when called:    4
  6992 ;; This function calls:
  6993 ;;		Nothing
  6994 ;; This function is called by:
  6995 ;;		_Port_BBSPIInit
  6996 ;;		_WritePort_BBSPI
  6997 ;; This function uses a non-reentrant model
  6998 ;;
  6999                           
  7000                           	psect	text34
  7001  003844                     __ptext34:
  7002                           	opt callstack 0
  7003  003844                     _SendByteBBSPI:
  7004                           	opt callstack 21
  7005                           
  7006                           ;incstack = 0
  7007                           ;SendByteBBSPI@output stored from wreg
  7008  003844  0100               	movlb	0	; () banked
  7009  003846  6F60               	movwf	SendByteBBSPI@output& (0+255),b
  7010  003848                     
  7011                           ;BBSPI_LCD.c: 92: void SendByteBBSPI (unsigned char output);BBSPI_LCD.c: 93: {;BBSPI_LCD
      +                          .c: 94:     unsigned char bitcount;;BBSPI_LCD.c: 95:     unsigned char input = output;
  7012  003848  C060  F062         	movff	SendByteBBSPI@output,SendByteBBSPI@input
  7013  00384C                     
  7014                           ;BBSPI_LCD.c: 97:     for(bitcount=0;bitcount<8;bitcount++)
  7015  00384C  0E00               	movlw	0
  7016  00384E  0100               	movlb	0	; () banked
  7017  003850  6F61               	movwf	SendByteBBSPI@bitcount& (0+255),b
  7018  003852                     l668:
  7019                           
  7020                           ; BSR set to: 0
  7021                           ;BBSPI_LCD.c: 98:     {;BBSPI_LCD.c: 100:         if(output & 0x80)
  7022  003852  AF60               	btfss	SendByteBBSPI@output& (0+255),7,b
  7023  003854  EF2E  F01C         	goto	u971
  7024  003858  EF30  F01C         	goto	u970
  7025  00385C                     u971:
  7026  00385C  EF33  F01C         	goto	l670
  7027  003860                     u970:
  7028  003860                     
  7029                           ; BSR set to: 0
  7030                           ;BBSPI_LCD.c: 101:             LATCbits.LATC5 = 1;
  7031  003860  8A8B               	bsf	139,5,c	;volatile
  7032  003862  EF34  F01C         	goto	l671
  7033  003866                     l670:
  7034                           
  7035                           ; BSR set to: 0
  7036                           ;BBSPI_LCD.c: 103:             LATCbits.LATC5 = 0;
  7037  003866  9A8B               	bcf	139,5,c	;volatile
  7038  003868                     l671:
  7039                           
  7040                           ; BSR set to: 0
  7041                           ;BBSPI_LCD.c: 105:         if (LATCbits.LATC4)
  7042  003868  A88B               	btfss	139,4,c	;volatile
  7043  00386A  EF39  F01C         	goto	u981
  7044  00386E  EF3B  F01C         	goto	u980
  7045  003872                     u981:
  7046  003872  EF3F  F01C         	goto	l2759
  7047  003876                     u980:
  7048  003876                     
  7049                           ; BSR set to: 0
  7050                           ;BBSPI_LCD.c: 106:             input = (input << 1) | 0x1;
  7051  003876  80D8               	bsf	status,0,c
  7052  003878  3762               	rlcf	SendByteBBSPI@input& (0+255),f,b
  7053  00387A  EF42  F01C         	goto	l2761
  7054  00387E                     l2759:
  7055                           
  7056                           ; BSR set to: 0
  7057                           ;BBSPI_LCD.c: 108:             input = input << 1;
  7058  00387E  5162               	movf	SendByteBBSPI@input& (0+255),w,b
  7059  003880  2562               	addwf	SendByteBBSPI@input& (0+255),w,b
  7060  003882  6F62               	movwf	SendByteBBSPI@input& (0+255),b
  7061  003884                     l2761:
  7062                           
  7063                           ; BSR set to: 0
  7064                           ;BBSPI_LCD.c: 109:         LATCbits.LATC3 = 1;
  7065  003884  868B               	bsf	139,3,c	;volatile
  7066  003886                     
  7067                           ; BSR set to: 0
  7068                           ;BBSPI_LCD.c: 110:         __nop();__nop();__nop();__nop();__nop();__nop();
  7069  003886  F000               	nop	
  7070  003888  F000               	nop	
  7071  00388A  F000               	nop	
  7072  00388C  F000               	nop	
  7073  00388E  F000               	nop	
  7074  003890  F000               	nop	
  7075  003892                     
  7076                           ;BBSPI_LCD.c: 112:         LATCbits.LATC3 = 0;
  7077  003892  968B               	bcf	139,3,c	;volatile
  7078                           
  7079                           ;BBSPI_LCD.c: 113:         output <<= 1;
  7080  003894  0100               	movlb	0	; () banked
  7081  003896  90D8               	bcf	status,0,c
  7082  003898  3760               	rlcf	SendByteBBSPI@output& (0+255),f,b
  7083  00389A                     
  7084                           ; BSR set to: 0
  7085                           ;BBSPI_LCD.c: 114:     }
  7086  00389A  2B61               	incf	SendByteBBSPI@bitcount& (0+255),f,b
  7087  00389C                     
  7088                           ; BSR set to: 0
  7089  00389C  0E07               	movlw	7
  7090  00389E  6561               	cpfsgt	SendByteBBSPI@bitcount& (0+255),b
  7091  0038A0  EF54  F01C         	goto	u991
  7092  0038A4  EF56  F01C         	goto	u990
  7093  0038A8                     u991:
  7094  0038A8  EF29  F01C         	goto	l668
  7095  0038AC                     u990:
  7096  0038AC                     
  7097                           ; BSR set to: 0
  7098  0038AC  0012               	return		;funcret
  7099  0038AE                     __end_of_SendByteBBSPI:
  7100                           	opt callstack 0
  7101                           
  7102 ;; *************** function _main_interrupt *****************
  7103 ;; Defined at:
  7104 ;;		line 16 in file "main.c"
  7105 ;; Parameters:    Size  Location     Type
  7106 ;;		None
  7107 ;; Auto vars:     Size  Location     Type
  7108 ;;  temp            2    0        int 
  7109 ;; Return value:  Size  Location     Type
  7110 ;;                  1    wreg      void 
  7111 ;; Registers used:
  7112 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7113 ;; Tracked objects:
  7114 ;;		On entry : 0/0
  7115 ;;		On exit  : 0/0
  7116 ;;		Unchanged: 0/0
  7117 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7118 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7119 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7120 ;;      Temps:          7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7121 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7122 ;;Total ram usage:        9 bytes
  7123 ;; Hardware stack levels used:    1
  7124 ;; Hardware stack levels required when called:    3
  7125 ;; This function calls:
  7126 ;;		_timer_ISR
  7127 ;; This function is called by:
  7128 ;;		Interrupt level 2
  7129 ;; This function uses a non-reentrant model
  7130 ;;
  7131                           
  7132                           	psect	intcode
  7133  000008                     __pintcode:
  7134                           	opt callstack 0
  7135  000008                     _main_interrupt:
  7136                           	opt callstack 20
  7137                           
  7138                           ; BSR set to: 0
  7139                           ;incstack = 0
  7140  000008  825D               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  7141  00000A  ED06  F019         	call	int_func,f	;refresh shadow registers
  7142                           
  7143                           	psect	intcode_body
  7144  00320C                     __pintcode_body:
  7145                           	opt callstack 20
  7146  00320C                     int_func:
  7147                           	opt callstack 20
  7148  00320C  0006               	pop		; remove dummy address from shadow register refresh
  7149  00320E  CFE1 F03E          	movff	fsr1l,??_main_interrupt+1
  7150  003212  CFE2 F03F          	movff	fsr1h,??_main_interrupt+2
  7151  003216  CFD9 F040          	movff	fsr2l,??_main_interrupt+3
  7152  00321A  CFDA F041          	movff	fsr2h,??_main_interrupt+4
  7153  00321E  CFF3 F042          	movff	prodl,??_main_interrupt+5
  7154  003222  CFF4 F043          	movff	prodh,??_main_interrupt+6
  7155  003226                     
  7156                           ;main.c: 17:     if (INTCONbits.TMR0IE && INTCONbits.TMR0IF){
  7157  003226  AAF2               	btfss	242,5,c	;volatile
  7158  003228  EF18  F019         	goto	i2u182_41
  7159  00322C  EF1A  F019         	goto	i2u182_40
  7160  003230                     i2u182_41:
  7161  003230  EF8B  F019         	goto	i2l107
  7162  003234                     i2u182_40:
  7163  003234  A4F2               	btfss	242,2,c	;volatile
  7164  003236  EF1F  F019         	goto	i2u183_41
  7165  00323A  EF21  F019         	goto	i2u183_40
  7166  00323E                     i2u183_41:
  7167  00323E  EF8B  F019         	goto	i2l107
  7168  003242                     i2u183_40:
  7169  003242                     
  7170                           ;main.c: 18:         INTCONbits.TMR0IF = 0;
  7171  003242  94F2               	bcf	242,2,c	;volatile
  7172  003244                     
  7173                           ;main.c: 19:         TMR0 = 0xB2;
  7174  003244  0E00               	movlw	0
  7175  003246  6ED7               	movwf	215,c	;volatile
  7176  003248  0EB2               	movlw	178
  7177  00324A  6ED6               	movwf	214,c	;volatile
  7178  00324C                     
  7179                           ;main.c: 20:         if (state_machine == HEAT_UP) temp_heat_up++;
  7180  00324C  0457               	decf	_state_machine^0,w,c
  7181  00324E  A4D8               	btfss	status,2,c
  7182  003250  EF2C  F019         	goto	i2u184_41
  7183  003254  EF2E  F019         	goto	i2u184_40
  7184  003258                     i2u184_41:
  7185  003258  EF31  F019         	goto	i2l3697
  7186  00325C                     i2u184_40:
  7187  00325C  0100               	movlb	0	; () banked
  7188  00325E  4BD5               	infsnz	_temp_heat_up& (0+255),f,b
  7189  003260  2BD6               	incf	(_temp_heat_up+1)& (0+255),f,b
  7190  003262                     i2l3697:
  7191                           
  7192                           ;main.c: 21:         if (state_machine == WORKING && temp_humidity <= HUMI_SWAP*10) temp
      +                          _humidity++;
  7193  003262  0E02               	movlw	2
  7194  003264  1857               	xorwf	_state_machine^0,w,c
  7195  003266  A4D8               	btfss	status,2,c
  7196  003268  EF38  F019         	goto	i2u185_41
  7197  00326C  EF3A  F019         	goto	i2u185_40
  7198  003270                     i2u185_41:
  7199  003270  EF4D  F019         	goto	i2l3703
  7200  003274                     i2u185_40:
  7201  003274  505A               	movf	_HUMI_SWAP^0,w,c
  7202  003276  0D0A               	mullw	10
  7203  003278  5052               	movf	_temp_humidity^0,w,c
  7204  00327A  5CF3               	subwf	243,w,c
  7205  00327C  50F4               	movf	244,w,c
  7206  00327E  0A80               	xorlw	128
  7207  003280  6E3D               	movwf	??_main_interrupt^0,c
  7208  003282  5053               	movf	(_temp_humidity+1)^0,w,c
  7209  003284  0A80               	xorlw	128
  7210  003286  583D               	subwfb	??_main_interrupt^0,w,c
  7211  003288  A0D8               	btfss	status,0,c
  7212  00328A  EF49  F019         	goto	i2u186_41
  7213  00328E  EF4B  F019         	goto	i2u186_40
  7214  003292                     i2u186_41:
  7215  003292  EF4D  F019         	goto	i2l3703
  7216  003296                     i2u186_40:
  7217  003296  4A52               	infsnz	_temp_humidity^0,f,c
  7218  003298  2A53               	incf	(_temp_humidity+1)^0,f,c
  7219  00329A                     i2l3703:
  7220                           
  7221                           ;main.c: 22:         if (ALLOW_TIMER_REGISTER == 1){
  7222  00329A  0455               	decf	_ALLOW_TIMER_REGISTER^0,w,c
  7223  00329C  A4D8               	btfss	status,2,c
  7224  00329E  EF53  F019         	goto	i2u187_41
  7225  0032A2  EF55  F019         	goto	i2u187_40
  7226  0032A6                     i2u187_41:
  7227  0032A6  EF57  F019         	goto	i2l3707
  7228  0032AA                     i2u187_40:
  7229  0032AA  EC14  F017         	call	_timer_ISR	;wreg free
  7230  0032AE                     i2l3707:
  7231                           
  7232                           ;main.c: 25:         if (state_machine == WORKING && state_working == HEATER_WORK){
  7233  0032AE  0E02               	movlw	2
  7234  0032B0  1857               	xorwf	_state_machine^0,w,c
  7235  0032B2  A4D8               	btfss	status,2,c
  7236  0032B4  EF5E  F019         	goto	i2u188_41
  7237  0032B8  EF60  F019         	goto	i2u188_40
  7238  0032BC                     i2u188_41:
  7239  0032BC  EF6D  F019         	goto	i2l3713
  7240  0032C0                     i2u188_40:
  7241  0032C0  5056               	movf	_state_working^0,w,c
  7242  0032C2  A4D8               	btfss	status,2,c
  7243  0032C4  EF66  F019         	goto	i2u189_41
  7244  0032C8  EF68  F019         	goto	i2u189_40
  7245  0032CC                     i2u189_41:
  7246  0032CC  EF6D  F019         	goto	i2l3713
  7247  0032D0                     i2u189_40:
  7248  0032D0                     
  7249                           ;main.c: 26:             time_checkout_HEATER++;
  7250  0032D0  0100               	movlb	0	; () banked
  7251  0032D2  4BD3               	infsnz	_time_checkout_HEATER& (0+255),f,b
  7252  0032D4  2BD4               	incf	(_time_checkout_HEATER+1)& (0+255),f,b
  7253                           
  7254                           ;main.c: 27:         }
  7255  0032D6  EF81  F019         	goto	i2l3719
  7256  0032DA                     i2l3713:
  7257  0032DA  0E02               	movlw	2
  7258  0032DC  1857               	xorwf	_state_machine^0,w,c
  7259  0032DE  A4D8               	btfss	status,2,c
  7260  0032E0  EF74  F019         	goto	i2u190_41
  7261  0032E4  EF76  F019         	goto	i2u190_40
  7262  0032E8                     i2u190_41:
  7263  0032E8  EF81  F019         	goto	i2l3719
  7264  0032EC                     i2u190_40:
  7265  0032EC  0456               	decf	_state_working^0,w,c
  7266  0032EE  A4D8               	btfss	status,2,c
  7267  0032F0  EF7C  F019         	goto	i2u191_41
  7268  0032F4  EF7E  F019         	goto	i2u191_40
  7269  0032F8                     i2u191_41:
  7270  0032F8  EF81  F019         	goto	i2l3719
  7271  0032FC                     i2u191_40:
  7272  0032FC                     
  7273                           ;main.c: 29:             time_checkout_HEATPUMB++;
  7274  0032FC  0100               	movlb	0	; () banked
  7275  0032FE  4BD1               	infsnz	_time_checkout_HEATPUMB& (0+255),f,b
  7276  003300  2BD2               	incf	(_time_checkout_HEATPUMB+1)& (0+255),f,b
  7277  003302                     i2l3719:
  7278                           
  7279                           ;main.c: 31:         if (BUTTON_INC_STATE >= 2) hold_but_B++;
  7280  003302  0E01               	movlw	1
  7281  003304  645B               	cpfsgt	_BUTTON_INC_STATE^0,c
  7282  003306  EF87  F019         	goto	i2u192_41
  7283  00330A  EF89  F019         	goto	i2u192_40
  7284  00330E                     i2u192_41:
  7285  00330E  EF8B  F019         	goto	i2l107
  7286  003312                     i2u192_40:
  7287  003312  0100               	movlb	0	; () banked
  7288  003314  2BDC               	incf	_hold_but_B& (0+255),f,b
  7289  003316                     i2l107:
  7290  003316  C043  FFF4         	movff	??_main_interrupt+6,prodh
  7291  00331A  C042  FFF3         	movff	??_main_interrupt+5,prodl
  7292  00331E  C041  FFDA         	movff	??_main_interrupt+4,fsr2h
  7293  003322  C040  FFD9         	movff	??_main_interrupt+3,fsr2l
  7294  003326  C03F  FFE2         	movff	??_main_interrupt+2,fsr1h
  7295  00332A  C03E  FFE1         	movff	??_main_interrupt+1,fsr1l
  7296  00332E  925D               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  7297  003330  0011               	retfie		f
  7298  003332                     __end_of_main_interrupt:
  7299                           	opt callstack 0
  7300                           
  7301 ;; *************** function _timer_ISR *****************
  7302 ;; Defined at:
  7303 ;;		line 138 in file "driver.c"
  7304 ;; Parameters:    Size  Location     Type
  7305 ;;		None
  7306 ;; Auto vars:     Size  Location     Type
  7307 ;;  temp            2   56[COMRAM] int 
  7308 ;;  i               2   58[COMRAM] int 
  7309 ;; Return value:  Size  Location     Type
  7310 ;;                  2   46[COMRAM] int 
  7311 ;; Registers used:
  7312 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7313 ;; Tracked objects:
  7314 ;;		On entry : 0/0
  7315 ;;		On exit  : 0/0
  7316 ;;		Unchanged: 0/0
  7317 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7318 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7319 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7320 ;;      Temps:          8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7321 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7322 ;;Total ram usage:       14 bytes
  7323 ;; Hardware stack levels used:    1
  7324 ;; Hardware stack levels required when called:    2
  7325 ;; This function calls:
  7326 ;;		_add_tasks
  7327 ;;		i2___wmul
  7328 ;; This function is called by:
  7329 ;;		_main_interrupt
  7330 ;; This function uses a non-reentrant model
  7331 ;;
  7332                           
  7333                           	psect	text36
  7334  002E28                     __ptext36:
  7335                           	opt callstack 0
  7336  002E28                     _timer_ISR:
  7337                           	opt callstack 20
  7338  002E28                     
  7339                           ;driver.c: 139:     int i = 0;
  7340  002E28  0E00               	movlw	0
  7341  002E2A  6E3C               	movwf	(timer_ISR@i+1)^0,c
  7342  002E2C  0E00               	movlw	0
  7343  002E2E  6E3B               	movwf	timer_ISR@i^0,c
  7344                           
  7345                           ;driver.c: 140:     while (execution[i] != 0) i++;
  7346  002E30  EF1C  F017         	goto	i2l3531
  7347  002E34                     i2l3529:
  7348  002E34  4A3B               	infsnz	timer_ISR@i^0,f,c
  7349  002E36  2A3C               	incf	(timer_ISR@i+1)^0,f,c
  7350  002E38                     i2l3531:
  7351  002E38  90D8               	bcf	status,0,c
  7352  002E3A  343B               	rlcf	timer_ISR@i^0,w,c
  7353  002E3C  6ED9               	movwf	fsr2l,c
  7354  002E3E  343C               	rlcf	(timer_ISR@i+1)^0,w,c
  7355  002E40  6EDA               	movwf	fsr2h,c
  7356  002E42  0EB1               	movlw	low _execution
  7357  002E44  26D9               	addwf	fsr2l,f,c
  7358  002E46  0E00               	movlw	high _execution
  7359  002E48  22DA               	addwfc	fsr2h,f,c
  7360  002E4A  50DE               	movf	postinc2,w,c
  7361  002E4C  10DE               	iorwf	postinc2,w,c
  7362  002E4E  A4D8               	btfss	status,2,c
  7363  002E50  EF2C  F017         	goto	i2u172_41
  7364  002E54  EF2E  F017         	goto	i2u172_40
  7365  002E58                     i2u172_41:
  7366  002E58  EF1A  F017         	goto	i2l3529
  7367  002E5C                     i2u172_40:
  7368  002E5C                     
  7369                           ;driver.c: 141:     if (tasks[HEAD_QUEUE].delay > 0) tasks[HEAD_QUEUE].delay -= 10;
  7370  002E5C  C0C9  F001         	movff	_HEAD_QUEUE,i2___wmul@multiplier
  7371  002E60  C0CA  F002         	movff	_HEAD_QUEUE+1,i2___wmul@multiplier+1
  7372  002E64  0E00               	movlw	0
  7373  002E66  6E04               	movwf	(i2___wmul@multiplicand+1)^0,c
  7374  002E68  0E17               	movlw	23
  7375  002E6A  6E03               	movwf	i2___wmul@multiplicand^0,c
  7376  002E6C  ECE1  F01D         	call	i2___wmul	;wreg free
  7377  002E70  0E03               	movlw	low (_tasks+3)
  7378  002E72  2401               	addwf	?i2___wmul^0,w,c
  7379  002E74  6ED9               	movwf	fsr2l,c
  7380  002E76  0E01               	movlw	high (_tasks+3)
  7381  002E78  2002               	addwfc	(?i2___wmul+1)^0,w,c
  7382  002E7A  6EDA               	movwf	fsr2h,c
  7383  002E7C  50DE               	movf	postinc2,w,c
  7384  002E7E  10DE               	iorwf	postinc2,w,c
  7385  002E80  10DE               	iorwf	postinc2,w,c
  7386  002E82  10DE               	iorwf	postinc2,w,c
  7387  002E84  10DE               	iorwf	postinc2,w,c
  7388  002E86  10DE               	iorwf	postinc2,w,c
  7389  002E88  10DE               	iorwf	postinc2,w,c
  7390  002E8A  10DE               	iorwf	postinc2,w,c
  7391  002E8C  B4D8               	btfsc	status,2,c
  7392  002E8E  EF4B  F017         	goto	i2u173_41
  7393  002E92  EF4D  F017         	goto	i2u173_40
  7394  002E96                     i2u173_41:
  7395  002E96  EFA0  F017         	goto	i2l3545
  7396  002E9A                     i2u173_40:
  7397  002E9A  C0C9  F001         	movff	_HEAD_QUEUE,i2___wmul@multiplier
  7398  002E9E  C0CA  F002         	movff	_HEAD_QUEUE+1,i2___wmul@multiplier+1
  7399  002EA2  0E00               	movlw	0
  7400  002EA4  6E04               	movwf	(i2___wmul@multiplicand+1)^0,c
  7401  002EA6  0E17               	movlw	23
  7402  002EA8  6E03               	movwf	i2___wmul@multiplicand^0,c
  7403  002EAA  ECE1  F01D         	call	i2___wmul	;wreg free
  7404  002EAE  0E03               	movlw	low (_tasks+3)
  7405  002EB0  2401               	addwf	?i2___wmul^0,w,c
  7406  002EB2  6ED9               	movwf	fsr2l,c
  7407  002EB4  0E01               	movlw	high (_tasks+3)
  7408  002EB6  2002               	addwfc	(?i2___wmul+1)^0,w,c
  7409  002EB8  6EDA               	movwf	fsr2h,c
  7410  002EBA  0E0A               	movlw	10
  7411  002EBC  5EDE               	subwf	postinc2,f,c
  7412  002EBE  0E00               	movlw	0
  7413  002EC0  5ADE               	subwfb	postinc2,f,c
  7414  002EC2  5ADE               	subwfb	postinc2,f,c
  7415  002EC4  5ADE               	subwfb	postinc2,f,c
  7416  002EC6  5ADE               	subwfb	postinc2,f,c
  7417  002EC8  5ADE               	subwfb	postinc2,f,c
  7418  002ECA  5ADE               	subwfb	postinc2,f,c
  7419  002ECC  5ADE               	subwfb	postinc2,f,c
  7420  002ECE  EFA0  F017         	goto	i2l3545
  7421  002ED2                     i2l382:
  7422                           
  7423                           ;driver.c: 143:         int temp = HEAD_QUEUE;
  7424  002ED2  C0C9  F039         	movff	_HEAD_QUEUE,timer_ISR@temp
  7425  002ED6  C0CA  F03A         	movff	_HEAD_QUEUE+1,timer_ISR@temp+1
  7426  002EDA                     
  7427                           ;driver.c: 144:         HEAD_QUEUE = tasks[HEAD_QUEUE].next;
  7428  002EDA  C0C9  F001         	movff	_HEAD_QUEUE,i2___wmul@multiplier
  7429  002EDE  C0CA  F002         	movff	_HEAD_QUEUE+1,i2___wmul@multiplier+1
  7430  002EE2  0E00               	movlw	0
  7431  002EE4  6E04               	movwf	(i2___wmul@multiplicand+1)^0,c
  7432  002EE6  0E17               	movlw	23
  7433  002EE8  6E03               	movwf	i2___wmul@multiplicand^0,c
  7434  002EEA  ECE1  F01D         	call	i2___wmul	;wreg free
  7435  002EEE  0E15               	movlw	low (_tasks+21)
  7436  002EF0  2401               	addwf	?i2___wmul^0,w,c
  7437  002EF2  6ED9               	movwf	fsr2l,c
  7438  002EF4  0E01               	movlw	high (_tasks+21)
  7439  002EF6  2002               	addwfc	(?i2___wmul+1)^0,w,c
  7440  002EF8  6EDA               	movwf	fsr2h,c
  7441  002EFA  CFDE F0C9          	movff	postinc2,_HEAD_QUEUE
  7442  002EFE  CFDD F0CA          	movff	postdec2,_HEAD_QUEUE+1
  7443  002F02                     
  7444                           ;driver.c: 145:         execution[i] = temp+1;
  7445  002F02  0E01               	movlw	1
  7446  002F04  2439               	addwf	timer_ISR@temp^0,w,c
  7447  002F06  6E31               	movwf	??_timer_ISR^0,c
  7448  002F08  0E00               	movlw	0
  7449  002F0A  203A               	addwfc	(timer_ISR@temp+1)^0,w,c
  7450  002F0C  6E32               	movwf	(??_timer_ISR+1)^0,c
  7451  002F0E  90D8               	bcf	status,0,c
  7452  002F10  343B               	rlcf	timer_ISR@i^0,w,c
  7453  002F12  6ED9               	movwf	fsr2l,c
  7454  002F14  343C               	rlcf	(timer_ISR@i+1)^0,w,c
  7455  002F16  6EDA               	movwf	fsr2h,c
  7456  002F18  0EB1               	movlw	low _execution
  7457  002F1A  26D9               	addwf	fsr2l,f,c
  7458  002F1C  0E00               	movlw	high _execution
  7459  002F1E  22DA               	addwfc	fsr2h,f,c
  7460  002F20  C031  FFDE         	movff	??_timer_ISR,postinc2
  7461  002F24  C032  FFDD         	movff	??_timer_ISR+1,postdec2
  7462  002F28                     
  7463                           ;driver.c: 146:         add_tasks(temp);
  7464  002F28  C039  F007         	movff	timer_ISR@temp,add_tasks@id
  7465  002F2C  C03A  F008         	movff	timer_ISR@temp+1,add_tasks@id+1
  7466  002F30  EC90  F00C         	call	_add_tasks	;wreg free
  7467  002F34                     
  7468                           ;driver.c: 147:         i = i + 1;
  7469  002F34  0E01               	movlw	1
  7470  002F36  243B               	addwf	timer_ISR@i^0,w,c
  7471  002F38  6E3B               	movwf	timer_ISR@i^0,c
  7472  002F3A  0E00               	movlw	0
  7473  002F3C  203C               	addwfc	(timer_ISR@i+1)^0,w,c
  7474  002F3E  6E3C               	movwf	(timer_ISR@i+1)^0,c
  7475  002F40                     i2l3545:
  7476                           
  7477                           ;driver.c: 142:     while (tasks[HEAD_QUEUE].delay == 0) {
  7478  002F40  C0C9  F001         	movff	_HEAD_QUEUE,i2___wmul@multiplier
  7479  002F44  C0CA  F002         	movff	_HEAD_QUEUE+1,i2___wmul@multiplier+1
  7480  002F48  0E00               	movlw	0
  7481  002F4A  6E04               	movwf	(i2___wmul@multiplicand+1)^0,c
  7482  002F4C  0E17               	movlw	23
  7483  002F4E  6E03               	movwf	i2___wmul@multiplicand^0,c
  7484  002F50  ECE1  F01D         	call	i2___wmul	;wreg free
  7485  002F54  0E03               	movlw	low (_tasks+3)
  7486  002F56  2401               	addwf	?i2___wmul^0,w,c
  7487  002F58  6ED9               	movwf	fsr2l,c
  7488  002F5A  0E01               	movlw	high (_tasks+3)
  7489  002F5C  2002               	addwfc	(?i2___wmul+1)^0,w,c
  7490  002F5E  6EDA               	movwf	fsr2h,c
  7491  002F60  50DE               	movf	postinc2,w,c
  7492  002F62  10DE               	iorwf	postinc2,w,c
  7493  002F64  10DE               	iorwf	postinc2,w,c
  7494  002F66  10DE               	iorwf	postinc2,w,c
  7495  002F68  10DE               	iorwf	postinc2,w,c
  7496  002F6A  10DE               	iorwf	postinc2,w,c
  7497  002F6C  10DE               	iorwf	postinc2,w,c
  7498  002F6E  10DE               	iorwf	postinc2,w,c
  7499  002F70  B4D8               	btfsc	status,2,c
  7500  002F72  EFBD  F017         	goto	i2u174_41
  7501  002F76  EFBF  F017         	goto	i2u174_40
  7502  002F7A                     i2u174_41:
  7503  002F7A  EF69  F017         	goto	i2l382
  7504  002F7E                     i2u174_40:
  7505  002F7E                     
  7506                           ;driver.c: 149:     return 1;
  7507  002F7E  0E00               	movlw	0
  7508  002F80  6E30               	movwf	(?_timer_ISR+1)^0,c
  7509  002F82  0E01               	movlw	1
  7510  002F84  6E2F               	movwf	?_timer_ISR^0,c
  7511  002F86  0012               	return		;funcret
  7512  002F88                     __end_of_timer_ISR:
  7513                           	opt callstack 0
  7514                           
  7515 ;; *************** function _add_tasks *****************
  7516 ;; Defined at:
  7517 ;;		line 161 in file "driver.c"
  7518 ;; Parameters:    Size  Location     Type
  7519 ;;  id              2    6[COMRAM] int 
  7520 ;; Auto vars:     Size  Location     Type
  7521 ;;  temp_delay      8   36[COMRAM] unsigned long long 
  7522 ;;  temp_next       2   44[COMRAM] int 
  7523 ;; Return value:  Size  Location     Type
  7524 ;;                  1    wreg      void 
  7525 ;; Registers used:
  7526 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7527 ;; Tracked objects:
  7528 ;;		On entry : 0/0
  7529 ;;		On exit  : 0/0
  7530 ;;		Unchanged: 0/0
  7531 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7532 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7533 ;;      Locals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7534 ;;      Temps:         24       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7535 ;;      Totals:        40       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7536 ;;Total ram usage:       40 bytes
  7537 ;; Hardware stack levels used:    1
  7538 ;; Hardware stack levels required when called:    1
  7539 ;; This function calls:
  7540 ;;		i2___wmul
  7541 ;; This function is called by:
  7542 ;;		_timer_ISR
  7543 ;; This function uses a non-reentrant model
  7544 ;;
  7545                           
  7546                           	psect	text37
  7547  001920                     __ptext37:
  7548                           	opt callstack 0
  7549  001920                     _add_tasks:
  7550                           	opt callstack 20
  7551  001920                     
  7552                           ;driver.c: 162:     int temp_next = HEAD_QUEUE;
  7553  001920  C0C9  F02D         	movff	_HEAD_QUEUE,add_tasks@temp_next
  7554  001924  C0CA  F02E         	movff	_HEAD_QUEUE+1,add_tasks@temp_next+1
  7555  001928                     
  7556                           ;driver.c: 163:     if (tasks[temp_next].delay >= tasks[id].period){
  7557  001928  C007  F001         	movff	add_tasks@id,i2___wmul@multiplier
  7558  00192C  C008  F002         	movff	add_tasks@id+1,i2___wmul@multiplier+1
  7559  001930  0E00               	movlw	0
  7560  001932  6E04               	movwf	(i2___wmul@multiplicand+1)^0,c
  7561  001934  0E17               	movlw	23
  7562  001936  6E03               	movwf	i2___wmul@multiplicand^0,c
  7563  001938  ECE1  F01D         	call	i2___wmul	;wreg free
  7564  00193C  0E0B               	movlw	low (_tasks+11)
  7565  00193E  2401               	addwf	?i2___wmul^0,w,c
  7566  001940  6ED9               	movwf	fsr2l,c
  7567  001942  0E01               	movlw	high (_tasks+11)
  7568  001944  2002               	addwfc	(?i2___wmul+1)^0,w,c
  7569  001946  6EDA               	movwf	fsr2h,c
  7570  001948  C02D  F001         	movff	add_tasks@temp_next,i2___wmul@multiplier
  7571  00194C  C02E  F002         	movff	add_tasks@temp_next+1,i2___wmul@multiplier+1
  7572  001950  0E00               	movlw	0
  7573  001952  6E04               	movwf	(i2___wmul@multiplicand+1)^0,c
  7574  001954  0E17               	movlw	23
  7575  001956  6E03               	movwf	i2___wmul@multiplicand^0,c
  7576  001958  ECE1  F01D         	call	i2___wmul	;wreg free
  7577  00195C  0E03               	movlw	low (_tasks+3)
  7578  00195E  2401               	addwf	?i2___wmul^0,w,c
  7579  001960  6EE1               	movwf	fsr1l,c
  7580  001962  0E01               	movlw	high (_tasks+3)
  7581  001964  2002               	addwfc	(?i2___wmul+1)^0,w,c
  7582  001966  6EE2               	movwf	fsr1h,c
  7583  001968  50DE               	movf	postinc2,w,c
  7584  00196A  5CE6               	subwf	postinc1,w,c
  7585  00196C  50DE               	movf	postinc2,w,c
  7586  00196E  58E6               	subwfb	postinc1,w,c
  7587  001970  50DE               	movf	postinc2,w,c
  7588  001972  58E6               	subwfb	postinc1,w,c
  7589  001974  50DE               	movf	postinc2,w,c
  7590  001976  58E6               	subwfb	postinc1,w,c
  7591  001978  50DE               	movf	postinc2,w,c
  7592  00197A  58E6               	subwfb	postinc1,w,c
  7593  00197C  50DE               	movf	postinc2,w,c
  7594  00197E  58E6               	subwfb	postinc1,w,c
  7595  001980  50DE               	movf	postinc2,w,c
  7596  001982  58E6               	subwfb	postinc1,w,c
  7597  001984  50DE               	movf	postinc2,w,c
  7598  001986  58E6               	subwfb	postinc1,w,c
  7599  001988  A0D8               	btfss	status,0,c
  7600  00198A  EFC9  F00C         	goto	i2u146_41
  7601  00198E  EFCB  F00C         	goto	i2u146_40
  7602  001992                     i2u146_41:
  7603  001992  EF9D  F00D         	goto	i2l3275
  7604  001996                     i2u146_40:
  7605  001996                     
  7606                           ;driver.c: 164:         tasks[id].next = temp_next;
  7607  001996  C007  F001         	movff	add_tasks@id,i2___wmul@multiplier
  7608  00199A  C008  F002         	movff	add_tasks@id+1,i2___wmul@multiplier+1
  7609  00199E  0E00               	movlw	0
  7610  0019A0  6E04               	movwf	(i2___wmul@multiplicand+1)^0,c
  7611  0019A2  0E17               	movlw	23
  7612  0019A4  6E03               	movwf	i2___wmul@multiplicand^0,c
  7613  0019A6  ECE1  F01D         	call	i2___wmul	;wreg free
  7614  0019AA  0E15               	movlw	low (_tasks+21)
  7615  0019AC  2401               	addwf	?i2___wmul^0,w,c
  7616  0019AE  6ED9               	movwf	fsr2l,c
  7617  0019B0  0E01               	movlw	high (_tasks+21)
  7618  0019B2  2002               	addwfc	(?i2___wmul+1)^0,w,c
  7619  0019B4  6EDA               	movwf	fsr2h,c
  7620  0019B6  C02D  FFDE         	movff	add_tasks@temp_next,postinc2
  7621  0019BA  C02E  FFDD         	movff	add_tasks@temp_next+1,postdec2
  7622                           
  7623                           ;driver.c: 165:         tasks[id].delay = tasks[id].period;
  7624  0019BE  C007  F001         	movff	add_tasks@id,i2___wmul@multiplier
  7625  0019C2  C008  F002         	movff	add_tasks@id+1,i2___wmul@multiplier+1
  7626  0019C6  0E00               	movlw	0
  7627  0019C8  6E04               	movwf	(i2___wmul@multiplicand+1)^0,c
  7628  0019CA  0E17               	movlw	23
  7629  0019CC  6E03               	movwf	i2___wmul@multiplicand^0,c
  7630  0019CE  ECE1  F01D         	call	i2___wmul	;wreg free
  7631  0019D2  0E0B               	movlw	low (_tasks+11)
  7632  0019D4  2401               	addwf	?i2___wmul^0,w,c
  7633  0019D6  6ED9               	movwf	fsr2l,c
  7634  0019D8  0E01               	movlw	high (_tasks+11)
  7635  0019DA  2002               	addwfc	(?i2___wmul+1)^0,w,c
  7636  0019DC  6EDA               	movwf	fsr2h,c
  7637  0019DE  CFDE F009          	movff	postinc2,??_add_tasks
  7638  0019E2  CFDE F00A          	movff	postinc2,??_add_tasks+1
  7639  0019E6  CFDE F00B          	movff	postinc2,??_add_tasks+2
  7640  0019EA  CFDE F00C          	movff	postinc2,??_add_tasks+3
  7641  0019EE  CFDE F00D          	movff	postinc2,??_add_tasks+4
  7642  0019F2  CFDE F00E          	movff	postinc2,??_add_tasks+5
  7643  0019F6  CFDE F00F          	movff	postinc2,??_add_tasks+6
  7644  0019FA  CFDE F010          	movff	postinc2,??_add_tasks+7
  7645  0019FE  C007  F001         	movff	add_tasks@id,i2___wmul@multiplier
  7646  001A02  C008  F002         	movff	add_tasks@id+1,i2___wmul@multiplier+1
  7647  001A06  0E00               	movlw	0
  7648  001A08  6E04               	movwf	(i2___wmul@multiplicand+1)^0,c
  7649  001A0A  0E17               	movlw	23
  7650  001A0C  6E03               	movwf	i2___wmul@multiplicand^0,c
  7651  001A0E  ECE1  F01D         	call	i2___wmul	;wreg free
  7652  001A12  0E03               	movlw	low (_tasks+3)
  7653  001A14  2401               	addwf	?i2___wmul^0,w,c
  7654  001A16  6ED9               	movwf	fsr2l,c
  7655  001A18  0E01               	movlw	high (_tasks+3)
  7656  001A1A  2002               	addwfc	(?i2___wmul+1)^0,w,c
  7657  001A1C  6EDA               	movwf	fsr2h,c
  7658  001A1E  C009  FFDE         	movff	??_add_tasks,postinc2
  7659  001A22  C00A  FFDE         	movff	??_add_tasks+1,postinc2
  7660  001A26  C00B  FFDE         	movff	??_add_tasks+2,postinc2
  7661  001A2A  C00C  FFDE         	movff	??_add_tasks+3,postinc2
  7662  001A2E  C00D  FFDE         	movff	??_add_tasks+4,postinc2
  7663  001A32  C00E  FFDE         	movff	??_add_tasks+5,postinc2
  7664  001A36  C00F  FFDE         	movff	??_add_tasks+6,postinc2
  7665  001A3A  C010  FFDE         	movff	??_add_tasks+7,postinc2
  7666                           
  7667                           ;driver.c: 166:         tasks[temp_next].delay =tasks[temp_next].delay - tasks[id].delay
      +                          ;
  7668  001A3E  C007  F001         	movff	add_tasks@id,i2___wmul@multiplier
  7669  001A42  C008  F002         	movff	add_tasks@id+1,i2___wmul@multiplier+1
  7670  001A46  0E00               	movlw	0
  7671  001A48  6E04               	movwf	(i2___wmul@multiplicand+1)^0,c
  7672  001A4A  0E17               	movlw	23
  7673  001A4C  6E03               	movwf	i2___wmul@multiplicand^0,c
  7674  001A4E  ECE1  F01D         	call	i2___wmul	;wreg free
  7675  001A52  0E03               	movlw	low (_tasks+3)
  7676  001A54  2401               	addwf	?i2___wmul^0,w,c
  7677  001A56  6ED9               	movwf	fsr2l,c
  7678  001A58  0E01               	movlw	high (_tasks+3)
  7679  001A5A  2002               	addwfc	(?i2___wmul+1)^0,w,c
  7680  001A5C  6EDA               	movwf	fsr2h,c
  7681  001A5E  CFDE F009          	movff	postinc2,??_add_tasks
  7682  001A62  CFDE F00A          	movff	postinc2,??_add_tasks+1
  7683  001A66  CFDE F00B          	movff	postinc2,??_add_tasks+2
  7684  001A6A  CFDE F00C          	movff	postinc2,??_add_tasks+3
  7685  001A6E  CFDE F00D          	movff	postinc2,??_add_tasks+4
  7686  001A72  CFDE F00E          	movff	postinc2,??_add_tasks+5
  7687  001A76  CFDE F00F          	movff	postinc2,??_add_tasks+6
  7688  001A7A  CFDE F010          	movff	postinc2,??_add_tasks+7
  7689  001A7E  C02D  F001         	movff	add_tasks@temp_next,i2___wmul@multiplier
  7690  001A82  C02E  F002         	movff	add_tasks@temp_next+1,i2___wmul@multiplier+1
  7691  001A86  0E00               	movlw	0
  7692  001A88  6E04               	movwf	(i2___wmul@multiplicand+1)^0,c
  7693  001A8A  0E17               	movlw	23
  7694  001A8C  6E03               	movwf	i2___wmul@multiplicand^0,c
  7695  001A8E  ECE1  F01D         	call	i2___wmul	;wreg free
  7696  001A92  0E03               	movlw	low (_tasks+3)
  7697  001A94  2401               	addwf	?i2___wmul^0,w,c
  7698  001A96  6ED9               	movwf	fsr2l,c
  7699  001A98  0E01               	movlw	high (_tasks+3)
  7700  001A9A  2002               	addwfc	(?i2___wmul+1)^0,w,c
  7701  001A9C  6EDA               	movwf	fsr2h,c
  7702  001A9E  CFDE F011          	movff	postinc2,??_add_tasks+8
  7703  001AA2  CFDE F012          	movff	postinc2,??_add_tasks+9
  7704  001AA6  CFDE F013          	movff	postinc2,??_add_tasks+10
  7705  001AAA  CFDE F014          	movff	postinc2,??_add_tasks+11
  7706  001AAE  CFDE F015          	movff	postinc2,??_add_tasks+12
  7707  001AB2  CFDE F016          	movff	postinc2,??_add_tasks+13
  7708  001AB6  CFDE F017          	movff	postinc2,??_add_tasks+14
  7709  001ABA  CFDE F018          	movff	postinc2,??_add_tasks+15
  7710  001ABE  5009               	movf	??_add_tasks^0,w,c
  7711  001AC0  5C11               	subwf	(??_add_tasks+8)^0,w,c
  7712  001AC2  6E19               	movwf	(??_add_tasks+16)^0,c
  7713  001AC4  500A               	movf	(??_add_tasks+1)^0,w,c
  7714  001AC6  5812               	subwfb	(??_add_tasks+9)^0,w,c
  7715  001AC8  6E1A               	movwf	(??_add_tasks+17)^0,c
  7716  001ACA  500B               	movf	(??_add_tasks+2)^0,w,c
  7717  001ACC  5813               	subwfb	(??_add_tasks+10)^0,w,c
  7718  001ACE  6E1B               	movwf	(??_add_tasks+18)^0,c
  7719  001AD0  500C               	movf	(??_add_tasks+3)^0,w,c
  7720  001AD2  5814               	subwfb	(??_add_tasks+11)^0,w,c
  7721  001AD4  6E1C               	movwf	(??_add_tasks+19)^0,c
  7722  001AD6  500D               	movf	(??_add_tasks+4)^0,w,c
  7723  001AD8  5815               	subwfb	(??_add_tasks+12)^0,w,c
  7724  001ADA  6E1D               	movwf	(??_add_tasks+20)^0,c
  7725  001ADC  500E               	movf	(??_add_tasks+5)^0,w,c
  7726  001ADE  5816               	subwfb	(??_add_tasks+13)^0,w,c
  7727  001AE0  6E1E               	movwf	(??_add_tasks+21)^0,c
  7728  001AE2  500F               	movf	(??_add_tasks+6)^0,w,c
  7729  001AE4  5817               	subwfb	(??_add_tasks+14)^0,w,c
  7730  001AE6  6E1F               	movwf	(??_add_tasks+22)^0,c
  7731  001AE8  5010               	movf	(??_add_tasks+7)^0,w,c
  7732  001AEA  5818               	subwfb	(??_add_tasks+15)^0,w,c
  7733  001AEC  6E20               	movwf	(??_add_tasks+23)^0,c
  7734  001AEE  C02D  F001         	movff	add_tasks@temp_next,i2___wmul@multiplier
  7735  001AF2  C02E  F002         	movff	add_tasks@temp_next+1,i2___wmul@multiplier+1
  7736  001AF6  0E00               	movlw	0
  7737  001AF8  6E04               	movwf	(i2___wmul@multiplicand+1)^0,c
  7738  001AFA  0E17               	movlw	23
  7739  001AFC  6E03               	movwf	i2___wmul@multiplicand^0,c
  7740  001AFE  ECE1  F01D         	call	i2___wmul	;wreg free
  7741  001B02  0E03               	movlw	low (_tasks+3)
  7742  001B04  2401               	addwf	?i2___wmul^0,w,c
  7743  001B06  6ED9               	movwf	fsr2l,c
  7744  001B08  0E01               	movlw	high (_tasks+3)
  7745  001B0A  2002               	addwfc	(?i2___wmul+1)^0,w,c
  7746  001B0C  6EDA               	movwf	fsr2h,c
  7747  001B0E  C019  FFDE         	movff	??_add_tasks+16,postinc2
  7748  001B12  C01A  FFDE         	movff	??_add_tasks+17,postinc2
  7749  001B16  C01B  FFDE         	movff	??_add_tasks+18,postinc2
  7750  001B1A  C01C  FFDE         	movff	??_add_tasks+19,postinc2
  7751  001B1E  C01D  FFDE         	movff	??_add_tasks+20,postinc2
  7752  001B22  C01E  FFDE         	movff	??_add_tasks+21,postinc2
  7753  001B26  C01F  FFDE         	movff	??_add_tasks+22,postinc2
  7754  001B2A  C020  FFDE         	movff	??_add_tasks+23,postinc2
  7755  001B2E                     
  7756                           ;driver.c: 167:         HEAD_QUEUE = id;
  7757  001B2E  C007  F0C9         	movff	add_tasks@id,_HEAD_QUEUE
  7758  001B32  C008  F0CA         	movff	add_tasks@id+1,_HEAD_QUEUE+1
  7759  001B36  EF70  F010         	goto	i2l395
  7760  001B3A                     i2l3275:
  7761                           
  7762                           ;driver.c: 170:     unsigned long long int temp_delay = tasks[HEAD_QUEUE].delay;
  7763  001B3A  C0C9  F001         	movff	_HEAD_QUEUE,i2___wmul@multiplier
  7764  001B3E  C0CA  F002         	movff	_HEAD_QUEUE+1,i2___wmul@multiplier+1
  7765  001B42  0E00               	movlw	0
  7766  001B44  6E04               	movwf	(i2___wmul@multiplicand+1)^0,c
  7767  001B46  0E17               	movlw	23
  7768  001B48  6E03               	movwf	i2___wmul@multiplicand^0,c
  7769  001B4A  ECE1  F01D         	call	i2___wmul	;wreg free
  7770  001B4E  0E03               	movlw	low (_tasks+3)
  7771  001B50  2401               	addwf	?i2___wmul^0,w,c
  7772  001B52  6ED9               	movwf	fsr2l,c
  7773  001B54  0E01               	movlw	high (_tasks+3)
  7774  001B56  2002               	addwfc	(?i2___wmul+1)^0,w,c
  7775  001B58  6EDA               	movwf	fsr2h,c
  7776  001B5A  CFDE F009          	movff	postinc2,??_add_tasks
  7777  001B5E  CFDE F00A          	movff	postinc2,??_add_tasks+1
  7778  001B62  CFDE F00B          	movff	postinc2,??_add_tasks+2
  7779  001B66  CFDE F00C          	movff	postinc2,??_add_tasks+3
  7780  001B6A  CFDE F00D          	movff	postinc2,??_add_tasks+4
  7781  001B6E  CFDE F00E          	movff	postinc2,??_add_tasks+5
  7782  001B72  CFDE F00F          	movff	postinc2,??_add_tasks+6
  7783  001B76  CFDE F010          	movff	postinc2,??_add_tasks+7
  7784  001B7A  C009  F025         	movff	??_add_tasks,add_tasks@temp_delay
  7785  001B7E  C00A  F026         	movff	??_add_tasks+1,add_tasks@temp_delay+1
  7786  001B82  C00B  F027         	movff	??_add_tasks+2,add_tasks@temp_delay+2
  7787  001B86  C00C  F028         	movff	??_add_tasks+3,add_tasks@temp_delay+3
  7788  001B8A  C00D  F029         	movff	??_add_tasks+4,add_tasks@temp_delay+4
  7789  001B8E  C00E  F02A         	movff	??_add_tasks+5,add_tasks@temp_delay+5
  7790  001B92  C00F  F02B         	movff	??_add_tasks+6,add_tasks@temp_delay+6
  7791  001B96  C010  F02C         	movff	??_add_tasks+7,add_tasks@temp_delay+7
  7792  001B9A                     i2l396:
  7793                           
  7794                           ;driver.c: 172:         if (tasks[temp_next].next == -1){
  7795  001B9A  C02D  F001         	movff	add_tasks@temp_next,i2___wmul@multiplier
  7796  001B9E  C02E  F002         	movff	add_tasks@temp_next+1,i2___wmul@multiplier+1
  7797  001BA2  0E00               	movlw	0
  7798  001BA4  6E04               	movwf	(i2___wmul@multiplicand+1)^0,c
  7799  001BA6  0E17               	movlw	23
  7800  001BA8  6E03               	movwf	i2___wmul@multiplicand^0,c
  7801  001BAA  ECE1  F01D         	call	i2___wmul	;wreg free
  7802  001BAE  0E15               	movlw	low (_tasks+21)
  7803  001BB0  2401               	addwf	?i2___wmul^0,w,c
  7804  001BB2  6ED9               	movwf	fsr2l,c
  7805  001BB4  0E01               	movlw	high (_tasks+21)
  7806  001BB6  2002               	addwfc	(?i2___wmul+1)^0,w,c
  7807  001BB8  6EDA               	movwf	fsr2h,c
  7808  001BBA  28DE               	incf	postinc2,w,c
  7809  001BBC  E106               	bnz	i2u147_41
  7810  001BBE  28DE               	incf	postinc2,w,c
  7811  001BC0  A4D8               	btfss	status,2,c
  7812  001BC2  EFE5  F00D         	goto	i2u147_41
  7813  001BC6  EFE7  F00D         	goto	i2u147_40
  7814  001BCA                     i2u147_41:
  7815  001BCA  EF69  F00E         	goto	i2l3281
  7816  001BCE                     i2u147_40:
  7817  001BCE                     
  7818                           ;driver.c: 173:             tasks[temp_next].next = id;
  7819  001BCE  C02D  F001         	movff	add_tasks@temp_next,i2___wmul@multiplier
  7820  001BD2  C02E  F002         	movff	add_tasks@temp_next+1,i2___wmul@multiplier+1
  7821  001BD6  0E00               	movlw	0
  7822  001BD8  6E04               	movwf	(i2___wmul@multiplicand+1)^0,c
  7823  001BDA  0E17               	movlw	23
  7824  001BDC  6E03               	movwf	i2___wmul@multiplicand^0,c
  7825  001BDE  ECE1  F01D         	call	i2___wmul	;wreg free
  7826  001BE2  0E15               	movlw	low (_tasks+21)
  7827  001BE4  2401               	addwf	?i2___wmul^0,w,c
  7828  001BE6  6ED9               	movwf	fsr2l,c
  7829  001BE8  0E01               	movlw	high (_tasks+21)
  7830  001BEA  2002               	addwfc	(?i2___wmul+1)^0,w,c
  7831  001BEC  6EDA               	movwf	fsr2h,c
  7832  001BEE  C007  FFDE         	movff	add_tasks@id,postinc2
  7833  001BF2  C008  FFDD         	movff	add_tasks@id+1,postdec2
  7834                           
  7835                           ;driver.c: 174:             tasks[id].next = -1;
  7836  001BF6  C007  F001         	movff	add_tasks@id,i2___wmul@multiplier
  7837  001BFA  C008  F002         	movff	add_tasks@id+1,i2___wmul@multiplier+1
  7838  001BFE  0E00               	movlw	0
  7839  001C00  6E04               	movwf	(i2___wmul@multiplicand+1)^0,c
  7840  001C02  0E17               	movlw	23
  7841  001C04  6E03               	movwf	i2___wmul@multiplicand^0,c
  7842  001C06  ECE1  F01D         	call	i2___wmul	;wreg free
  7843  001C0A  0E15               	movlw	low (_tasks+21)
  7844  001C0C  2401               	addwf	?i2___wmul^0,w,c
  7845  001C0E  6ED9               	movwf	fsr2l,c
  7846  001C10  0E01               	movlw	high (_tasks+21)
  7847  001C12  2002               	addwfc	(?i2___wmul+1)^0,w,c
  7848  001C14  6EDA               	movwf	fsr2h,c
  7849  001C16  0EFF               	movlw	255
  7850  001C18  6EDE               	movwf	postinc2,c
  7851  001C1A  0EFF               	movlw	255
  7852  001C1C  6EDD               	movwf	postdec2,c
  7853                           
  7854                           ;driver.c: 175:             tasks[id].delay = tasks[id].period - temp_delay;
  7855  001C1E  C007  F001         	movff	add_tasks@id,i2___wmul@multiplier
  7856  001C22  C008  F002         	movff	add_tasks@id+1,i2___wmul@multiplier+1
  7857  001C26  0E00               	movlw	0
  7858  001C28  6E04               	movwf	(i2___wmul@multiplicand+1)^0,c
  7859  001C2A  0E17               	movlw	23
  7860  001C2C  6E03               	movwf	i2___wmul@multiplicand^0,c
  7861  001C2E  ECE1  F01D         	call	i2___wmul	;wreg free
  7862  001C32  0E0B               	movlw	low (_tasks+11)
  7863  001C34  2401               	addwf	?i2___wmul^0,w,c
  7864  001C36  6ED9               	movwf	fsr2l,c
  7865  001C38  0E01               	movlw	high (_tasks+11)
  7866  001C3A  2002               	addwfc	(?i2___wmul+1)^0,w,c
  7867  001C3C  6EDA               	movwf	fsr2h,c
  7868  001C3E  CFDE F009          	movff	postinc2,??_add_tasks
  7869  001C42  CFDE F00A          	movff	postinc2,??_add_tasks+1
  7870  001C46  CFDE F00B          	movff	postinc2,??_add_tasks+2
  7871  001C4A  CFDE F00C          	movff	postinc2,??_add_tasks+3
  7872  001C4E  CFDE F00D          	movff	postinc2,??_add_tasks+4
  7873  001C52  CFDE F00E          	movff	postinc2,??_add_tasks+5
  7874  001C56  CFDE F00F          	movff	postinc2,??_add_tasks+6
  7875  001C5A  CFDE F010          	movff	postinc2,??_add_tasks+7
  7876  001C5E  5025               	movf	add_tasks@temp_delay^0,w,c
  7877  001C60  5C09               	subwf	??_add_tasks^0,w,c
  7878  001C62  6E11               	movwf	(??_add_tasks+8)^0,c
  7879  001C64  5026               	movf	(add_tasks@temp_delay+1)^0,w,c
  7880  001C66  580A               	subwfb	(??_add_tasks+1)^0,w,c
  7881  001C68  6E12               	movwf	(??_add_tasks+9)^0,c
  7882  001C6A  5027               	movf	(add_tasks@temp_delay+2)^0,w,c
  7883  001C6C  580B               	subwfb	(??_add_tasks+2)^0,w,c
  7884  001C6E  6E13               	movwf	(??_add_tasks+10)^0,c
  7885  001C70  5028               	movf	(add_tasks@temp_delay+3)^0,w,c
  7886  001C72  580C               	subwfb	(??_add_tasks+3)^0,w,c
  7887  001C74  6E14               	movwf	(??_add_tasks+11)^0,c
  7888  001C76  5029               	movf	(add_tasks@temp_delay+4)^0,w,c
  7889  001C78  580D               	subwfb	(??_add_tasks+4)^0,w,c
  7890  001C7A  6E15               	movwf	(??_add_tasks+12)^0,c
  7891  001C7C  502A               	movf	(add_tasks@temp_delay+5)^0,w,c
  7892  001C7E  580E               	subwfb	(??_add_tasks+5)^0,w,c
  7893  001C80  6E16               	movwf	(??_add_tasks+13)^0,c
  7894  001C82  502B               	movf	(add_tasks@temp_delay+6)^0,w,c
  7895  001C84  580F               	subwfb	(??_add_tasks+6)^0,w,c
  7896  001C86  6E17               	movwf	(??_add_tasks+14)^0,c
  7897  001C88  502C               	movf	(add_tasks@temp_delay+7)^0,w,c
  7898  001C8A  5810               	subwfb	(??_add_tasks+7)^0,w,c
  7899  001C8C  6E18               	movwf	(??_add_tasks+15)^0,c
  7900  001C8E  C007  F001         	movff	add_tasks@id,i2___wmul@multiplier
  7901  001C92  C008  F002         	movff	add_tasks@id+1,i2___wmul@multiplier+1
  7902  001C96  0E00               	movlw	0
  7903  001C98  6E04               	movwf	(i2___wmul@multiplicand+1)^0,c
  7904  001C9A  0E17               	movlw	23
  7905  001C9C  6E03               	movwf	i2___wmul@multiplicand^0,c
  7906  001C9E  ECE1  F01D         	call	i2___wmul	;wreg free
  7907  001CA2  0E03               	movlw	low (_tasks+3)
  7908  001CA4  2401               	addwf	?i2___wmul^0,w,c
  7909  001CA6  6ED9               	movwf	fsr2l,c
  7910  001CA8  0E01               	movlw	high (_tasks+3)
  7911  001CAA  2002               	addwfc	(?i2___wmul+1)^0,w,c
  7912  001CAC  6EDA               	movwf	fsr2h,c
  7913  001CAE  C011  FFDE         	movff	??_add_tasks+8,postinc2
  7914  001CB2  C012  FFDE         	movff	??_add_tasks+9,postinc2
  7915  001CB6  C013  FFDE         	movff	??_add_tasks+10,postinc2
  7916  001CBA  C014  FFDE         	movff	??_add_tasks+11,postinc2
  7917  001CBE  C015  FFDE         	movff	??_add_tasks+12,postinc2
  7918  001CC2  C016  FFDE         	movff	??_add_tasks+13,postinc2
  7919  001CC6  C017  FFDE         	movff	??_add_tasks+14,postinc2
  7920  001CCA  C018  FFDE         	movff	??_add_tasks+15,postinc2
  7921  001CCE  EF70  F010         	goto	i2l395
  7922  001CD2                     i2l3281:
  7923                           
  7924                           ;driver.c: 178:         temp_delay = temp_delay + tasks[tasks[temp_next].next].delay;
  7925  001CD2  C02D  F001         	movff	add_tasks@temp_next,i2___wmul@multiplier
  7926  001CD6  C02E  F002         	movff	add_tasks@temp_next+1,i2___wmul@multiplier+1
  7927  001CDA  0E00               	movlw	0
  7928  001CDC  6E04               	movwf	(i2___wmul@multiplicand+1)^0,c
  7929  001CDE  0E17               	movlw	23
  7930  001CE0  6E03               	movwf	i2___wmul@multiplicand^0,c
  7931  001CE2  ECE1  F01D         	call	i2___wmul	;wreg free
  7932  001CE6  0E15               	movlw	low (_tasks+21)
  7933  001CE8  2401               	addwf	?i2___wmul^0,w,c
  7934  001CEA  6ED9               	movwf	fsr2l,c
  7935  001CEC  0E01               	movlw	high (_tasks+21)
  7936  001CEE  2002               	addwfc	(?i2___wmul+1)^0,w,c
  7937  001CF0  6EDA               	movwf	fsr2h,c
  7938  001CF2  CFDE F023          	movff	postinc2,_add_tasks$2323
  7939  001CF6  CFDD F024          	movff	postdec2,_add_tasks$2323+1
  7940                           
  7941                           ;driver.c: 178:         temp_delay = temp_delay + tasks[tasks[temp_next].next].delay;
  7942  001CFA  C023  F001         	movff	_add_tasks$2323,i2___wmul@multiplier
  7943  001CFE  C024  F002         	movff	_add_tasks$2323+1,i2___wmul@multiplier+1
  7944  001D02  0E00               	movlw	0
  7945  001D04  6E04               	movwf	(i2___wmul@multiplicand+1)^0,c
  7946  001D06  0E17               	movlw	23
  7947  001D08  6E03               	movwf	i2___wmul@multiplicand^0,c
  7948  001D0A  ECE1  F01D         	call	i2___wmul	;wreg free
  7949  001D0E  0E03               	movlw	low (_tasks+3)
  7950  001D10  2401               	addwf	?i2___wmul^0,w,c
  7951  001D12  6ED9               	movwf	fsr2l,c
  7952  001D14  0E01               	movlw	high (_tasks+3)
  7953  001D16  2002               	addwfc	(?i2___wmul+1)^0,w,c
  7954  001D18  6EDA               	movwf	fsr2h,c
  7955  001D1A  CFDE F009          	movff	postinc2,??_add_tasks
  7956  001D1E  CFDE F00A          	movff	postinc2,??_add_tasks+1
  7957  001D22  CFDE F00B          	movff	postinc2,??_add_tasks+2
  7958  001D26  CFDE F00C          	movff	postinc2,??_add_tasks+3
  7959  001D2A  CFDE F00D          	movff	postinc2,??_add_tasks+4
  7960  001D2E  CFDE F00E          	movff	postinc2,??_add_tasks+5
  7961  001D32  CFDE F00F          	movff	postinc2,??_add_tasks+6
  7962  001D36  CFDE F010          	movff	postinc2,??_add_tasks+7
  7963  001D3A  5025               	movf	add_tasks@temp_delay^0,w,c
  7964  001D3C  2409               	addwf	??_add_tasks^0,w,c
  7965  001D3E  6E25               	movwf	add_tasks@temp_delay^0,c
  7966  001D40  5026               	movf	(add_tasks@temp_delay+1)^0,w,c
  7967  001D42  200A               	addwfc	(??_add_tasks+1)^0,w,c
  7968  001D44  6E26               	movwf	(add_tasks@temp_delay+1)^0,c
  7969  001D46  5027               	movf	(add_tasks@temp_delay+2)^0,w,c
  7970  001D48  200B               	addwfc	(??_add_tasks+2)^0,w,c
  7971  001D4A  6E27               	movwf	(add_tasks@temp_delay+2)^0,c
  7972  001D4C  5028               	movf	(add_tasks@temp_delay+3)^0,w,c
  7973  001D4E  200C               	addwfc	(??_add_tasks+3)^0,w,c
  7974  001D50  6E28               	movwf	(add_tasks@temp_delay+3)^0,c
  7975  001D52  5029               	movf	(add_tasks@temp_delay+4)^0,w,c
  7976  001D54  200D               	addwfc	(??_add_tasks+4)^0,w,c
  7977  001D56  6E29               	movwf	(add_tasks@temp_delay+4)^0,c
  7978  001D58  502A               	movf	(add_tasks@temp_delay+5)^0,w,c
  7979  001D5A  200E               	addwfc	(??_add_tasks+5)^0,w,c
  7980  001D5C  6E2A               	movwf	(add_tasks@temp_delay+5)^0,c
  7981  001D5E  502B               	movf	(add_tasks@temp_delay+6)^0,w,c
  7982  001D60  200F               	addwfc	(??_add_tasks+6)^0,w,c
  7983  001D62  6E2B               	movwf	(add_tasks@temp_delay+6)^0,c
  7984  001D64  502C               	movf	(add_tasks@temp_delay+7)^0,w,c
  7985  001D66  2010               	addwfc	(??_add_tasks+7)^0,w,c
  7986  001D68  6E2C               	movwf	(add_tasks@temp_delay+7)^0,c
  7987                           
  7988                           ;driver.c: 179:         if (temp_delay >= tasks[id].period) {
  7989  001D6A  C007  F001         	movff	add_tasks@id,i2___wmul@multiplier
  7990  001D6E  C008  F002         	movff	add_tasks@id+1,i2___wmul@multiplier+1
  7991  001D72  0E00               	movlw	0
  7992  001D74  6E04               	movwf	(i2___wmul@multiplicand+1)^0,c
  7993  001D76  0E17               	movlw	23
  7994  001D78  6E03               	movwf	i2___wmul@multiplicand^0,c
  7995  001D7A  ECE1  F01D         	call	i2___wmul	;wreg free
  7996  001D7E  0E0B               	movlw	low (_tasks+11)
  7997  001D80  2401               	addwf	?i2___wmul^0,w,c
  7998  001D82  6ED9               	movwf	fsr2l,c
  7999  001D84  0E01               	movlw	high (_tasks+11)
  8000  001D86  2002               	addwfc	(?i2___wmul+1)^0,w,c
  8001  001D88  6EDA               	movwf	fsr2h,c
  8002  001D8A  50DE               	movf	postinc2,w,c
  8003  001D8C  5C25               	subwf	add_tasks@temp_delay^0,w,c
  8004  001D8E  50DE               	movf	postinc2,w,c
  8005  001D90  5826               	subwfb	(add_tasks@temp_delay+1)^0,w,c
  8006  001D92  50DE               	movf	postinc2,w,c
  8007  001D94  5827               	subwfb	(add_tasks@temp_delay+2)^0,w,c
  8008  001D96  50DE               	movf	postinc2,w,c
  8009  001D98  5828               	subwfb	(add_tasks@temp_delay+3)^0,w,c
  8010  001D9A  50DE               	movf	postinc2,w,c
  8011  001D9C  5829               	subwfb	(add_tasks@temp_delay+4)^0,w,c
  8012  001D9E  50DE               	movf	postinc2,w,c
  8013  001DA0  582A               	subwfb	(add_tasks@temp_delay+5)^0,w,c
  8014  001DA2  50DE               	movf	postinc2,w,c
  8015  001DA4  582B               	subwfb	(add_tasks@temp_delay+6)^0,w,c
  8016  001DA6  50DE               	movf	postinc2,w,c
  8017  001DA8  582C               	subwfb	(add_tasks@temp_delay+7)^0,w,c
  8018  001DAA  A0D8               	btfss	status,0,c
  8019  001DAC  EFDA  F00E         	goto	i2u148_41
  8020  001DB0  EFDC  F00E         	goto	i2u148_40
  8021  001DB4                     i2u148_41:
  8022  001DB4  EF5A  F010         	goto	i2l3297
  8023  001DB8                     i2u148_40:
  8024  001DB8                     
  8025                           ;driver.c: 180:             temp_delay = temp_delay -tasks[tasks[temp_next].next].delay;
  8026  001DB8  C02D  F001         	movff	add_tasks@temp_next,i2___wmul@multiplier
  8027  001DBC  C02E  F002         	movff	add_tasks@temp_next+1,i2___wmul@multiplier+1
  8028  001DC0  0E00               	movlw	0
  8029  001DC2  6E04               	movwf	(i2___wmul@multiplicand+1)^0,c
  8030  001DC4  0E17               	movlw	23
  8031  001DC6  6E03               	movwf	i2___wmul@multiplicand^0,c
  8032  001DC8  ECE1  F01D         	call	i2___wmul	;wreg free
  8033  001DCC  0E15               	movlw	low (_tasks+21)
  8034  001DCE  2401               	addwf	?i2___wmul^0,w,c
  8035  001DD0  6ED9               	movwf	fsr2l,c
  8036  001DD2  0E01               	movlw	high (_tasks+21)
  8037  001DD4  2002               	addwfc	(?i2___wmul+1)^0,w,c
  8038  001DD6  6EDA               	movwf	fsr2h,c
  8039  001DD8  CFDE F023          	movff	postinc2,_add_tasks$2323
  8040  001DDC  CFDD F024          	movff	postdec2,_add_tasks$2323+1
  8041                           
  8042                           ;driver.c: 180:             temp_delay = temp_delay -tasks[tasks[temp_next].next].delay;
  8043  001DE0  C023  F001         	movff	_add_tasks$2323,i2___wmul@multiplier
  8044  001DE4  C024  F002         	movff	_add_tasks$2323+1,i2___wmul@multiplier+1
  8045  001DE8  0E00               	movlw	0
  8046  001DEA  6E04               	movwf	(i2___wmul@multiplicand+1)^0,c
  8047  001DEC  0E17               	movlw	23
  8048  001DEE  6E03               	movwf	i2___wmul@multiplicand^0,c
  8049  001DF0  ECE1  F01D         	call	i2___wmul	;wreg free
  8050  001DF4  0E03               	movlw	low (_tasks+3)
  8051  001DF6  2401               	addwf	?i2___wmul^0,w,c
  8052  001DF8  6ED9               	movwf	fsr2l,c
  8053  001DFA  0E01               	movlw	high (_tasks+3)
  8054  001DFC  2002               	addwfc	(?i2___wmul+1)^0,w,c
  8055  001DFE  6EDA               	movwf	fsr2h,c
  8056  001E00  CFDE F009          	movff	postinc2,??_add_tasks
  8057  001E04  CFDE F00A          	movff	postinc2,??_add_tasks+1
  8058  001E08  CFDE F00B          	movff	postinc2,??_add_tasks+2
  8059  001E0C  CFDE F00C          	movff	postinc2,??_add_tasks+3
  8060  001E10  CFDE F00D          	movff	postinc2,??_add_tasks+4
  8061  001E14  CFDE F00E          	movff	postinc2,??_add_tasks+5
  8062  001E18  CFDE F00F          	movff	postinc2,??_add_tasks+6
  8063  001E1C  CFDE F010          	movff	postinc2,??_add_tasks+7
  8064  001E20  5009               	movf	??_add_tasks^0,w,c
  8065  001E22  5C25               	subwf	add_tasks@temp_delay^0,w,c
  8066  001E24  6E25               	movwf	add_tasks@temp_delay^0,c
  8067  001E26  500A               	movf	(??_add_tasks+1)^0,w,c
  8068  001E28  5826               	subwfb	(add_tasks@temp_delay+1)^0,w,c
  8069  001E2A  6E26               	movwf	(add_tasks@temp_delay+1)^0,c
  8070  001E2C  500B               	movf	(??_add_tasks+2)^0,w,c
  8071  001E2E  5827               	subwfb	(add_tasks@temp_delay+2)^0,w,c
  8072  001E30  6E27               	movwf	(add_tasks@temp_delay+2)^0,c
  8073  001E32  500C               	movf	(??_add_tasks+3)^0,w,c
  8074  001E34  5828               	subwfb	(add_tasks@temp_delay+3)^0,w,c
  8075  001E36  6E28               	movwf	(add_tasks@temp_delay+3)^0,c
  8076  001E38  500D               	movf	(??_add_tasks+4)^0,w,c
  8077  001E3A  5829               	subwfb	(add_tasks@temp_delay+4)^0,w,c
  8078  001E3C  6E29               	movwf	(add_tasks@temp_delay+4)^0,c
  8079  001E3E  500E               	movf	(??_add_tasks+5)^0,w,c
  8080  001E40  582A               	subwfb	(add_tasks@temp_delay+5)^0,w,c
  8081  001E42  6E2A               	movwf	(add_tasks@temp_delay+5)^0,c
  8082  001E44  500F               	movf	(??_add_tasks+6)^0,w,c
  8083  001E46  582B               	subwfb	(add_tasks@temp_delay+6)^0,w,c
  8084  001E48  6E2B               	movwf	(add_tasks@temp_delay+6)^0,c
  8085  001E4A  5010               	movf	(??_add_tasks+7)^0,w,c
  8086  001E4C  582C               	subwfb	(add_tasks@temp_delay+7)^0,w,c
  8087  001E4E  6E2C               	movwf	(add_tasks@temp_delay+7)^0,c
  8088                           
  8089                           ;driver.c: 181:             tasks[id].delay = tasks[id].period - temp_delay;
  8090  001E50  C007  F001         	movff	add_tasks@id,i2___wmul@multiplier
  8091  001E54  C008  F002         	movff	add_tasks@id+1,i2___wmul@multiplier+1
  8092  001E58  0E00               	movlw	0
  8093  001E5A  6E04               	movwf	(i2___wmul@multiplicand+1)^0,c
  8094  001E5C  0E17               	movlw	23
  8095  001E5E  6E03               	movwf	i2___wmul@multiplicand^0,c
  8096  001E60  ECE1  F01D         	call	i2___wmul	;wreg free
  8097  001E64  0E0B               	movlw	low (_tasks+11)
  8098  001E66  2401               	addwf	?i2___wmul^0,w,c
  8099  001E68  6ED9               	movwf	fsr2l,c
  8100  001E6A  0E01               	movlw	high (_tasks+11)
  8101  001E6C  2002               	addwfc	(?i2___wmul+1)^0,w,c
  8102  001E6E  6EDA               	movwf	fsr2h,c
  8103  001E70  CFDE F009          	movff	postinc2,??_add_tasks
  8104  001E74  CFDE F00A          	movff	postinc2,??_add_tasks+1
  8105  001E78  CFDE F00B          	movff	postinc2,??_add_tasks+2
  8106  001E7C  CFDE F00C          	movff	postinc2,??_add_tasks+3
  8107  001E80  CFDE F00D          	movff	postinc2,??_add_tasks+4
  8108  001E84  CFDE F00E          	movff	postinc2,??_add_tasks+5
  8109  001E88  CFDE F00F          	movff	postinc2,??_add_tasks+6
  8110  001E8C  CFDE F010          	movff	postinc2,??_add_tasks+7
  8111  001E90  5025               	movf	add_tasks@temp_delay^0,w,c
  8112  001E92  5C09               	subwf	??_add_tasks^0,w,c
  8113  001E94  6E11               	movwf	(??_add_tasks+8)^0,c
  8114  001E96  5026               	movf	(add_tasks@temp_delay+1)^0,w,c
  8115  001E98  580A               	subwfb	(??_add_tasks+1)^0,w,c
  8116  001E9A  6E12               	movwf	(??_add_tasks+9)^0,c
  8117  001E9C  5027               	movf	(add_tasks@temp_delay+2)^0,w,c
  8118  001E9E  580B               	subwfb	(??_add_tasks+2)^0,w,c
  8119  001EA0  6E13               	movwf	(??_add_tasks+10)^0,c
  8120  001EA2  5028               	movf	(add_tasks@temp_delay+3)^0,w,c
  8121  001EA4  580C               	subwfb	(??_add_tasks+3)^0,w,c
  8122  001EA6  6E14               	movwf	(??_add_tasks+11)^0,c
  8123  001EA8  5029               	movf	(add_tasks@temp_delay+4)^0,w,c
  8124  001EAA  580D               	subwfb	(??_add_tasks+4)^0,w,c
  8125  001EAC  6E15               	movwf	(??_add_tasks+12)^0,c
  8126  001EAE  502A               	movf	(add_tasks@temp_delay+5)^0,w,c
  8127  001EB0  580E               	subwfb	(??_add_tasks+5)^0,w,c
  8128  001EB2  6E16               	movwf	(??_add_tasks+13)^0,c
  8129  001EB4  502B               	movf	(add_tasks@temp_delay+6)^0,w,c
  8130  001EB6  580F               	subwfb	(??_add_tasks+6)^0,w,c
  8131  001EB8  6E17               	movwf	(??_add_tasks+14)^0,c
  8132  001EBA  502C               	movf	(add_tasks@temp_delay+7)^0,w,c
  8133  001EBC  5810               	subwfb	(??_add_tasks+7)^0,w,c
  8134  001EBE  6E18               	movwf	(??_add_tasks+15)^0,c
  8135  001EC0  C007  F001         	movff	add_tasks@id,i2___wmul@multiplier
  8136  001EC4  C008  F002         	movff	add_tasks@id+1,i2___wmul@multiplier+1
  8137  001EC8  0E00               	movlw	0
  8138  001ECA  6E04               	movwf	(i2___wmul@multiplicand+1)^0,c
  8139  001ECC  0E17               	movlw	23
  8140  001ECE  6E03               	movwf	i2___wmul@multiplicand^0,c
  8141  001ED0  ECE1  F01D         	call	i2___wmul	;wreg free
  8142  001ED4  0E03               	movlw	low (_tasks+3)
  8143  001ED6  2401               	addwf	?i2___wmul^0,w,c
  8144  001ED8  6ED9               	movwf	fsr2l,c
  8145  001EDA  0E01               	movlw	high (_tasks+3)
  8146  001EDC  2002               	addwfc	(?i2___wmul+1)^0,w,c
  8147  001EDE  6EDA               	movwf	fsr2h,c
  8148  001EE0  C011  FFDE         	movff	??_add_tasks+8,postinc2
  8149  001EE4  C012  FFDE         	movff	??_add_tasks+9,postinc2
  8150  001EE8  C013  FFDE         	movff	??_add_tasks+10,postinc2
  8151  001EEC  C014  FFDE         	movff	??_add_tasks+11,postinc2
  8152  001EF0  C015  FFDE         	movff	??_add_tasks+12,postinc2
  8153  001EF4  C016  FFDE         	movff	??_add_tasks+13,postinc2
  8154  001EF8  C017  FFDE         	movff	??_add_tasks+14,postinc2
  8155  001EFC  C018  FFDE         	movff	??_add_tasks+15,postinc2
  8156  001F00                     
  8157                           ;driver.c: 182:             tasks[id].next = tasks[temp_next].next;
  8158  001F00  C02D  F001         	movff	add_tasks@temp_next,i2___wmul@multiplier
  8159  001F04  C02E  F002         	movff	add_tasks@temp_next+1,i2___wmul@multiplier+1
  8160  001F08  0E00               	movlw	0
  8161  001F0A  6E04               	movwf	(i2___wmul@multiplicand+1)^0,c
  8162  001F0C  0E17               	movlw	23
  8163  001F0E  6E03               	movwf	i2___wmul@multiplicand^0,c
  8164  001F10  ECE1  F01D         	call	i2___wmul	;wreg free
  8165  001F14  0E15               	movlw	low (_tasks+21)
  8166  001F16  2401               	addwf	?i2___wmul^0,w,c
  8167  001F18  6ED9               	movwf	fsr2l,c
  8168  001F1A  0E01               	movlw	high (_tasks+21)
  8169  001F1C  2002               	addwfc	(?i2___wmul+1)^0,w,c
  8170  001F1E  6EDA               	movwf	fsr2h,c
  8171  001F20  C007  F001         	movff	add_tasks@id,i2___wmul@multiplier
  8172  001F24  C008  F002         	movff	add_tasks@id+1,i2___wmul@multiplier+1
  8173  001F28  0E00               	movlw	0
  8174  001F2A  6E04               	movwf	(i2___wmul@multiplicand+1)^0,c
  8175  001F2C  0E17               	movlw	23
  8176  001F2E  6E03               	movwf	i2___wmul@multiplicand^0,c
  8177  001F30  ECE1  F01D         	call	i2___wmul	;wreg free
  8178  001F34  0E15               	movlw	low (_tasks+21)
  8179  001F36  2401               	addwf	?i2___wmul^0,w,c
  8180  001F38  6EE1               	movwf	fsr1l,c
  8181  001F3A  0E01               	movlw	high (_tasks+21)
  8182  001F3C  2002               	addwfc	(?i2___wmul+1)^0,w,c
  8183  001F3E  6EE2               	movwf	fsr1h,c
  8184  001F40  CFDE FFE6          	movff	postinc2,postinc1
  8185  001F44  CFDD FFE5          	movff	postdec2,postdec1
  8186  001F48                     
  8187                           ;driver.c: 183:             tasks[temp_next].next = id;
  8188  001F48  C02D  F001         	movff	add_tasks@temp_next,i2___wmul@multiplier
  8189  001F4C  C02E  F002         	movff	add_tasks@temp_next+1,i2___wmul@multiplier+1
  8190  001F50  0E00               	movlw	0
  8191  001F52  6E04               	movwf	(i2___wmul@multiplicand+1)^0,c
  8192  001F54  0E17               	movlw	23
  8193  001F56  6E03               	movwf	i2___wmul@multiplicand^0,c
  8194  001F58  ECE1  F01D         	call	i2___wmul	;wreg free
  8195  001F5C  0E15               	movlw	low (_tasks+21)
  8196  001F5E  2401               	addwf	?i2___wmul^0,w,c
  8197  001F60  6ED9               	movwf	fsr2l,c
  8198  001F62  0E01               	movlw	high (_tasks+21)
  8199  001F64  2002               	addwfc	(?i2___wmul+1)^0,w,c
  8200  001F66  6EDA               	movwf	fsr2h,c
  8201  001F68  C007  FFDE         	movff	add_tasks@id,postinc2
  8202  001F6C  C008  FFDD         	movff	add_tasks@id+1,postdec2
  8203  001F70                     
  8204                           ;driver.c: 184:             tasks[tasks[id].next].delay = tasks[tasks[id].next].delay - 
      +                          tasks[id].delay;
  8205  001F70  C007  F001         	movff	add_tasks@id,i2___wmul@multiplier
  8206  001F74  C008  F002         	movff	add_tasks@id+1,i2___wmul@multiplier+1
  8207  001F78  0E00               	movlw	0
  8208  001F7A  6E04               	movwf	(i2___wmul@multiplicand+1)^0,c
  8209  001F7C  0E17               	movlw	23
  8210  001F7E  6E03               	movwf	i2___wmul@multiplicand^0,c
  8211  001F80  ECE1  F01D         	call	i2___wmul	;wreg free
  8212  001F84  0E15               	movlw	low (_tasks+21)
  8213  001F86  2401               	addwf	?i2___wmul^0,w,c
  8214  001F88  6ED9               	movwf	fsr2l,c
  8215  001F8A  0E01               	movlw	high (_tasks+21)
  8216  001F8C  2002               	addwfc	(?i2___wmul+1)^0,w,c
  8217  001F8E  6EDA               	movwf	fsr2h,c
  8218  001F90  CFDE F023          	movff	postinc2,_add_tasks$2323
  8219  001F94  CFDD F024          	movff	postdec2,_add_tasks$2323+1
  8220  001F98                     
  8221                           ;driver.c: 184:             tasks[tasks[id].next].delay = tasks[tasks[id].next].delay - 
      +                          tasks[id].delay;
  8222  001F98  C007  F001         	movff	add_tasks@id,i2___wmul@multiplier
  8223  001F9C  C008  F002         	movff	add_tasks@id+1,i2___wmul@multiplier+1
  8224  001FA0  0E00               	movlw	0
  8225  001FA2  6E04               	movwf	(i2___wmul@multiplicand+1)^0,c
  8226  001FA4  0E17               	movlw	23
  8227  001FA6  6E03               	movwf	i2___wmul@multiplicand^0,c
  8228  001FA8  ECE1  F01D         	call	i2___wmul	;wreg free
  8229  001FAC  0E15               	movlw	low (_tasks+21)
  8230  001FAE  2401               	addwf	?i2___wmul^0,w,c
  8231  001FB0  6ED9               	movwf	fsr2l,c
  8232  001FB2  0E01               	movlw	high (_tasks+21)
  8233  001FB4  2002               	addwfc	(?i2___wmul+1)^0,w,c
  8234  001FB6  6EDA               	movwf	fsr2h,c
  8235  001FB8  CFDE F021          	movff	postinc2,_add_tasks$2324
  8236  001FBC  CFDD F022          	movff	postdec2,_add_tasks$2324+1
  8237  001FC0                     
  8238                           ;driver.c: 184:             tasks[tasks[id].next].delay = tasks[tasks[id].next].delay - 
      +                          tasks[id].delay;
  8239  001FC0  C007  F001         	movff	add_tasks@id,i2___wmul@multiplier
  8240  001FC4  C008  F002         	movff	add_tasks@id+1,i2___wmul@multiplier+1
  8241  001FC8  0E00               	movlw	0
  8242  001FCA  6E04               	movwf	(i2___wmul@multiplicand+1)^0,c
  8243  001FCC  0E17               	movlw	23
  8244  001FCE  6E03               	movwf	i2___wmul@multiplicand^0,c
  8245  001FD0  ECE1  F01D         	call	i2___wmul	;wreg free
  8246  001FD4  0E03               	movlw	low (_tasks+3)
  8247  001FD6  2401               	addwf	?i2___wmul^0,w,c
  8248  001FD8  6ED9               	movwf	fsr2l,c
  8249  001FDA  0E01               	movlw	high (_tasks+3)
  8250  001FDC  2002               	addwfc	(?i2___wmul+1)^0,w,c
  8251  001FDE  6EDA               	movwf	fsr2h,c
  8252  001FE0  CFDE F009          	movff	postinc2,??_add_tasks
  8253  001FE4  CFDE F00A          	movff	postinc2,??_add_tasks+1
  8254  001FE8  CFDE F00B          	movff	postinc2,??_add_tasks+2
  8255  001FEC  CFDE F00C          	movff	postinc2,??_add_tasks+3
  8256  001FF0  CFDE F00D          	movff	postinc2,??_add_tasks+4
  8257  001FF4  CFDE F00E          	movff	postinc2,??_add_tasks+5
  8258  001FF8  CFDE F00F          	movff	postinc2,??_add_tasks+6
  8259  001FFC  CFDE F010          	movff	postinc2,??_add_tasks+7
  8260  002000  C023  F001         	movff	_add_tasks$2323,i2___wmul@multiplier
  8261  002004  C024  F002         	movff	_add_tasks$2323+1,i2___wmul@multiplier+1
  8262  002008  0E00               	movlw	0
  8263  00200A  6E04               	movwf	(i2___wmul@multiplicand+1)^0,c
  8264  00200C  0E17               	movlw	23
  8265  00200E  6E03               	movwf	i2___wmul@multiplicand^0,c
  8266  002010  ECE1  F01D         	call	i2___wmul	;wreg free
  8267  002014  0E03               	movlw	low (_tasks+3)
  8268  002016  2401               	addwf	?i2___wmul^0,w,c
  8269  002018  6ED9               	movwf	fsr2l,c
  8270  00201A  0E01               	movlw	high (_tasks+3)
  8271  00201C  2002               	addwfc	(?i2___wmul+1)^0,w,c
  8272  00201E  6EDA               	movwf	fsr2h,c
  8273  002020  CFDE F011          	movff	postinc2,??_add_tasks+8
  8274  002024  CFDE F012          	movff	postinc2,??_add_tasks+9
  8275  002028  CFDE F013          	movff	postinc2,??_add_tasks+10
  8276  00202C  CFDE F014          	movff	postinc2,??_add_tasks+11
  8277  002030  CFDE F015          	movff	postinc2,??_add_tasks+12
  8278  002034  CFDE F016          	movff	postinc2,??_add_tasks+13
  8279  002038  CFDE F017          	movff	postinc2,??_add_tasks+14
  8280  00203C  CFDE F018          	movff	postinc2,??_add_tasks+15
  8281  002040  5009               	movf	??_add_tasks^0,w,c
  8282  002042  5C11               	subwf	(??_add_tasks+8)^0,w,c
  8283  002044  6E19               	movwf	(??_add_tasks+16)^0,c
  8284  002046  500A               	movf	(??_add_tasks+1)^0,w,c
  8285  002048  5812               	subwfb	(??_add_tasks+9)^0,w,c
  8286  00204A  6E1A               	movwf	(??_add_tasks+17)^0,c
  8287  00204C  500B               	movf	(??_add_tasks+2)^0,w,c
  8288  00204E  5813               	subwfb	(??_add_tasks+10)^0,w,c
  8289  002050  6E1B               	movwf	(??_add_tasks+18)^0,c
  8290  002052  500C               	movf	(??_add_tasks+3)^0,w,c
  8291  002054  5814               	subwfb	(??_add_tasks+11)^0,w,c
  8292  002056  6E1C               	movwf	(??_add_tasks+19)^0,c
  8293  002058  500D               	movf	(??_add_tasks+4)^0,w,c
  8294  00205A  5815               	subwfb	(??_add_tasks+12)^0,w,c
  8295  00205C  6E1D               	movwf	(??_add_tasks+20)^0,c
  8296  00205E  500E               	movf	(??_add_tasks+5)^0,w,c
  8297  002060  5816               	subwfb	(??_add_tasks+13)^0,w,c
  8298  002062  6E1E               	movwf	(??_add_tasks+21)^0,c
  8299  002064  500F               	movf	(??_add_tasks+6)^0,w,c
  8300  002066  5817               	subwfb	(??_add_tasks+14)^0,w,c
  8301  002068  6E1F               	movwf	(??_add_tasks+22)^0,c
  8302  00206A  5010               	movf	(??_add_tasks+7)^0,w,c
  8303  00206C  5818               	subwfb	(??_add_tasks+15)^0,w,c
  8304  00206E  6E20               	movwf	(??_add_tasks+23)^0,c
  8305  002070  C021  F001         	movff	_add_tasks$2324,i2___wmul@multiplier
  8306  002074  C022  F002         	movff	_add_tasks$2324+1,i2___wmul@multiplier+1
  8307  002078  0E00               	movlw	0
  8308  00207A  6E04               	movwf	(i2___wmul@multiplicand+1)^0,c
  8309  00207C  0E17               	movlw	23
  8310  00207E  6E03               	movwf	i2___wmul@multiplicand^0,c
  8311  002080  ECE1  F01D         	call	i2___wmul	;wreg free
  8312  002084  0E03               	movlw	low (_tasks+3)
  8313  002086  2401               	addwf	?i2___wmul^0,w,c
  8314  002088  6ED9               	movwf	fsr2l,c
  8315  00208A  0E01               	movlw	high (_tasks+3)
  8316  00208C  2002               	addwfc	(?i2___wmul+1)^0,w,c
  8317  00208E  6EDA               	movwf	fsr2h,c
  8318  002090  C019  FFDE         	movff	??_add_tasks+16,postinc2
  8319  002094  C01A  FFDE         	movff	??_add_tasks+17,postinc2
  8320  002098  C01B  FFDE         	movff	??_add_tasks+18,postinc2
  8321  00209C  C01C  FFDE         	movff	??_add_tasks+19,postinc2
  8322  0020A0  C01D  FFDE         	movff	??_add_tasks+20,postinc2
  8323  0020A4  C01E  FFDE         	movff	??_add_tasks+21,postinc2
  8324  0020A8  C01F  FFDE         	movff	??_add_tasks+22,postinc2
  8325  0020AC  C020  FFDE         	movff	??_add_tasks+23,postinc2
  8326  0020B0  EF70  F010         	goto	i2l395
  8327  0020B4                     i2l3297:
  8328                           
  8329                           ;driver.c: 187:         temp_next = tasks[temp_next].next;
  8330  0020B4  C02D  F001         	movff	add_tasks@temp_next,i2___wmul@multiplier
  8331  0020B8  C02E  F002         	movff	add_tasks@temp_next+1,i2___wmul@multiplier+1
  8332  0020BC  0E00               	movlw	0
  8333  0020BE  6E04               	movwf	(i2___wmul@multiplicand+1)^0,c
  8334  0020C0  0E17               	movlw	23
  8335  0020C2  6E03               	movwf	i2___wmul@multiplicand^0,c
  8336  0020C4  ECE1  F01D         	call	i2___wmul	;wreg free
  8337  0020C8  0E15               	movlw	low (_tasks+21)
  8338  0020CA  2401               	addwf	?i2___wmul^0,w,c
  8339  0020CC  6ED9               	movwf	fsr2l,c
  8340  0020CE  0E01               	movlw	high (_tasks+21)
  8341  0020D0  2002               	addwfc	(?i2___wmul+1)^0,w,c
  8342  0020D2  6EDA               	movwf	fsr2h,c
  8343  0020D4  CFDE F02D          	movff	postinc2,add_tasks@temp_next
  8344  0020D8  CFDD F02E          	movff	postdec2,add_tasks@temp_next+1
  8345  0020DC  EFCD  F00D         	goto	i2l396
  8346  0020E0                     i2l395:
  8347  0020E0  0012               	return		;funcret
  8348  0020E2                     __end_of_add_tasks:
  8349                           	opt callstack 0
  8350                           
  8351 ;; *************** function i2___wmul *****************
  8352 ;; Defined at:
  8353 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\Umul16.c"
  8354 ;; Parameters:    Size  Location     Type
  8355 ;;  multiplier      2    0[COMRAM] unsigned int 
  8356 ;;  multiplicand    2    2[COMRAM] unsigned int 
  8357 ;; Auto vars:     Size  Location     Type
  8358 ;;  __wmul          2    4[COMRAM] unsigned int 
  8359 ;; Return value:  Size  Location     Type
  8360 ;;                  2    0[COMRAM] unsigned int 
  8361 ;; Registers used:
  8362 ;;		wreg, status,2, status,0, prodl, prodh
  8363 ;; Tracked objects:
  8364 ;;		On entry : 0/0
  8365 ;;		On exit  : 0/0
  8366 ;;		Unchanged: 0/0
  8367 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8368 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8369 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8370 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8371 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8372 ;;Total ram usage:        6 bytes
  8373 ;; Hardware stack levels used:    1
  8374 ;; This function calls:
  8375 ;;		Nothing
  8376 ;; This function is called by:
  8377 ;;		_timer_ISR
  8378 ;;		_add_tasks
  8379 ;; This function uses a non-reentrant model
  8380 ;;
  8381                           
  8382                           	psect	text38
  8383  003BC2                     __ptext38:
  8384                           	opt callstack 0
  8385  003BC2                     i2___wmul:
  8386                           	opt callstack 21
  8387  003BC2  5001               	movf	i2___wmul@multiplier^0,w,c
  8388  003BC4  0203               	mulwf	i2___wmul@multiplicand^0,c
  8389  003BC6  CFF3 F005          	movff	prodl,i2___wmul@product
  8390  003BCA  CFF4 F006          	movff	prodh,i2___wmul@product+1
  8391  003BCE  5001               	movf	i2___wmul@multiplier^0,w,c
  8392  003BD0  0204               	mulwf	(i2___wmul@multiplicand+1)^0,c
  8393  003BD2  50F3               	movf	243,w,c
  8394  003BD4  2606               	addwf	(i2___wmul@product+1)^0,f,c
  8395  003BD6  5002               	movf	(i2___wmul@multiplier+1)^0,w,c
  8396  003BD8  0203               	mulwf	i2___wmul@multiplicand^0,c
  8397  003BDA  50F3               	movf	243,w,c
  8398  003BDC  2606               	addwf	(i2___wmul@product+1)^0,f,c
  8399  003BDE  C005  F001         	movff	i2___wmul@product,?i2___wmul
  8400  003BE2  C006  F002         	movff	i2___wmul@product+1,?i2___wmul+1
  8401  003BE6  0012               	return		;funcret
  8402  003BE8                     __end_ofi2___wmul:
  8403                           	opt callstack 0
  8404                           
  8405                           	psect	text39
  8406  000000                     __ptext39:
  8407                           	opt callstack 0
  8408  000000                     
  8409                           	psect	rparam
  8410  0000                     
  8411                           	psect	temp
  8412  00005D                     btemp:
  8413                           	opt callstack 0
  8414  00005D                     	ds	1
  8415  0000                     int$flags	set	btemp
  8416  0000                     wtemp8	set	btemp+1
  8417  0000                     ttemp5	set	btemp+1
  8418  0000                     ttemp6	set	btemp+4
  8419  0000                     ttemp7	set	btemp+8
  8420                           tosu	equ	0xFFF
  8421                           tosh	equ	0xFFE
  8422                           tosl	equ	0xFFD
  8423                           stkptr	equ	0xFFC
  8424                           pclatu	equ	0xFFB
  8425                           pclath	equ	0xFFA
  8426                           pcl	equ	0xFF9
  8427                           tblptru	equ	0xFF8
  8428                           tblptrh	equ	0xFF7
  8429                           tblptrl	equ	0xFF6
  8430                           tablat	equ	0xFF5
  8431                           prodh	equ	0xFF4
  8432                           prodl	equ	0xFF3
  8433                           indf0	equ	0xFEF
  8434                           postinc0	equ	0xFEE
  8435                           postdec0	equ	0xFED
  8436                           preinc0	equ	0xFEC
  8437                           plusw0	equ	0xFEB
  8438                           fsr0h	equ	0xFEA
  8439                           fsr0l	equ	0xFE9
  8440                           wreg	equ	0xFE8
  8441                           indf1	equ	0xFE7
  8442                           postinc1	equ	0xFE6
  8443                           postdec1	equ	0xFE5
  8444                           preinc1	equ	0xFE4
  8445                           plusw1	equ	0xFE3
  8446                           fsr1h	equ	0xFE2
  8447                           fsr1l	equ	0xFE1
  8448                           bsr	equ	0xFE0
  8449                           indf2	equ	0xFDF
  8450                           postinc2	equ	0xFDE
  8451                           postdec2	equ	0xFDD
  8452                           preinc2	equ	0xFDC
  8453                           plusw2	equ	0xFDB
  8454                           fsr2h	equ	0xFDA
  8455                           fsr2l	equ	0xFD9
  8456                           status	equ	0xFD8


Data Sizes:
    Strings     164
    Constant    0
    Data        7
    BSS         299
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     69      94
    BANK0           160     81     132
    BANK1           256      0     230
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           96      0       0

Pointer List with Targets:

    LCDPutStr@ptr	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_11(CODE[17]), STR_10(CODE[11]), STR_9(CODE[17]), STR_8(CODE[17]), 
		 -> STR_7(CODE[17]), STR_6(CODE[17]), STR_5(CODE[17]), STR_4(CODE[17]), 
		 -> STR_3(CODE[17]), STR_2(CODE[17]), STR_1(CODE[17]), 

    register_timer@data	PTR void  size(2) Largest target is 3935
		 -> RAM(DATA[3935]), NULL(NULL[0]), 

    register_timer@callback	PTR FTN()void  size(3) Largest target is 1
		 -> read_button_B(), readTempAndHumid(), read_button_A(), swap_machine(), 

    S38$data	PTR void  size(2) Largest target is 3935
		 -> RAM(DATA[3935]), NULL(NULL[0]), 

    tasks.data	PTR void  size(2) Largest target is 3935
		 -> RAM(DATA[3935]), NULL(NULL[0]), 

    S38$callback	PTR FTN()void  size(3) Largest target is 1
		 -> read_button_B(), readTempAndHumid(), NULL(NULL[0]), read_button_A(), 
		 -> swap_machine(), 

    tasks.callback	PTR FTN()void  size(3) Largest target is 1
		 -> read_button_B(), readTempAndHumid(), NULL(NULL[0]), read_button_A(), 
		 -> swap_machine(), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _main_interrupt in COMRAM

    _main_interrupt->_timer_ISR
    _timer_ISR->_add_tasks
    _add_tasks->i2___wmul

Critical Paths under _main in BANK0

    _main->_FSM
    _initial_register->_register_timer
    _initial_SYSTEM->_initial_display
    _initial_display->_LCDPutStr
    _LCDInit->_LCDPutInst
    _Port_BBSPIInit->_SendByteBBSPI
    _initDisplayDHT->_LCDPutStr
    _dispatch->_read_button_A
    _dispatch->_read_button_B
    _dispatch->_swap_machine
    _readTempAndHumid->_readDHT
    _readDHT->_getByte
    _FSM->_register_timer
    _switch_button_state->_remove_timer
    _remove_timer->___wmul
    _register_timer->___wmul
    _increaseButton->_display_state
    _display_state->_LCDPutStr
    _display_state->___awdiv
    _LCDPutStr->_LCDPutChar
    _displayDHT->___awdiv
    _LCDPutInst->_WritePort_BBSPI
    _LCDPutChar->_WritePort_BBSPI
    _WritePort_BBSPI->_SendByteBBSPI

Critical Paths under _main_interrupt in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main_interrupt in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main_interrupt in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main_interrupt in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main_interrupt in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main_interrupt in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main_interrupt in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main_interrupt in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main_interrupt in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main_interrupt in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main_interrupt in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main_interrupt in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main_interrupt in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main_interrupt in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main_interrupt in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _main_interrupt in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  103667
                                _FSM
                           _dispatch
                     _initDisplayDHT
                     _initial_SYSTEM
                   _initial_register
                        _start_timer
 ---------------------------------------------------------------------------------
 (1) _start_timer                                          5     3      2     121
                                              0 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (1) _initial_register                                     4     4      0   13613
                                             67 BANK0      4     4      0
                     _register_timer
 ---------------------------------------------------------------------------------
 (1) _initial_SYSTEM                                       0     0      0    4571
                     _initial_BUTTON
                  _initial_INTERRUPT
                        _initial_LED
                     _initial_OSSCON
                    _initial_display
 ---------------------------------------------------------------------------------
 (2) _initial_display                                      2     2      0    4571
                                              8 BANK0      2     2      0
                            _LCDInit
                         _LCDPutInst
                          _LCDPutStr
 ---------------------------------------------------------------------------------
 (3) _LCDInit                                              1     1      0    1914
                                              6 BANK0      1     1      0
                          _InitBBSPI
                         _LCDPutInst
                     _Port_BBSPIInit
                    _WritePort_BBSPI
 ---------------------------------------------------------------------------------
 (4) _Port_BBSPIInit                                       1     1      0     160
                                              3 BANK0      1     1      0
                      _SendByteBBSPI
 ---------------------------------------------------------------------------------
 (4) _InitBBSPI                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _initial_OSSCON                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _initial_LED                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _initial_INTERRUPT                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _initial_BUTTON                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initDisplayDHT                                       0     0      0    2657
                         _LCDPutInst
                          _LCDPutStr
 ---------------------------------------------------------------------------------
 (1) _dispatch                                             4     4      0   12152
                                             13 BANK0      4     4      0
                             ___wmul
                   _readTempAndHumid *
                      _read_button_A *
                      _read_button_B *
                       _swap_machine *
 ---------------------------------------------------------------------------------
 (2) _swap_machine                                         0     0      0       0
                                             11 BANK0      2     0      2
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) _read_button_B                                        2     0      2       0
                                             11 BANK0      2     0      2
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) _read_button_A                                        0     0      0       0
                                             11 BANK0      2     0      2
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) _readTempAndHumid                                     0     0      0     251
                             ___wmul (ARG)
                            _readDHT
 ---------------------------------------------------------------------------------
 (3) _readDHT                                              5     5      0     251
                                              6 BANK0      5     5      0
                            _getByte
 ---------------------------------------------------------------------------------
 (4) _getByte                                              6     6      0     159
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (1) _FSM                                                 14    14      0   70553
                                             67 BANK0     14    14      0
                             ___wmul
                         _displayDHT
                      _display_state
                     _increaseButton
                     _register_timer
                _switch_button_state
 ---------------------------------------------------------------------------------
 (2) _switch_button_state                                  2     2      0   20478
                                             22 BANK0      2     2      0
                      _display_state
                       _remove_timer
 ---------------------------------------------------------------------------------
 (3) _remove_timer                                        16    12      4   12211
                                              6 BANK0     16    12      4
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _register_timer                                      63    42     21   13610
                                              6 BANK0     61    40     21
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4   11767
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) _increaseButton                                       2     2      0   10691
                                             12 BANK0      2     2      0
                            ___awmod
                      _display_state
 ---------------------------------------------------------------------------------
 (3) _display_state                                        4     2      2    8267
                                              8 BANK0      4     2      2
                         _LCDPutChar
                         _LCDPutInst
                          _LCDPutStr
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (3) _LCDPutStr                                            2     0      2    1769
                                              6 BANK0      2     0      2
                         _LCDPutChar
 ---------------------------------------------------------------------------------
 (2) _displayDHT                                           0     0      0    5716
                         _LCDPutChar
                         _LCDPutInst
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (4) ___awmod                                              6     2      4    2424
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4    1516
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (3) _LCDPutInst                                           1     1      0     888
                                              5 BANK0      1     1      0
                    _WritePort_BBSPI
 ---------------------------------------------------------------------------------
 (4) _LCDPutChar                                           1     1      0     888
                                              5 BANK0      1     1      0
                    _WritePort_BBSPI
 ---------------------------------------------------------------------------------
 (5) _WritePort_BBSPI                                      2     1      1     866
                                              3 BANK0      2     1      1
                      _SendByteBBSPI
 ---------------------------------------------------------------------------------
 (6) _SendByteBBSPI                                        3     3      0     138
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _main_interrupt                                       9     9      0    4890
                                             60 COMRAM     9     9      0
                          _timer_ISR
 ---------------------------------------------------------------------------------
 (9) _timer_ISR                                           14    12      2    4889
                                             46 COMRAM    14    12      2
                          _add_tasks
                           i2___wmul
 ---------------------------------------------------------------------------------
 (10) _add_tasks                                          40    38      2    2848
                                              6 COMRAM    40    38      2
                           i2___wmul
 ---------------------------------------------------------------------------------
 (10) i2___wmul                                            6     2      4    1927
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _FSM
     ___wmul
     _displayDHT
       _LCDPutChar
         _WritePort_BBSPI
           _SendByteBBSPI
       _LCDPutInst
         _WritePort_BBSPI
           _SendByteBBSPI
       ___awdiv
       ___awmod
     _display_state
       _LCDPutChar
         _WritePort_BBSPI
           _SendByteBBSPI
       _LCDPutInst
         _WritePort_BBSPI
           _SendByteBBSPI
       _LCDPutStr
         _LCDPutChar
           _WritePort_BBSPI
             _SendByteBBSPI
       ___awdiv
       ___awmod
     _increaseButton
       ___awmod
       _display_state
         _LCDPutChar
           _WritePort_BBSPI
             _SendByteBBSPI
         _LCDPutInst
           _WritePort_BBSPI
             _SendByteBBSPI
         _LCDPutStr
           _LCDPutChar
             _WritePort_BBSPI
               _SendByteBBSPI
         ___awdiv
         ___awmod
     _register_timer
       ___wmul
     _switch_button_state
       _display_state
         _LCDPutChar
           _WritePort_BBSPI
             _SendByteBBSPI
         _LCDPutInst
           _WritePort_BBSPI
             _SendByteBBSPI
         _LCDPutStr
           _LCDPutChar
             _WritePort_BBSPI
               _SendByteBBSPI
         ___awdiv
         ___awmod
       _remove_timer
         ___wmul
   _dispatch
     ___wmul
     _readTempAndHumid *
       ___wmul (ARG)
       _readDHT (ARG)
         _getByte
     _read_button_A *
       ___wmul (ARG)
     _read_button_B *
       ___wmul (ARG)
     _swap_machine *
       ___wmul (ARG)
   _initDisplayDHT
     _LCDPutInst
       _WritePort_BBSPI
         _SendByteBBSPI
     _LCDPutStr
       _LCDPutChar
         _WritePort_BBSPI
           _SendByteBBSPI
   _initial_SYSTEM
     _initial_BUTTON
     _initial_INTERRUPT
     _initial_LED
     _initial_OSSCON
     _initial_display
       _LCDInit
         _InitBBSPI
         _LCDPutInst
           _WritePort_BBSPI
             _SendByteBBSPI
         _Port_BBSPIInit
           _SendByteBBSPI
         _WritePort_BBSPI
           _SendByteBBSPI
       _LCDPutInst
         _WritePort_BBSPI
           _SendByteBBSPI
       _LCDPutStr
         _LCDPutChar
           _WritePort_BBSPI
             _SendByteBBSPI
   _initial_register
     _register_timer
       ___wmul
   _start_timer

 _main_interrupt (ROOT)
   _timer_ISR
     _add_tasks
       i2___wmul
     i2___wmul

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F5F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      E6       7       89.8%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     51      84       5       82.5%
BITBANK15           60      0       0      35        0.0%
BANK15              60      0       0      36        0.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     45      5E       1      100.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     1C8      32        0.0%
DATA                 0      0     1C8       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.10 build 88905656 
Symbol Table                                                                                   Mon Nov 25 12:10:03 2019

          ?_initial_INTERRUPT 0001              ??_initial_OSSCON 0060         __size_of_swap_machine 003A  
            ??_initial_SYSTEM 006A                   ?_LCDPutChar 0001                  ___awdiv@sign 0065  
                 ?_LCDPutInst 0001           ___wmul@multiplicand 0062           ??_initial_INTERRUPT 0060  
       SendByteBBSPI@bitcount 0061                           l150 3C60                           l144 3C3A  
                         l153 3C6A                           l147 3C56                           l156 3C72  
                         l252 320A                           l246 3B12                           l351 191E  
                         l344 37D6                           l357 13EA                           l365 22D2  
                         l358 1454                           l366 254C                           l527 2A5E  
                         l391 344A                           l810 2856                           l635 2C46  
                         l484 3A98                           l670 3866                           l478 3A52  
                         l662 3912                           l671 3868                           l680 3C06  
                         l840 352C                           l665 3C4C                           l674 38AC  
                         l850 2FD8                           l683 39BA                           l499 2E26  
                         l668 3852                           l692 3AD8                           l844 350A  
                         l837 3474                           l853 30CA                           l677 3C24  
                         l781 3A08                           l686 3966                           l870 3BC0  
                         l784 3B42                           l866 3B66                           l859 305C  
                         l867 3B6E                           l789 36A8                           _FSM 2A60  
                         u970 3860                           u971 385C                           u980 3876  
                         u981 3872                           u990 38AC                           u991 38A8  
                 _start_timer 375C                  ___awmod@sign 0065                           tosl 000FFD  
                         wreg 000FE8          _ALLOW_TIMER_REGISTER 0055               __end_of_LCDInit 3914  
                __CFG_LVP$OFF 000000     __size_of_readTempAndHumid 002C                          ?_FSM 0001  
                __CFG_WDT$OFF 000000                          l1101 35F2                          l1114 375A  
                        l3001 25B2                          l3011 2608                          l3003 25B8  
                        l3021 264A                          l3013 2612                          l3005 25C6  
                        l3101 2F96                          l3031 268C                          l3023 2668  
                        l3015 2618                          l3007 25CC                          l3111 2FD2  
                        l3103 2FA8                          l3041 2704                          l3033 26AA  
                        l3025 2672                          l3017 2626                          l3009 25EA  
                        l3201 10E4                          l3105 2FAA                          l3043 274A  
                        l3035 26C8                          l3027 2678                          l3019 262C  
                        l3211 11E4                          l3203 1124                          l4011 2C18  
                        l3123 3010                          l3115 2FE6                          l3107 2FB2  
                        l3045 2790                          l3029 2686                          l3053 2808  
                        l4021 2A40                          l3213 120E                          l3221 126E  
                        l3205 1130                          l4013 2D90                          l3141 30C8  
                        l3133 306A                          l3125 3034                          l3117 2FF4  
                        l3109 2FB8                          l3301 3A0E                          l4023 26E6  
                        l3039 26D2                          l3231 13F2                          l3223 12BE  
                        l3215 1216                          l3207 1138                          l4015 2E08  
                        l3135 3092                          l3127 3040                          l3303 3A16  
                        l3151 3C4E                          l3071 38B4                          l4007 37A4  
                        l4025 27EA                          l3049 27D6                          l4017 2904  
                        l3241 15F0                          l3233 148A                          l3225 13DE  
                        l3217 1258                          l3209 11D2                          l3401 2D6C  
                        l4009 2BBC                          l3305 3A28                          l3313 3A4C  
                        l3321 3A62                          l3161 3C70                          l3153 3C58  
                        l3081 38D6                          l3073 38B6                          l4027 2820  
                        l4019 29F6                          l3251 17CC                          l3243 161E  
                        l3411 2DB8                          l3307 3A38                          l3323 3A74  
                        l3331 3A94                          l3155 3C62                          l3091 3906  
                        l3083 38E2                          l3075 38C8                          l3067 38AE  
                        l3163 39BC                          l3253 18C2                          l3245 172C  
                        l3413 2DCA                          l3405 2D7C                          l3341 2C64  
                        l3173 3ADA                          l3309 3A42                          l3325 3A84  
                        l3317 3A54                          l3157 3C66                          l3093 390C  
                        l3085 38F4                          l3077 38CA                          l3069 38B2  
                        l3165 39CC                          l3511 364A                          l3247 1778  
                        l3239 1554                          l3191 10A6                          l3415 2DCE  
                        l3343 2C74                          l3335 2C48                          l3095 2F88  
                        l3175 3AEA                          l3183 3B00                          l3327 3A8C  
                        l3319 3A58                          l3159 3C68                          l3087 38FA  
                        l3079 38D0                          l3167 39DA                          l2801 39AE  
                        l3513 364E                          l3441 285C                          l3249 17A2  
                        l3193 10C4                          l3417 2DD8                          l3409 2DA6  
                        l3361 2CC0                          l3353 2CAE                          l3345 2C84  
                        l3337 2C4C                          l3425 2DF2                          l3097 2F92  
                        l3185 3B0A                          l3177 3AF4                          l3521 3B44  
                        l3601 33CA                          l3089 3900                          l3169 39EE  
                        l2811 3918                          l3515 3662                          l3507 35F4  
                        l3451 28AC                          l3443 286C                          l3259 18F0  
                        l3419 2DDE                          l3371 2CEE                          l3363 2CCA  
                        l3355 2CB2                          l3347 2C94                          l3339 2C5C  
                        l3611 2A60                          l3099 2F94                          l3187 3B0C  
                        l3179 3AF6                          l3523 3B58                          l3603 33F0  
                        l2803 3C3C                          l2821 3946                          l2813 3920  
                        l2901 35A0                          l3517 36A4                          l3509 3608  
                        l3461 292E                          l3453 28CE                          l3445 2874  
                        l3197 10D8                          l3381 2D18                          l3373 2CF8  
                        l3365 2CD6                          l3357 2CBC                          l3349 2C98  
                        l3621 2A9C                          l3613 2A68                          l3605 33F4  
                        l2805 3C0C                          l2823 3952                          l2815 392C  
                        l2911 35CC                          l2903 35A6                          l2831 3AB2  
                        l3471 2960                          l3463 2932                          l3439 2858  
                        l3199 10DC                          l3391 2D60                          l3383 2D28  
                        l3367 2CD8                          l3375 2CFE                          l3359 2CBE  
                        l3631 2B52                          l3623 2ACA                          l3615 2A70  
                        l3607 340E                          l2807 3C0E                          l3551 3C26  
                        l2761 3884                          l2825 395A                          l2817 3934  
                        l2905 35BC                          l2913 35D2                          l2921 36AA  
                        l2833 3AB8                          l3481 29C0                          l3473 2968  
                        l3465 2944                          l3449 288A                          l3457 28F0  
                        l3393 2D62                          l3385 2D38                          l3369 2CEA  
                        l3641 2B80                          l3633 2B58                          l3625 2B22  
                        l3617 2A74                          l2841 3456                          l3609 341A  
                        l2809 3C22                          l3553 3C32                          l3561 3764  
                        l2771 388E                          l2763 3886                          l2755 3860  
                        l2747 3848                          l2819 393E                          l2915 35E2  
                        l2907 35C4                          l2931 36D8                          l2923 36B0  
                        l2827 3A9A                          l3467 2948                          l3459 2922  
                        l3395 2D64                          l3387 2D4A                          l3379 2D08  
                        l3643 2B9C                          l3635 2B74                          l3651 2BA8  
                        l3627 2B26                          l3619 2A98                          l2851 3498  
                        l2843 346E                          l2835 344C                          l3299 3A0A  
                        l3555 3C36                          l3571 3786                          l3563 3770  
                        l3731 3B8A                          l3723 3B70                          l2773 3890  
                        l2765 3888                          l2757 3876                          l2749 384C  
                        l2781 3BEC                          l2917 35EA                          l2909 35C6  
                        l2941 3710                          l2933 36E0                          l2925 36BE  
                        l2829 3A9E                          l3477 297C                          l3485 29E2  
                        l3469 294E                          l3493 2A2A                          l3397 2D66  
                        l3389 2D5E                          l3661 2BEE                          l3645 2BA0  
                        l3637 2B78                          l3629 2B36                          l2853 34C0  
                        l3557 30CC                          l3573 3788                          l3565 3772  
                        l3733 3B8E                          l3725 3B74                          l2775 3892  
                        l2767 388A                          l2759 387E                          l2783 3BEE  
                        l2791 3980                          l2951 374A                          l2943 3726  
                        l2935 36F2                          l2927 36C6                          l3479 299E  
                        l3487 2A14                          l2871 3B9A                          l3399 2D68  
                        l3655 2BD2                          l3647 2BA2                          l3639 2B7A  
                        l3671 2C02                          l2855 34E2                          l2863 3518  
                        l2847 3482                          l3591 3B20                          l3567 3778  
                        l3559 375C                          l3727 3B78                          l2777 389A  
                        l2769 388C                          l2785 3C04                          l2793 3988  
                        l2881 3542                          l2953 3752                          l2945 372E  
                        l2937 36FA                          l2929 36CA                          l3489 2A20  
                        l2873 3BB8                          l2961 22C8                          l3665 2BF6  
                        l3657 2BDC                          l2865 351A                          l2857 34EE  
                        l2849 348A                          l3593 3B2E                          l3569 3784  
                        l3577 378E                          l3729 3B86                          l2779 389C  
                        l2795 3992                          l2787 396C                          l2891 3568  
                        l2883 354A                          l2947 3734                          l2939 3702  
                        l2971 24E0                          l3667 2BFA                          l3659 2BE6  
                        l2867 352A                          l3579 37D2                          l2797 399A  
                        l2789 3974                          l2893 3570                          l2885 354E  
                        l2877 352E                          l2949 373A                          l2965 22DA  
                        l2957 20E2                          l3597 3332                          l3589 3B14  
                        l2799 39A6                          l2895 3582                          l2887 355C  
                        l2879 3534                          l2991 2570                          l2983 254E  
                        l2967 233A                          l2959 211A                          l3599 3340  
                        l2897 358A                          l2889 3564                          l2993 2582  
                        l2985 2552                          l2969 2494                          l2977 250E  
                        l2899 3592                          l2995 2588                          l2987 2558  
                        l2979 2538                          l2997 259A                          l2989 256A  
                        l2999 25A0                          STR_1 1089                          STR_2 1067  
                        STR_3 1045                          STR_4 1078                          STR_5 1045  
                        STR_6 1034                          STR_7 1023                          STR_8 1056  
                        STR_9 1001                          u1000 3AD8                          u1001 3AD4  
                        u1010 346E                          u1011 346A                          u1100 355C  
                        u1020 3482                          u1101 3558                          u1021 347E  
                        u1110 3582                          u1030 3498                          u1111 357E  
                        u1031 3494                          u1120 35A0                          u1200 374A  
                        u1121 359C                          u1201 3746                          u1130 35BC  
                        u1210 211A                          u1131 35B8                          u1211 2116  
                        u1140 35E2                          u1060 3506                          u1044 34AE  
                        u1300 300C                          u1141 35DE                          u1221 216C  
                        u1061 3502                          u1045 34AA                          u1301 3008  
                        u1150 36BE                          u1070 3518                          u1054 34D6  
                        u1310 3020                          u2007 392E                          u1151 36BA  
                        u1231 2244                          u1071 3514                          u1055 34D2  
                        u1311 301A                          u1160 36D8                          u1400 10C4  
                        u1240 233A                          u1080 352A                          u1320 3022  
                        u2017 3940                          u1161 36D4                          u1401 10C0  
                        u1241 2336                          u1081 3526                          u1090 3542  
                        u1170 36F2                          u1410 1124                          u1330 3034  
                        u2027 3954                          u1091 353E                          u1171 36EE  
                        u1411 1120                          u1251 238C                          u1331 3030  
                        u1180 3710                          u1420 11E4                          u1340 3058  
                        u1500 3A38                          u2037 396E                          u1181 370C  
                        u1421 11E0                          u1261 2464                          u1341 3054  
                        u1501 3A34                          u1190 3726                          u1430 12BE  
                        u1270 254C                          u1350 306A                          u1510 3A74  
                        u2047 3982                          u1191 3722                          u1431 12BA  
                        u1271 2548                          u1351 3066                          u1511 3A70  
                        u1440 148A                          u1600 2D4A                          u1360 30A6  
                        u1280 2FD2                          u1520 3A84                          u2057 3994  
                        u1441 1486                          u1601 2D46                          u1361 309E  
                        u1281 2FCE                          u1521 3A80                          u1450 161E  
                        u1610 2DB8                          u1530 2C5C                          u1290 2FE6  
                        u2067 39A8                          u1451 161A                          u1611 2DB4  
                        u1531 2C58                          u1291 2FE2                          u1700 3662  
                        u1620 2DCA                          u1540 2C74                          u1380 30C4  
                        u1701 365E                          u1621 2DC6                          u1541 2C70  
                        u1381 30C0                          u1630 2DEE                          u1550 2C84  
                        u1390 3AEA                          u1710 3B58                          u1631 2DEA  
                        u1551 2C80                          u1391 3AE6                          u1711 3B54  
                        u1640 286C                          u1560 2C94                          u1800 2B74  
                        u1641 2868                          u1561 2C90                          u1801 2B70  
                        u1650 2886                          u1570 2CAA                          u1810 2B9C  
                        u1378 30AA                          u1490 3A28                          u1651 2882  
                        u1571 2CA6                          u1811 2B98                          u1491 3A24  
                        u1660 2944                          u1580 2CEA                          u1661 2940  
                        u1581 2CE6                          u1670 2960                          u1590 2D38  
                        u1671 295C                          u1591 2D34                          u1680 2978  
                        u1760 33F0                          u1681 2974                          u1761 33EC  
                        u1690 3608                          u1770 344A                          u1691 3604  
                        u1771 3446                          u1780 2A98                          u1781 2A94  
                        u1790 2B52                          u1758 33B6                          u1791 2B4E  
                        u1759 33CA                          u1937 39FA                          u1947 38BE  
                        u1957 38EA                          u1967 2F9E            _NUMBER_EXIST_TASKS 00CB  
                        u1977 2FAC                          u1987 3484                          u1997 391A  
                        _TMR0 000FD6                ?_display_state 0068                 _state_machine 0057  
   __end_of_initial_INTERRUPT 3C74                          _main 3B70                          _time 0044  
                        fsr1h 000FE2                          fsr2h 000FDA                          fsr1l 000FE1  
                        fsr2l 000FD9                          btemp 005D                  _swap_machine 3ADA  
            ?_WritePort_BBSPI 0063                          prodh 000FF4                          prodl 000FF3  
                        start 000E            __size_of_LCDPutStr 0040                 __CFG_IESO$OFF 000000  
           ??_initial_display 0068                 __CFG_MCLRE$ON 000000                  ___param_bank 000000  
                       ??_FSM 00A3                 _state_working 0056                         ?_main 0001  
             __end_of___awdiv 35F4                         STR_10 109A                         STR_11 1012  
             __end_of___awmod 375C                         _T0CON 000FD5               ___awdiv@divisor 0062  
                       _T1CON 000FCD                         i2l107 3316                         i2l382 2ED2  
                       i2l384 2F86                         i2l395 20E0                         i2l396 1B9A  
                       i2l870 3BE6               ___awdiv@counter 0064                         _TMR1H 000FCF  
                       _TMR1L 000FCE                         _PORTD 000F83                         _TRISD 000F95  
                ?_initial_LED 0001                 __CFG_PWRT$OFF 000000               __end_of_getByte 352E  
              __CFG_FCMEN$OFF 000000       __size_of_Port_BBSPIInit 001E               __end_of_readDHT 30CC  
                       _tasks 0100   __end_of_switch_button_state 2E28                __CFG_BOREN$OFF 000000  
                       pclath 000FFA                         tablat 000FF5           __size_of_LCDPutChar 0054  
            __end_ofi2___wmul 3BE8                         plusw2 000FDB           __size_of_LCDPutInst 0054  
                       ttemp5 005E                         ttemp6 0061                         ttemp7 0065  
                       status 000FD8                         wtemp8 005E               __initialization 37D8  
                __end_of_main 3B9A             ?_initial_register 0001            ??_initial_register 00A3  
                      ??_main 00B1                 __activetblptr 000003                     ??_LCDInit 0066  
                LCDPutChar@ch 0065             __end_of_LCDPutStr 3ADA         start_timer@time_vaddr 0064  
                      _ADCON1 000FC1            __size_of_InitBBSPI 0012               ??_display_state 006A  
            ___awdiv@dividend 0060                  LCDPutInst@ch 0065             _temperature_dht11 00C7  
              _register_timer 10A6                        i2l3145 3BC2                        i2l3147 3BDE  
                      i2l3271 1B2E                        i2l3281 1CD2                        i2l3265 1920  
                      i2l3291 1F98                        i2l3283 1DB8                        i2l3275 1B3A  
                      i2l3267 1928                        i2l3531 2E38                        i2l3293 1FC0  
                      i2l3285 1F00                        i2l3277 1BCE                        i2l3269 1996  
                      i2l3541 2F28                        i2l3533 2E5C                        i2l3701 3296  
                      i2l3287 1F48                        i2l3543 2F34                        i2l3535 2E9A  
                      i2l3527 2E28                        i2l3711 32D0                        i2l3703 329A  
                      i2l3289 1F70                        i2l3297 20B4                        i2l3537 2EDA  
                      i2l3545 2F40                        i2l3529 2E34                        i2l3721 3312  
                      i2l3713 32DA                        i2l3705 32AA                        i2l3547 2F7E  
                      i2l3539 2F02                        i2l3715 32EC                        i2l3707 32AE  
                      i2l3717 32FC                        i2l3709 32C0                        i2l3719 3302  
                      i2l3691 3244                        i2l3693 324C                        i2l3685 3226  
                      i2l3695 325C                        i2l3687 3234                        i2l3697 3262  
                      i2l3689 3242                        i2l3699 3274                        _OSCCON 000FD3  
  __size_of_initial_INTERRUPT 0004                  LCDPutStr@ptr 0066              _BUTTON_INC_STATE 005B  
     __size_of_increaseButton 0208                _main_interrupt 0008                __CFG_XINST$OFF 000000  
          add_tasks@temp_next 002D              __end_of_dispatch 344C                        ___wmul 3B9A  
                   ??___awdiv 0064                     ??___awmod 0064       __size_of_initDisplayDHT 0030  
                      _ledVal 004C                        clear_0 381C                        clear_1 3828  
                      clear_2 3834              ___awdiv@quotient 0066               ___awmod@divisor 0062  
                   ??_getByte 0060               ___awmod@counter 0064                     ??_readDHT 0066  
                __pdataCOMRAM 005A        Port_BBSPIInit@port_dir 0063                  __mediumconst 0000  
                      tblptrh 000FF7                        tblptrl 000FF6                        tblptru 000FF8  
      __end_of_register_timer 1920              _readTempAndHumid 3B44        __size_of_read_button_A 004A  
      __size_of_read_button_B 0046              fp__read_button_A 0000              fp__read_button_B 0000  
                  __accesstop 0060       __end_of__initialization 383A        __end_of_main_interrupt 3332  
               ___rparam_used 000001            __size_of_add_tasks 07C2        __size_of_SendByteBBSPI 006A  
              __pcstackCOMRAM 0001                  __pidataBANK0 3C6C             __end_of_InitBBSPI 3C4E  
                ??_LCDPutChar 0065                  ??_LCDPutInst 0065                     ?i2___wmul 0001  
                ?_start_timer 0060               __CFG_OSC$INTIO7 000000               _temperature_old 00D8  
              _Port_BBSPIInit 3C08          __size_of_initial_LED 000A               ?_register_timer 0066  
             _initial_display 39BC                    __pbssBANK0 00B1                    __pbssBANK1 0100  
             ?_main_interrupt 0001            __end_of_LCDPutChar 39BC            __end_of_LCDPutInst 3968  
                     ?___wmul 0060                 _read_button_A 3A0A                 _read_button_B 3A54  
          register_timer@data 0079      register_timer@temp_delay 0099                    ??i2___wmul 0005  
      __end_of_Port_BBSPIInit 3C26      register_timer@temp_index 00A1            __size_of_timer_ISR 0160  
                     _LCDInit 38AE             __end_of_add_tasks 20E2                 _SendByteBBSPI 3844  
                     _OSCTUNE 000F9B                    _displayDHT 35F4                     ?_dispatch 0001  
            WritePort_BBSPI@a 0063                _increaseButton 2858                 ?_remove_timer 0066  
         add_tasks@temp_delay 0025          register_timer@period 006E                       __Hparam 0000  
                  _hold_but_B 00DC                       __Lparam 0000                _initDisplayDHT 3B14  
                     ___awdiv 352E                       ___awmod 36AA                ?_read_button_A 006B  
              ?_read_button_B 006B               __size_of___wmul 0028      __size_of_WritePort_BBSPI 0020  
                __psmallconst 1000                remove_timer@id 0066                       __pcinit 37D8  
                     __ramtop 1000                       _getByte 344C                       __ptext0 3B70  
                     __ptext1 375C                       __ptext2 30CC                       __ptext3 3C26  
                     __ptext4 39BC                       __ptext5 38AE                       __ptext6 3C08  
                     __ptext7 3C3C                       __ptext8 3C4E                       __ptext9 3C58  
                __size_of_FSM 01E8                     _T1CONbits 000FCD                       _readDHT 2F88  
              ?_SendByteBBSPI 0001               ?_Port_BBSPIInit 0001       __end_of_initial_display 3A0A  
     __size_of_initial_BUTTON 000A              ___awmod@dividend 0060       __size_of_initial_OSSCON 000A  
     __size_of_initial_SYSTEM 0016                       _setting 00DB     __size_of_initial_register 0140  
                   _LCDPutStr 3A9A                    ??_dispatch 006D                __pintcode_body 320C  
        end_of_initialization 383A        __end_of_increaseButton 2A60           fp__readTempAndHumid 0000  
                     int_func 320C           i2___wmul@multiplier 0001                ??_remove_timer 006A  
                   _HUMI_SWAP 005A             __end_of_timer_ISR 2F88  __size_of_switch_button_state 01E0  
              _add_tasks$2323 0023                _add_tasks$2324 0021        __end_of_initDisplayDHT 3B44  
           _remove_timer$2312 0072                       postdec1 000FE5                       postdec2 000FDD  
    __end_of_readTempAndHumid 3B70                       postinc0 000FEE                       postinc1 000FE6  
                     postinc2 000FDE                     _TEMP_SWAP 00E0                     _TIME_SWAP 00E1  
                   _PORTAbits 000F80                     _PORTBbits 000F81                     _PORTCbits 000F82  
              getByte@timeOut 0063                     _TRISAbits 000F92                     _TRISBbits 000F93  
                   _TRISCbits 000F94                     _TRISFbits 000F97                   ?_displayDHT 0001  
        __size_of_start_timer 007C                    ?_LCDPutStr 0066               fp__swap_machine 0000  
       __end_of_display_state 2858                  _BUTTON_STATE 00E2           SendByteBBSPI@output 0060  
             ?_increaseButton 0001               ?_initDisplayDHT 0001               ??_read_button_A 0066  
             ??_read_button_B 006D                __end_of___wmul 3BC2        register_timer@callback 0076  
               __pidataCOMRAM 3C74               ??_SendByteBBSPI 0060                     _InitBBSPI 3C3C  
            ??_register_timer 007B              i2___wmul@product 0005              ?_initial_display 0001  
           ??_WritePort_BBSPI 0064           start_initialization 37D8                   __end_of_FSM 2C48  
           __size_ofi2___wmul 0026              ??_main_interrupt 003D                  _first_read_A 005C  
                _first_read_B 00E3                 _second_read_A 0059                 _second_read_B 00DF  
               ?_swap_machine 006B        _time_checkout_HEATPUMB 00D1                      ??___wmul 0064  
         __size_of_displayDHT 00B6                   __pdataBANK0 00E0                    ?_InitBBSPI 0001  
              _initial_BUTTON 3C62          __end_of_remove_timer 254E                 ??_initial_LED 0060  
                    ?_LCDInit 0001                _initial_OSSCON 3C4E                   __pbssCOMRAM 0044  
               __pcstackBANK0 0060                _initial_SYSTEM 3C26              _initial_register 30CC  
                 ??_LCDPutStr 0068                     _add_tasks 1920                ??_swap_machine 0066  
           __size_of_dispatch 011A                     __pintcode 0008                      ?___awdiv 0060  
                    ?___awmod 0060              ??_Port_BBSPIInit 0063        __end_of_initial_BUTTON 3C6C  
         _register_timer$2310 0097           _register_timer$2311 0093                      ?_getByte 0001  
      __end_of_initial_OSSCON 3C58            display_state@state 0068                   add_tasks@id 0007  
                    ?_readDHT 0001                   __smallconst 1000        __end_of_initial_SYSTEM 3C3C  
         register_timer@delay 0066           _switch_button_state 2C48                      _FSM$2315 00A9  
                   _execution 00B1                      _FLAG_BUG 0054                    ?_add_tasks 0007  
         __end_of_initial_LED 3C62                ___wmul@product 0064                      _LATAbits 000F89  
                    _LATCbits 000F8B                      _LATDbits 000F8C                      _LATFbits 000F8E  
                    _PIE1bits 000F9D          ?_switch_button_state 0001                      i2u146_40 1996  
                    i2u146_41 1992                      i2u147_40 1BCE                      i2u147_41 1BCA  
                    i2u148_40 1DB8                      i2u172_40 2E5C                      i2u148_41 1DB4  
                    i2u172_41 2E58                      i2u173_40 2E9A                      i2u173_41 2E96  
                    i2u174_40 2F7E                      i2u190_40 32EC                      i2u182_40 3234  
                    i2u174_41 2F7A                      i2u190_41 32E8                      i2u182_41 3230  
                    i2u191_40 32FC                      i2u183_40 3242                      i2u191_41 32F8  
                    i2u183_41 323E                      i2u192_40 3312                      i2u184_40 325C  
                    i2u192_41 330E                      i2u184_41 3258                      i2u185_40 3274  
                    i2u185_41 3270                      _PIR1bits 000F9E                      i2u186_40 3296  
                    i2u186_41 3292                      i2u187_40 32AA                      i2u187_41 32A6  
                    i2u188_40 32C0                      i2u188_41 32BC                      i2u189_40 32D0  
                    i2u189_41 32CC                     _timer_ISR 2E28                    timer_ISR@i 003B  
           ?_readTempAndHumid 0001                  _humidity_old 00D7               ?_initial_BUTTON 0001  
          ??_readTempAndHumid 006B             ___wmul@multiplier 0060               ?_initial_OSSCON 0001  
                 ??_InitBBSPI 0060            SendByteBBSPI@input 0062                      i2___wmul 3BC2  
               _id_hold_but_B 0058               ?_initial_SYSTEM 0001                     dispatch@i 006F  
            __size_of_LCDInit 0066                  _NUMBER_EXIST 00CD                  ??_displayDHT 0068  
            ??_increaseButton 006C                     copy_data0 37EC              ??_initDisplayDHT 0068  
                 _count_count 004E                 _temp_humidity 0052         ??_switch_button_state 0076  
             register_timer@i 0095                      __Hrparam 0000                      __Lrparam 0000  
                  ?_timer_ISR 002F               _WritePort_BBSPI 3BE8                    _HEAD_ARRAY 0050  
       __size_of_remove_timer 046C            __end_of_displayDHT 36AA              __size_of___awdiv 00C6  
            __size_of___awmod 00B2                    _HEAD_QUEUE 00C9         i2___wmul@multiplicand 0003  
        __end_of_swap_machine 3B14              __size_of_getByte 00E2                 ??_start_timer 0062  
                 _initial_LED 3C58              __size_of_readDHT 0144                      __ptext10 3C70  
                    __ptext11 3C62                      __ptext20 2A60                      __ptext12 3B14  
                    __ptext21 2C48                      __ptext13 3332                      __ptext30 352E  
                    __ptext22 20E2                      __ptext14 3A54                      __ptext31 3914  
                    __ptext23 10A6                      __ptext15 3B44                      __ptext32 3968  
                    __ptext24 3B9A                      __ptext16 3A0A                      __ptext33 3BE8  
                    __ptext25 2858                      __ptext17 3ADA                      __ptext34 3844  
                    __ptext26 254E                      __ptext18 2F88                      __ptext27 3A9A  
                    __ptext19 344C                      __ptext36 2E28                      __ptext28 35F4  
                    __ptext37 1920                      __ptext29 36AA                      __ptext38 3BC2  
                    __ptext39 0000                   ??_add_tasks 0009                      _dispatch 3332  
                    _button_A 00DE                      _button_B 00DD                 __size_of_main 002A  
                _remove_tasks 00CF                      _humidity 00D9                  _remove_timer 20E2  
                    getByte@i 0062                      getByte@j 0065      __end_of_initial_register 320C  
      remove_timer@temp_index 0074                      int$flags 005D         __end_of_read_button_A 3A54  
       __end_of_read_button_B 3A9A                    _LCDPutChar 3968                    _LCDPutInst 3914  
                _temp_heat_up 00D5        __size_of_display_state 030A         __end_of_SendByteBBSPI 38AE  
                  _INTCONbits 000FF2          initial_register@temp 00A3          _time_checkout_HEATER 00D3  
         __end_of_start_timer 37D8                      intlevel2 0000      __size_of_initial_display 004E  
               timer_ISR@temp 0039       __end_of_WritePort_BBSPI 3C08                   ??_timer_ISR 0031  
             readDHT@checkSum 0068                   _temperature 00DA       WritePort_BBSPI@port_add 0064  
              _humidity_dht11 00C5               start_timer@type 0060       __size_of_register_timer 087A  
               _display_state 254E                readDHT@timeOut 0069             _initial_INTERRUPT 3C70  
     __size_of_main_interrupt 332A              ??_initial_BUTTON 0060  
